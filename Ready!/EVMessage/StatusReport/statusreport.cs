//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EVMessage.StatusReport.Schema
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;


    /// <summary>
    /// <para>
    /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
    /// </para>
    /// </summary>
    public partial class statusreport : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator statusreport(XElement xe) { return XTypedServices.ToXTypedElement<statusreport>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static statusreport()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportheader", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("report", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("optional1", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("optional2", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("optional3", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("optional4", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("optional5", "EVMessage.StatusReport.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public statusreport()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public reportheader reportheader
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportheader", "EVMessage.StatusReport.Schema"));
                return ((reportheader)(x));
            }
            set
            {
                this.SetElement(XName.Get("reportheader", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public report report
        {
            get
            {
                XElement x = this.GetElement(XName.Get("report", "EVMessage.StatusReport.Schema"));
                return ((report)(x));
            }
            set
            {
                this.SetElement(XName.Get("report", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional1 optional1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional1", "EVMessage.StatusReport.Schema"));
                return ((optional1)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional1", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional2 optional2
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional2", "EVMessage.StatusReport.Schema"));
                return ((optional2)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional2", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional3 optional3
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional3", "EVMessage.StatusReport.Schema"));
                return ((optional3)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional3", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional4 optional4
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional4", "EVMessage.StatusReport.Schema"));
                return ((optional4)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional4", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportheader, report, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional5 optional5
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional5", "EVMessage.StatusReport.Schema"));
                return ((optional5)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional5", "EVMessage.StatusReport.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("statusreport", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static statusreport Load(string xmlFile)
        {
            return XTypedServices.Load<statusreport>(xmlFile);
        }

        public static statusreport Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<statusreport>(xmlFile);
        }

        public static statusreport Parse(string xml)
        {
            return XTypedServices.Parse<statusreport>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<statusreport>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("reportheader", "EVMessage.StatusReport.Schema"), typeof(reportheader));
            localElementDictionary.Add(XName.Get("report", "EVMessage.StatusReport.Schema"), typeof(report));
            localElementDictionary.Add(XName.Get("optional1", "EVMessage.StatusReport.Schema"), typeof(optional1));
            localElementDictionary.Add(XName.Get("optional2", "EVMessage.StatusReport.Schema"), typeof(optional2));
            localElementDictionary.Add(XName.Get("optional3", "EVMessage.StatusReport.Schema"), typeof(optional3));
            localElementDictionary.Add(XName.Get("optional4", "EVMessage.StatusReport.Schema"), typeof(optional4));
            localElementDictionary.Add(XName.Get("optional5", "EVMessage.StatusReport.Schema"), typeof(optional5));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
    /// </para>
    /// </summary>
    public partial class reportheader : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportheader(XElement xe) { return XTypedServices.ToXTypedElement<reportheader>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportheader()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportformatversion", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportformatrelease", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportdateformat", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportdate", "EVMessage.StatusReport.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
        /// </para>
        /// </summary>
        public reportheader()
        {
        }

        /// <summary>
        /// <para>
        /// Report Format Version
        /// </para>
        /// <para>
        /// The report format version contains the version number of the SCHEMA.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
        /// </para>
        /// </summary>
        public string reportformatversion
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportformatversion", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportformatversion", "EVMessage.StatusReport.Schema"), value, "reportformatversion", reportformatversionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Report Format Release
        /// </para>
        /// <para>
        /// 
        ///							The report format release contains the release number of the report
        ///							format version number of the SCHEMA.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
        /// </para>
        /// </summary>
        public string reportformatrelease
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportformatrelease", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportformatrelease", "EVMessage.StatusReport.Schema"), value, "reportformatrelease", reportformatreleaseLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Report Date Format
        /// </para>
        /// <para>
        /// The unique value admitted is "204" corresponding at "CCYYMMDDHHMMSS"
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
        /// </para>
        /// </summary>
        public string reportdateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportdateformat", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportdateformat", "EVMessage.StatusReport.Schema"), value, "reportdateformat", reportdateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Report Date
        /// </para>
        /// <para>
        /// The report date is the date on which the report was initiated.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportformatversion, reportformatrelease, reportdateformat, reportdate)
        /// </para>
        /// </summary>
        public string reportdate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportdate", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportdate", "EVMessage.StatusReport.Schema"), value, "reportdate", reportdateLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportheader", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportheader Load(string xmlFile)
        {
            return XTypedServices.Load<reportheader>(xmlFile);
        }

        public static reportheader Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportheader>(xmlFile);
        }

        public static reportheader Parse(string xml)
        {
            return XTypedServices.Parse<reportheader>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportheader>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("reportformatversion", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportformatrelease", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportdateformat", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportdate", "EVMessage.StatusReport.Schema"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class reportformatversionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportformatversionLocalType()
            {
            }
        }

        private class reportformatreleaseLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportformatreleaseLocalType()
            {
            }
        }

        private class reportdateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "204"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportdateformatLocalType()
            {
            }
        }

        private class reportdateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 14, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportdateLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (messageacknowledgment, reportacknowledgment)
    /// </para>
    /// </summary>
    public partial class report : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator report(XElement xe) { return XTypedServices.ToXTypedElement<report>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static report()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (messageacknowledgment, reportacknowledgment)
        /// </para>
        /// </summary>
        public report()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageacknowledgment, reportacknowledgment)
        /// </para>
        /// </summary>
        public messageacknowledgment messageacknowledgment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema"));
                return ((messageacknowledgment)(x));
            }
            set
            {
                this.SetElement(XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageacknowledgment, reportacknowledgment)
        /// </para>
        /// </summary>
        public reportacknowledgment reportacknowledgment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema"));
                return ((reportacknowledgment)(x));
            }
            set
            {
                this.SetElement(XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("report", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static report Load(string xmlFile)
        {
            return XTypedServices.Load<report>(xmlFile);
        }

        public static report Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<report>(xmlFile);
        }

        public static report Parse(string xml)
        {
            return XTypedServices.Parse<report>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<report>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema"), typeof(messageacknowledgment));
            localElementDictionary.Add(XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema"), typeof(reportacknowledgment));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
    /// </para>
    /// </summary>
    public partial class messageacknowledgment : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator messageacknowledgment(XElement xe) { return XTypedServices.ToXTypedElement<messageacknowledgment>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static messageacknowledgment()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("registrationnumber", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("registrationid", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("messagedateformat", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("messagedate", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("readymessageid", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("messagefilename", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("ev_acktype", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("ev_attachment", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("ev_entities", "EVMessage.StatusReport.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public messageacknowledgment()
        {
        }

        /// <summary>
        /// <para>
        /// The Registration Number of the message
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string registrationnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("registrationnumber", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("registrationnumber", "EVMessage.StatusReport.Schema"), value, "registrationnumber", registrationnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Registration Identifier of the message
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public decimal registrationid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("registrationid", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("registrationid", "EVMessage.StatusReport.Schema"), value, "registrationid", registrationidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The format of the Marketing Authorisation Message Date.
        /// </para>
        /// <para>
        /// The unique value admitted is "204" corresponding at "CCYYMMDDHHMMSS"
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string messagedateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedateformat", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedateformat", "EVMessage.StatusReport.Schema"), value, "messagedateformat", messagedateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Marketing Authorisation Message Date.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string messagedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedate", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedate", "EVMessage.StatusReport.Schema"), value, "messagedate", messagedateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Ready Message Identifier of the message
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string readymessageid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("readymessageid", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("readymessageid", "EVMessage.StatusReport.Schema"), value, "readymessageid", readymessageidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Name of the original MA file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string messagefilename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagefilename", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagefilename", "EVMessage.StatusReport.Schema"), value, "messagefilename", messagefilenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 01 = Successful (All Reports loaded into database) 02 = Errors (EVPR Error, not all reports loaded into the database) 03 = Failed (SGML parsing error, no data extracted)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string ev_acktype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_acktype", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_acktype", "EVMessage.StatusReport.Schema"), value, "ev_acktype", ev_acktypeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Sent xEVPRM xml to EMA or received ACK xml from EMA unique file name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public string ev_attachment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_attachment", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_attachment", "EVMessage.StatusReport.Schema"), value, "ev_attachment", ev_attachmentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about the ev message entities
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (registrationnumber, registrationid, messagedateformat, messagedate, readymessageid?, messagefilename, ev_acktype?, ev_attachment?, ev_entities?)
        /// </para>
        /// </summary>
        public ev_entitiesLocalType ev_entities
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_entities", "EVMessage.StatusReport.Schema"));
                return ((ev_entitiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("ev_entities", "EVMessage.StatusReport.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static messageacknowledgment Load(string xmlFile)
        {
            return XTypedServices.Load<messageacknowledgment>(xmlFile);
        }

        public static messageacknowledgment Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<messageacknowledgment>(xmlFile);
        }

        public static messageacknowledgment Parse(string xml)
        {
            return XTypedServices.Parse<messageacknowledgment>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<messageacknowledgment>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("registrationnumber", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("registrationid", "EVMessage.StatusReport.Schema"), typeof(decimal));
            localElementDictionary.Add(XName.Get("messagedateformat", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("messagedate", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("readymessageid", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("messagefilename", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_acktype", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_attachment", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_entities", "EVMessage.StatusReport.Schema"), typeof(ev_entitiesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class registrationnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private registrationnumberLocalType()
            {
            }
        }

        private class registrationidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1280)), null, 0, 0, null, null, 0, null, 0m, 0, null, 10, XmlSchemaWhiteSpace.Collapse));

            private registrationidLocalType()
            {
            }
        }

        private class messagedateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "204"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagedateformatLocalType()
            {
            }
        }

        private class messagedateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 14, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagedateLocalType()
            {
            }
        }

        private class readymessageidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));

            private readymessageidLocalType()
            {
            }
        }

        private class messagefilenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 1000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagefilenameLocalType()
            {
            }
        }

        private class ev_acktypeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "01",
                            "02",
                            "03"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_acktypeLocalType()
            {
            }
        }

        private class ev_attachmentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_attachmentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ev_entity+)
        /// </para>
        /// </summary>
        public partial class ev_entitiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ev_entityLocalType> ev_entityField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ev_entitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ev_entitiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ev_entitiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ev_entity", "EVMessage.StatusReport.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ev_entity+)
            /// </para>
            /// </summary>
            public ev_entitiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about the ev message entity
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ev_entity+)
            /// </para>
            /// </summary>
            public IList<EVMessage.StatusReport.Schema.messageacknowledgment.ev_entitiesLocalType.ev_entityLocalType> ev_entity
            {
                get
                {
                    if ((this.ev_entityField == null))
                    {
                        this.ev_entityField = new XTypedList<ev_entityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ev_entity", "EVMessage.StatusReport.Schema"));
                    }
                    return this.ev_entityField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.ev_entityField = null;
                    }
                    else
                    {
                        if ((this.ev_entityField == null))
                        {
                            this.ev_entityField = XTypedList<ev_entityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ev_entity", "EVMessage.StatusReport.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<ev_entityLocalType>(this.ev_entityField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ev_entities", "EVMessage.StatusReport.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ev_entitiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ev_entity", "EVMessage.StatusReport.Schema"), typeof(ev_entityLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
            /// </para>
            /// </summary>
            public partial class ev_entityLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ev_entityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ev_entityLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ev_entityLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("entitytype", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("localnumber", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("ev_code", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("operationtype", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("operationresult", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("operationresultdesc", "EVMessage.StatusReport.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public ev_entityLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field says the ev message entity type
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public string entitytype
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("entitytype", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("entitytype", "EVMessage.StatusReport.Schema"), value, "entitytype", entitytypeLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field is the number assigned by the sender to identify report in the position of XML file. May be Null for no Inserts, and it's mandatory for Inserts.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public string localnumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("localnumber", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("localnumber", "EVMessage.StatusReport.Schema"), value, "localnumber", localnumberLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field is the number assigned by the EVMPD in case of an INSERT or by the sender, in all other cases, to identify the report in the EVMPD. May be Null for the insucessfull Inserts (see operationresult)
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public string ev_code
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ev_code", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("ev_code", "EVMessage.StatusReport.Schema"), value, "ev_code", ev_codeLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field says which operation type wanted to do in each section (1=Insert, 2=Update, 3=Variation, 4=Nullify, 5=Change Ownership, 6=Withdrawn).
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public decimal operationtype
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("operationtype", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("operationtype", "EVMessage.StatusReport.Schema"), value, "operationtype", operationtypeLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field says the operation result of a particular section
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public decimal operationresult
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("operationresult", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("operationresult", "EVMessage.StatusReport.Schema"), value, "operationresult", operationresultLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field says the description operation result of a particular section
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (entitytype, localnumber?, ev_code?, operationtype, operationresult, operationresultdesc)
                /// </para>
                /// </summary>
                public string operationresultdesc
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("operationresultdesc", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("operationresultdesc", "EVMessage.StatusReport.Schema"), value, "operationresultdesc", operationresultdescLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ev_entity", "EVMessage.StatusReport.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ev_entityLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("entitytype", "EVMessage.StatusReport.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("localnumber", "EVMessage.StatusReport.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("ev_code", "EVMessage.StatusReport.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("operationtype", "EVMessage.StatusReport.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("operationresult", "EVMessage.StatusReport.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("operationresultdesc", "EVMessage.StatusReport.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class entitytypeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                    "ATTACHMENT",
                                    "AUTHORISEDPRODUCT"}, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private entitytypeLocalType()
                    {
                    }
                }

                private class localnumberLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private localnumberLocalType()
                    {
                    }
                }

                private class ev_codeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private ev_codeLocalType()
                    {
                    }
                }

                private class operationtypeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 8m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private operationtypeLocalType()
                    {
                    }
                }

                private class operationresultLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(128)), null, 0, 0, 101m, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private operationresultLocalType()
                    {
                    }
                }

                private class operationresultdescLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);

                    private operationresultdescLocalType()
                    {
                    }
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
    /// </para>
    /// </summary>
    public partial class reportacknowledgment : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportacknowledgment(XElement xe) { return XTypedServices.ToXTypedElement<reportacknowledgment>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportacknowledgment()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportname", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reporttype", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportstatuscode", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportstatusmessage", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("reportcomments", "EVMessage.StatusReport.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public reportacknowledgment()
        {
        }

        /// <summary>
        /// <para>
        /// Report Name
        /// </para>
        /// <para>
        /// 
        ///							The report name is a unique tracking name assigned to a specific
        ///							marketing authorisation message file transmitted by the sender.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public string reportname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportname", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportname", "EVMessage.StatusReport.Schema"), value, "reportname", reportnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///							The report type contains information on the type of information being
        ///							transmitted. 01 = Message status 02 = Errors
        ///						
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public string reporttype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reporttype", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reporttype", "EVMessage.StatusReport.Schema"), value, "reporttype", reporttypeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 01 = MA received 02 = MA received errors 03 = MA validation successful 04 = MA validation failed 05 = MA sent to EMA 06 = ACK received from EMA
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public string reportstatuscode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportstatuscode", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportstatuscode", "EVMessage.StatusReport.Schema"), value, "reportstatuscode", reportstatuscodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field contains a detailed explanation of the report status
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public string reportstatusmessage
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportstatusmessage", "EVMessage.StatusReport.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reportstatusmessage", "EVMessage.StatusReport.Schema"), value, "reportstatusmessage", reportstatusmessageLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The section reportcomments contains the list of detected errors and warnings
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reportname, reporttype, reportstatuscode, reportstatusmessage, reportcomments?)
        /// </para>
        /// </summary>
        public reportcommentsLocalType reportcomments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reportcomments", "EVMessage.StatusReport.Schema"));
                return ((reportcommentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reportcomments", "EVMessage.StatusReport.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportacknowledgment Load(string xmlFile)
        {
            return XTypedServices.Load<reportacknowledgment>(xmlFile);
        }

        public static reportacknowledgment Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportacknowledgment>(xmlFile);
        }

        public static reportacknowledgment Parse(string xml)
        {
            return XTypedServices.Parse<reportacknowledgment>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportacknowledgment>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("reportname", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reporttype", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportstatuscode", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportstatusmessage", "EVMessage.StatusReport.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("reportcomments", "EVMessage.StatusReport.Schema"), typeof(reportcommentsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class reportnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportnameLocalType()
            {
            }
        }

        private class reporttypeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "01",
                            "02"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reporttypeLocalType()
            {
            }
        }

        private class reportstatuscodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "01",
                            "02",
                            "03",
                            "04",
                            "05",
                            "06"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private reportstatuscodeLocalType()
            {
            }
        }

        private class reportstatusmessageLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);

            private reportstatusmessageLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportcomment+)
        /// </para>
        /// </summary>
        public partial class reportcommentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportcommentLocalType> reportcommentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator reportcommentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<reportcommentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static reportcommentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportcomment", "EVMessage.StatusReport.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (reportcomment+)
            /// </para>
            /// </summary>
            public reportcommentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Report comment element will be added for each warning or error
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportcomment+)
            /// </para>
            /// </summary>
            public IList<EVMessage.StatusReport.Schema.reportacknowledgment.reportcommentsLocalType.reportcommentLocalType> reportcomment
            {
                get
                {
                    if ((this.reportcommentField == null))
                    {
                        this.reportcommentField = new XTypedList<reportcommentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportcomment", "EVMessage.StatusReport.Schema"));
                    }
                    return this.reportcommentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.reportcommentField = null;
                    }
                    else
                    {
                        if ((this.reportcommentField == null))
                        {
                            this.reportcommentField = XTypedList<reportcommentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportcomment", "EVMessage.StatusReport.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<reportcommentLocalType>(this.reportcommentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reportcomments", "EVMessage.StatusReport.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<reportcommentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reportcomment", "EVMessage.StatusReport.Schema"), typeof(reportcommentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (severity, commenttext)
            /// </para>
            /// </summary>
            public partial class reportcommentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator reportcommentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<reportcommentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static reportcommentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("severity", "EVMessage.StatusReport.Schema")), new NamedContentModelEntity(XName.Get("commenttext", "EVMessage.StatusReport.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (severity, commenttext)
                /// </para>
                /// </summary>
                public reportcommentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The severity flag describes if the report comment is an 1 = error, 2 = warning or 3 = message
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (severity, commenttext)
                /// </para>
                /// </summary>
                public int severity
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("severity", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("severity", "EVMessage.StatusReport.Schema"), value, "severity", severityLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field contains a detailed explanation of the error, warning or message
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (severity, commenttext)
                /// </para>
                /// </summary>
                public string commenttext
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("commenttext", "EVMessage.StatusReport.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("commenttext", "EVMessage.StatusReport.Schema"), value, "commenttext", commenttextLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("reportcomment", "EVMessage.StatusReport.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<reportcommentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("severity", "EVMessage.StatusReport.Schema"), typeof(int));
                    localElementDictionary.Add(XName.Get("commenttext", "EVMessage.StatusReport.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class severityLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1,
                                    2,
                                    3}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private severityLocalType()
                    {
                    }
                }

                private class commenttextLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);

                    private commenttextLocalType()
                    {
                    }
                }
            }
        }
    }

    public partial class optional1 : XTypedElement, IXMetaData
    {

        public static explicit operator optional1(XElement xe) { return XTypedServices.ToXTypedElement<optional1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional1()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional11LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional1", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional1 Load(string xmlFile)
        {
            return XTypedServices.Load<optional1>(xmlFile);
        }

        public static optional1 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional1>(xmlFile);
        }

        public static optional1 Parse(string xml)
        {
            return XTypedServices.Parse<optional1>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional1>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional11LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional11LocalType()
            {
            }
        }
    }

    public partial class optional2 : XTypedElement, IXMetaData
    {

        public static explicit operator optional2(XElement xe) { return XTypedServices.ToXTypedElement<optional2>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional2()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional21LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional2", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional2 Load(string xmlFile)
        {
            return XTypedServices.Load<optional2>(xmlFile);
        }

        public static optional2 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional2>(xmlFile);
        }

        public static optional2 Parse(string xml)
        {
            return XTypedServices.Parse<optional2>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional2>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional21LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional21LocalType()
            {
            }
        }
    }

    public partial class optional3 : XTypedElement, IXMetaData
    {

        public static explicit operator optional3(XElement xe) { return XTypedServices.ToXTypedElement<optional3>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional3()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional31LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional3", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional3 Load(string xmlFile)
        {
            return XTypedServices.Load<optional3>(xmlFile);
        }

        public static optional3 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional3>(xmlFile);
        }

        public static optional3 Parse(string xml)
        {
            return XTypedServices.Parse<optional3>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional3>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional31LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional31LocalType()
            {
            }
        }
    }

    public partial class optional4 : XTypedElement, IXMetaData
    {

        public static explicit operator optional4(XElement xe) { return XTypedServices.ToXTypedElement<optional4>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional4()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional41LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional4", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional4 Load(string xmlFile)
        {
            return XTypedServices.Load<optional4>(xmlFile);
        }

        public static optional4 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional4>(xmlFile);
        }

        public static optional4 Parse(string xml)
        {
            return XTypedServices.Parse<optional4>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional4>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional41LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional41LocalType()
            {
            }
        }
    }

    public partial class optional5 : XTypedElement, IXMetaData
    {

        public static explicit operator optional5(XElement xe) { return XTypedServices.ToXTypedElement<optional5>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional5()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional51LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional5", "EVMessage.StatusReport.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional5 Load(string xmlFile)
        {
            return XTypedServices.Load<optional5>(xmlFile);
        }

        public static optional5 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional5>(xmlFile);
        }

        public static optional5 Parse(string xml)
        {
            return XTypedServices.Parse<optional5>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional5>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional51LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional51LocalType()
            {
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("statusreport", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.statusreport));
            elementDictionary.Add(XName.Get("reportheader", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.reportheader));
            elementDictionary.Add(XName.Get("report", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.report));
            elementDictionary.Add(XName.Get("messageacknowledgment", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.messageacknowledgment));
            elementDictionary.Add(XName.Get("reportacknowledgment", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.reportacknowledgment));
            elementDictionary.Add(XName.Get("optional1", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.optional1));
            elementDictionary.Add(XName.Get("optional2", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.optional2));
            elementDictionary.Add(XName.Get("optional3", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.optional3));
            elementDictionary.Add(XName.Get("optional4", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.optional4));
            elementDictionary.Add(XName.Get("optional5", "EVMessage.StatusReport.Schema"), typeof(global::EVMessage.StatusReport.Schema.optional5));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("statusreport", "EVMessage.StatusReport.Schema")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public statusreport statusreport { get { return rootObject as statusreport; } }

        public reportheader reportheader { get { return rootObject as reportheader; } }

        public report report { get { return rootObject as report; } }

        public messageacknowledgment messageacknowledgment { get { return rootObject as messageacknowledgment; } }

        public reportacknowledgment reportacknowledgment { get { return rootObject as reportacknowledgment; } }

        public optional1 optional1 { get { return rootObject as optional1; } }

        public optional2 optional2 { get { return rootObject as optional2; } }

        public optional3 optional3 { get { return rootObject as optional3; } }

        public optional4 optional4 { get { return rootObject as optional4; } }

        public optional5 optional5 { get { return rootObject as optional5; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(statusreport root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportheader root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(report root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(messageacknowledgment root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportacknowledgment root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional3 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional4 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public global::EVMessage.StatusReport.Schema.statusreport statusreport { get { return rootObject as global::EVMessage.StatusReport.Schema.statusreport; } }

        public global::EVMessage.StatusReport.Schema.reportheader reportheader { get { return rootObject as global::EVMessage.StatusReport.Schema.reportheader; } }

        public global::EVMessage.StatusReport.Schema.report report { get { return rootObject as global::EVMessage.StatusReport.Schema.report; } }

        public global::EVMessage.StatusReport.Schema.messageacknowledgment messageacknowledgment { get { return rootObject as global::EVMessage.StatusReport.Schema.messageacknowledgment; } }

        public global::EVMessage.StatusReport.Schema.reportacknowledgment reportacknowledgment { get { return rootObject as global::EVMessage.StatusReport.Schema.reportacknowledgment; } }

        public global::EVMessage.StatusReport.Schema.optional1 optional1 { get { return rootObject as global::EVMessage.StatusReport.Schema.optional1; } }

        public global::EVMessage.StatusReport.Schema.optional2 optional2 { get { return rootObject as global::EVMessage.StatusReport.Schema.optional2; } }

        public global::EVMessage.StatusReport.Schema.optional3 optional3 { get { return rootObject as global::EVMessage.StatusReport.Schema.optional3; } }

        public global::EVMessage.StatusReport.Schema.optional4 optional4 { get { return rootObject as global::EVMessage.StatusReport.Schema.optional4; } }

        public global::EVMessage.StatusReport.Schema.optional5 optional5 { get { return rootObject as global::EVMessage.StatusReport.Schema.optional5; } }

        private XRoot()
        {
        }

        public XRoot(global::EVMessage.StatusReport.Schema.statusreport root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.reportheader root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.report root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.messageacknowledgment root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.reportacknowledgment root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.optional1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.optional2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.optional3 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.optional4 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.StatusReport.Schema.optional5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}
