//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EVMessage.MarketingAuthorisation.Schema
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;


    /// <summary>
    /// <para>
    /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
    /// </para>
    /// </summary>
    public partial class marketingauthorisation : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator marketingauthorisation(XElement xe) { return XTypedServices.ToXTypedElement<marketingauthorisation>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static marketingauthorisation()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("messageheader", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("attachments", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisedproducts", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public marketingauthorisation()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///							Contains message identifiers generated by Sandoz.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public messageheaderType messageheader
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageheader", "EVMessage.MarketingAuthorisation.Schema"));
                return ((messageheaderType)(x));
            }
            set
            {
                this.SetElement(XName.Get("messageheader", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///							Contains the new attachments required by the EVPRM
        ///							Business Rules: M.ATTs.BR.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public attachmentsLocalType attachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachments", "EVMessage.MarketingAuthorisation.Schema"));
                return ((attachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("attachments", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///							The Authorised products section contains all the information regarding Authorised Medicinal Products.
        ///							Business Rules: M.AP.BR.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public authorisedproductsLocalType authorisedproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("authorisedproducts", "EVMessage.MarketingAuthorisation.Schema"));
                return ((authorisedproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("authorisedproducts", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional1 optional1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema"));
                return ((optional1)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional2 optional2
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema"));
                return ((optional2)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional3 optional3
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema"));
                return ((optional3)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional4 optional4
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema"));
                return ((optional4)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageheader, attachments?, authorisedproducts?, optional1?, optional2?, optional3?, optional4?, optional5?)
        /// </para>
        /// </summary>
        public optional5 optional5
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema"));
                return ((optional5)(x));
            }
            set
            {
                this.SetElement(XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("marketingauthorisation", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static marketingauthorisation Load(string xmlFile)
        {
            return XTypedServices.Load<marketingauthorisation>(xmlFile);
        }

        public static marketingauthorisation Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<marketingauthorisation>(xmlFile);
        }

        public static marketingauthorisation Parse(string xml)
        {
            return XTypedServices.Parse<marketingauthorisation>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<marketingauthorisation>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("messageheader", "EVMessage.MarketingAuthorisation.Schema"), typeof(messageheaderType));
            localElementDictionary.Add(XName.Get("attachments", "EVMessage.MarketingAuthorisation.Schema"), typeof(attachmentsLocalType));
            localElementDictionary.Add(XName.Get("authorisedproducts", "EVMessage.MarketingAuthorisation.Schema"), typeof(authorisedproductsLocalType));
            localElementDictionary.Add(XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema"), typeof(optional1));
            localElementDictionary.Add(XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema"), typeof(optional2));
            localElementDictionary.Add(XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema"), typeof(optional3));
            localElementDictionary.Add(XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema"), typeof(optional4));
            localElementDictionary.Add(XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema"), typeof(optional5));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (attachment+)
        /// </para>
        /// </summary>
        public partial class attachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<attachmentType> attachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator attachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static attachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachment", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachment+)
            /// </para>
            /// </summary>
            public attachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The document bundled in support of the product message being sent
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (attachment+)
            /// </para>
            /// </summary>
            public IList<attachmentType> attachment
            {
                get
                {
                    if ((this.attachmentField == null))
                    {
                        this.attachmentField = new XTypedList<attachmentType>(this, LinqToXsdTypeManager.Instance, XName.Get("attachment", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.attachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.attachmentField = null;
                    }
                    else
                    {
                        if ((this.attachmentField == null))
                        {
                            this.attachmentField = XTypedList<attachmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("attachment", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<attachmentType>(this.attachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("attachments", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<attachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("attachment", "EVMessage.MarketingAuthorisation.Schema"), typeof(attachmentType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (authorisedproduct+)
        /// </para>
        /// </summary>
        public partial class authorisedproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<authorisedproductType> authorisedproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator authorisedproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authorisedproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static authorisedproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authorisedproduct", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (authorisedproduct+)
            /// </para>
            /// </summary>
            public authorisedproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The Authorised product section contains all the information regarding a single Authorised Medicinal Product that is either marketed in one country or throughout the EU following the approval via Central Authorisation Procedures.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (authorisedproduct+)
            /// </para>
            /// </summary>
            public IList<authorisedproductType> authorisedproduct
            {
                get
                {
                    if ((this.authorisedproductField == null))
                    {
                        this.authorisedproductField = new XTypedList<authorisedproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("authorisedproduct", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.authorisedproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.authorisedproductField = null;
                    }
                    else
                    {
                        if ((this.authorisedproductField == null))
                        {
                            this.authorisedproductField = XTypedList<authorisedproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("authorisedproduct", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<authorisedproductType>(this.authorisedproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("authorisedproducts", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<authorisedproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("authorisedproduct", "EVMessage.MarketingAuthorisation.Schema"), typeof(authorisedproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    public partial class optional1 : XTypedElement, IXMetaData
    {

        public static explicit operator optional1(XElement xe) { return XTypedServices.ToXTypedElement<optional1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional1()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional11LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional1 Load(string xmlFile)
        {
            return XTypedServices.Load<optional1>(xmlFile);
        }

        public static optional1 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional1>(xmlFile);
        }

        public static optional1 Parse(string xml)
        {
            return XTypedServices.Parse<optional1>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional1>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional11LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional11LocalType()
            {
            }
        }
    }

    public partial class optional2 : XTypedElement, IXMetaData
    {

        public static explicit operator optional2(XElement xe) { return XTypedServices.ToXTypedElement<optional2>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional2()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional21LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional2 Load(string xmlFile)
        {
            return XTypedServices.Load<optional2>(xmlFile);
        }

        public static optional2 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional2>(xmlFile);
        }

        public static optional2 Parse(string xml)
        {
            return XTypedServices.Parse<optional2>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional2>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional21LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional21LocalType()
            {
            }
        }
    }

    public partial class optional3 : XTypedElement, IXMetaData
    {

        public static explicit operator optional3(XElement xe) { return XTypedServices.ToXTypedElement<optional3>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional3()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional31LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional3 Load(string xmlFile)
        {
            return XTypedServices.Load<optional3>(xmlFile);
        }

        public static optional3 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional3>(xmlFile);
        }

        public static optional3 Parse(string xml)
        {
            return XTypedServices.Parse<optional3>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional3>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional31LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional31LocalType()
            {
            }
        }
    }

    public partial class optional4 : XTypedElement, IXMetaData
    {

        public static explicit operator optional4(XElement xe) { return XTypedServices.ToXTypedElement<optional4>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional4()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional41LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional4 Load(string xmlFile)
        {
            return XTypedServices.Load<optional4>(xmlFile);
        }

        public static optional4 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional4>(xmlFile);
        }

        public static optional4 Parse(string xml)
        {
            return XTypedServices.Parse<optional4>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional4>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional41LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional41LocalType()
            {
            }
        }
    }

    public partial class optional5 : XTypedElement, IXMetaData
    {

        public static explicit operator optional5(XElement xe) { return XTypedServices.ToXTypedElement<optional5>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        public optional5()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", optional51LocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static optional5 Load(string xmlFile)
        {
            return XTypedServices.Load<optional5>(xmlFile);
        }

        public static optional5 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<optional5>(xmlFile);
        }

        public static optional5 Parse(string xml)
        {
            return XTypedServices.Parse<optional5>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<optional5>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        private class optional51LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private optional51LocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
    /// </para>
    /// </summary>
    public partial class messageheaderType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator messageheaderType(XElement xe) { return XTypedServices.ToXTypedElement<messageheaderType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static messageheaderType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("messageformatversion", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("messageformatrelease", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("registrationnumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("registrationid", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("readymessageid", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("messagedateformat", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("messagedate", "EVMessage.MarketingAuthorisation.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public messageheaderType()
        {
        }

        /// <summary>
        /// <para>
        /// Message Format Version
        /// </para>
        /// <para>
        /// The message format version contains the version number of the SCHEMA.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messageformatversion
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageformatversion", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messageformatversion", "EVMessage.MarketingAuthorisation.Schema"), value, "messageformatversion", messageformatversionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Format Release
        /// </para>
        /// <para>
        /// 
        ///						The message format release contains the release number of the message
        ///						format version number of the SCHEMA.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messageformatrelease
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageformatrelease", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messageformatrelease", "EVMessage.MarketingAuthorisation.Schema"), value, "messageformatrelease", messageformatreleaseLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The Sandoz registration number must be specified for every message.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string registrationnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("registrationnumber", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("registrationnumber", "EVMessage.MarketingAuthorisation.Schema"), value, "registrationnumber", registrationnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The Sandoz registration id must be specified for every message.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public decimal registrationid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("registrationid", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("registrationid", "EVMessage.MarketingAuthorisation.Schema"), value, "registrationid", registrationidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						Ready message id, used to identify message in Ready! system.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string readymessageid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("readymessageid", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("readymessageid", "EVMessage.MarketingAuthorisation.Schema"), value, "readymessageid", readymessageidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Message Date Format
        /// </para>
        /// <para>
        /// The unique value admitted is "204" corresponding at "CCYYMMDDHHMMSS"
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagedateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedateformat", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedateformat", "EVMessage.MarketingAuthorisation.Schema"), value, "messagedateformat", messagedateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Date
        /// </para>
        /// <para>
        /// The message date is the date on which the report was initiated.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messageformatversion, messageformatrelease, registrationnumber, registrationid, readymessageid?, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedate", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedate", "EVMessage.MarketingAuthorisation.Schema"), value, "messagedate", messagedateLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("messageheaderType", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<messageheaderType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("messageformatversion", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("messageformatrelease", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("registrationnumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("registrationid", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
            localElementDictionary.Add(XName.Get("readymessageid", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("messagedateformat", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("messagedate", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class messageformatversionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messageformatversionLocalType()
            {
            }
        }

        private class messageformatreleaseLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messageformatreleaseLocalType()
            {
            }
        }

        private class registrationnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 30, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private registrationnumberLocalType()
            {
            }
        }

        private class registrationidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1312)), null, 0, 0, null, null, 0, null, 0m, 0, null, 10, XmlSchemaWhiteSpace.Collapse));

            private registrationidLocalType()
            {
            }
        }

        private class readymessageidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private readymessageidLocalType()
            {
            }
        }

        private class messagedateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "204"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagedateformatLocalType()
            {
            }
        }

        private class messagedateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 14, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagedateLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
    /// </para>
    /// </summary>
    public partial class attachmentType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator attachmentType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static attachmentType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("filename", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("filetype", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("attachmentname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("attachmenttype", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("languagecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("attachmentversion", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("attachmentversiondate", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("versiondateformat", "EVMessage.MarketingAuthorisation.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public attachmentType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///						The unique reference for the entity in the message.
        ///						Business Rules: ATT.1.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The file name of the attachment with file extension
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string filename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("filename", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("filename", "EVMessage.MarketingAuthorisation.Schema"), value, "filename", filenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The file type of the attachment.
        ///						Allowed values are as contained within the restriction allowedfiletypes
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public int filetype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("filetype", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("filetype", "EVMessage.MarketingAuthorisation.Schema"), value, "filetype", filetypeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The name of the attachment given by the sender
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentname", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentname", "EVMessage.MarketingAuthorisation.Schema"), value, "attachmentname", attachmentnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						Type of attachment:
        ///						Printed Product Information (PPI) = 1
        ///						Printed Substance Information (PSI) = 2
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public int attachmenttype1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmenttype", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmenttype", "EVMessage.MarketingAuthorisation.Schema"), value, "attachmenttype1", attachmenttype1LocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The code of the language as reported in the LANGUAGE published list
        ///						Business Rules: ATT.6.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string languagecode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("languagecode", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("languagecode", "EVMessage.MarketingAuthorisation.Schema"), value, "languagecode", languagecodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The version of the PPI attachement
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentversion
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentversion", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentversion", "EVMessage.MarketingAuthorisation.Schema"), value, "attachmentversion", attachmentversionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The date of the last update of the PPI document
        ///						Business Rules: ATT.8.BR
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentversiondate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentversiondate", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentversiondate", "EVMessage.MarketingAuthorisation.Schema"), value, "attachmentversiondate", attachmentversiondateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Format of the Version Date. Only accepted value is "102" for "CCYYMMDD"
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string versiondateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondateformat", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondateformat", "EVMessage.MarketingAuthorisation.Schema"), value, "versiondateformat", versiondateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///					The type of the operation for this entity. The only value accepted is 1 = Insert
        ///					Business Rules: ATT..1.BR.
        ///				
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("attachmentType", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<attachmentType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("filename", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("filetype", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
            localElementDictionary.Add(XName.Get("attachmentname", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmenttype", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
            localElementDictionary.Add(XName.Get("languagecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmentversion", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmentversiondate", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondateformat", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private localnumberLocalType()
            {
            }
        }

        private class filenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private filenameLocalType()
            {
            }
        }

        private class filetypeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2,
                            3,
                            4,
                            5}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private filetypeLocalType()
            {
            }
        }

        private class attachmentnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentnameLocalType()
            {
            }
        }

        private class attachmenttype1LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmenttype1LocalType()
            {
            }
        }

        private class languagecodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private languagecodeLocalType()
            {
            }
        }

        private class attachmentversionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 5, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentversionLocalType()
            {
            }
        }

        private class attachmentversiondateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(41)), null, 0, 8, null, null, 0, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentversiondateLocalType()
            {
            }
        }

        private class versiondateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "102"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateformatLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
    /// </para>
    /// </summary>
    public partial class authorisedproductType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator authorisedproductType(XElement xe) { return XTypedServices.ToXTypedElement<authorisedproductType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static authorisedproductType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("ev_code", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("newownerid", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("mahcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("qppvcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("mflcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("enquiryemail", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("enquiryphone", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("senderlocalcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("infodateformat", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("infodate", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisation", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("presentationname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productatcs", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productindications", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("pharmaceuticalproducts", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("previousevcodes", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("ppiattachments", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("comments", "EVMessage.MarketingAuthorisation.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public authorisedproductType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///						The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///						Business Rules: AP.1.BR
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						EV_Code of the Authorised Medicinal Product. It's mandatory if the operation type is NOT an insert.
        ///						Business Rules: AP.2.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "EVMessage.MarketingAuthorisation.Schema"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This field identifies the new Owner of the Authorised Product. The field is reserved for EMA use only
        ///						Business Rules: AP.3.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "EVMessage.MarketingAuthorisation.Schema"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The MAH code of the Marketing Authorisation Holder as reported in the application of the product. This element must have an attribute: Resolution Mode.
        ///						Business Rules: AP.4.BR
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public mahcodeLocalType mahcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mahcode", "EVMessage.MarketingAuthorisation.Schema"));
                return ((mahcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mahcode", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The EV Registration System QPPV code assigned to the QPPV detailed in the Pharmacovigilance System Master File in place for the product. Format of this code is USRnnnn
        ///						Business Rules: AP.5.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public qppvcodeLocalType qppvcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("qppvcode", "EVMessage.MarketingAuthorisation.Schema"));
                return ((qppvcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("qppvcode", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The code of the PharmacoVigilance System Master File Location.  Must have an attribute; resolutionmode.
        ///						Business Rules: AP.6.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public mflcodeLocalType mflcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflcode", "EVMessage.MarketingAuthorisation.Schema"));
                return ((mflcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mflcode", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The Pharmacovigilance Enquiry email address shall be specified.
        ///						Business Rules: AP.7.BR
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string enquiryemail
        {
            get
            {
                XElement x = this.GetElement(XName.Get("enquiryemail", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("enquiryemail", "EVMessage.MarketingAuthorisation.Schema"), value, "enquiryemail", enquiryemailLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The Pharmacovigilance Enquiry telephone number shall be specified.
        ///						Business Rules: AP.8.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string enquiryphone
        {
            get
            {
                XElement x = this.GetElement(XName.Get("enquiryphone", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("enquiryphone", "EVMessage.MarketingAuthorisation.Schema"), value, "enquiryphone", enquiryphoneLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Sender Local Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string senderlocalcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("senderlocalcode", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("senderlocalcode", "EVMessage.MarketingAuthorisation.Schema"), value, "senderlocalcode", senderlocalcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						The format of the Info Date. The only value accepted is "102" corresponding to "CCYYMMDD"
        ///						Business Rules: AP.10.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string infodateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infodateformat", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infodateformat", "EVMessage.MarketingAuthorisation.Schema"), value, "infodateformat", infodateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						Date of the most recent update to the Summary Product Characteristics (SPC). The format must conform to "CCYYMMDD"
        ///						Business Rules: AP.11.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string infodate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infodate", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infodate", "EVMessage.MarketingAuthorisation.Schema"), value, "infodate", infodateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains all the information on the product authorisation.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public authorisationLocalType authorisation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("authorisation", "EVMessage.MarketingAuthorisation.Schema"));
                return ((authorisationLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("authorisation", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains all the information on the product presentation.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public presentationnameLocalType presentationname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("presentationname", "EVMessage.MarketingAuthorisation.Schema"));
                return ((presentationnameLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("presentationname", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information on the ATC code(s) approved for the product.
        ///						Business Rules: AT.ATCs.BR
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productatcsLocalType productatcs
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productatcs", "EVMessage.MarketingAuthorisation.Schema"));
                return ((productatcsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productatcs", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information about all of the indications of a Medicinal Product, according to different MEDDRA's versions.
        ///						Business Rules: AP.INDs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productindicationsLocalType productindications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productindications", "EVMessage.MarketingAuthorisation.Schema"));
                return ((productindicationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productindications", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public pharmaceuticalproductsLocalType pharmaceuticalproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("pharmaceuticalproducts", "EVMessage.MarketingAuthorisation.Schema"));
                return ((pharmaceuticalproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("pharmaceuticalproducts", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section is used to reference all development products that are the same as the approved product.
        ///						Business Rules: AP.PEVs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public previousevcodesLocalType previousevcodes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("previousevcodes", "EVMessage.MarketingAuthorisation.Schema"));
                return ((previousevcodesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("previousevcodes", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						Container for the Printed Product Information documents for the product.
        ///						Business Rules: AP.PPIs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public ppiattachmentsLocalType ppiattachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ppiattachments", "EVMessage.MarketingAuthorisation.Schema"));
                return ((ppiattachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("ppiattachments", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This element can be used to put some comments in a section.
        ///						Business Rules: AP.14.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "EVMessage.MarketingAuthorisation.Schema"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "EVMessage.MarketingAuthorisation.Schema"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///					The type of the operation for this entity.
        ///					1 = Insert 2 = Update 3 = Variation 4 = Nullify 5 = Change Ownership (EMA USE ONLY)  6 = Withdrawn
        ///					Business Rules: AP..1.BR
        ///				
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("authorisedproductType", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<authorisedproductType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("mahcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(mahcodeLocalType));
            localElementDictionary.Add(XName.Get("qppvcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(qppvcodeLocalType));
            localElementDictionary.Add(XName.Get("mflcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(mflcodeLocalType));
            localElementDictionary.Add(XName.Get("enquiryemail", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("enquiryphone", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("senderlocalcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("infodateformat", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("infodate", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            localElementDictionary.Add(XName.Get("authorisation", "EVMessage.MarketingAuthorisation.Schema"), typeof(authorisationLocalType));
            localElementDictionary.Add(XName.Get("presentationname", "EVMessage.MarketingAuthorisation.Schema"), typeof(presentationnameLocalType));
            localElementDictionary.Add(XName.Get("productatcs", "EVMessage.MarketingAuthorisation.Schema"), typeof(productatcsLocalType));
            localElementDictionary.Add(XName.Get("productindications", "EVMessage.MarketingAuthorisation.Schema"), typeof(productindicationsLocalType));
            localElementDictionary.Add(XName.Get("pharmaceuticalproducts", "EVMessage.MarketingAuthorisation.Schema"), typeof(pharmaceuticalproductsLocalType));
            localElementDictionary.Add(XName.Get("previousevcodes", "EVMessage.MarketingAuthorisation.Schema"), typeof(previousevcodesLocalType));
            localElementDictionary.Add(XName.Get("ppiattachments", "EVMessage.MarketingAuthorisation.Schema"), typeof(ppiattachmentsLocalType));
            localElementDictionary.Add(XName.Get("comments", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        public partial class mahcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator mahcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mahcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public mahcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///										Resolution mode = 1 Local (Local Number present in the XML file).
            ///										Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
            ///									
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("mahcode", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<mahcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class qppvcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator qppvcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<qppvcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public qppvcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("qppvcode", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<qppvcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class mflcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator mflcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mflcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public mflcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///										Resolution mode = 1 Local (Local Number present in the XML file).
            ///										Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables) - The format of stored master files location codes is MFLxxxxxx.
            ///									
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("mflcode", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<mflcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        private class enquiryemailLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private enquiryemailLocalType()
            {
            }
        }

        private class enquiryphoneLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private enquiryphoneLocalType()
            {
            }
        }

        private class senderlocalcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private senderlocalcodeLocalType()
            {
            }
        }

        private class infodateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "102"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infodateformatLocalType()
            {
            }
        }

        private class infodateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

            private infodateLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
        /// </para>
        /// </summary>
        public partial class authorisationLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator authorisationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authorisationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static authorisationLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authorisationcountrycode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisationprocedure", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisationstatus", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisationnumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisationdate", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("authorisationdateformat", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("mrpnumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("eunumber", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("orphandrug", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("intensivemonitoring", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("withdrawndateformat", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("withdrawndate", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public authorisationLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///									Country code of the country in which the product has been authorised
            ///									Business Rules: AP.12.1.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationcountrycode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationcountrycode", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationcountrycode", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationcountrycode", authorisationcountrycodeLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The procedure the product has followed to be authorised. Must be the code specified in the published list
            ///									Business Rules: AP.12.2.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public int authorisationprocedure
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationprocedure", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationprocedure", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationprocedure", authorisationprocedureLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Marketing authorisation status must be a value from the published list
            ///									Business Rules: AP.12.3.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> authorisationstatus
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationstatus", "EVMessage.MarketingAuthorisation.Schema"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationstatus", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationstatus", authorisationstatusLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Marketing authorisation number
            ///									Business Rules: AP.12.4.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationnumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationnumber", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationnumber", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationnumber", authorisationnumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Marketing authorisation Date
            ///									Business Rules: AP.12.5.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationdate", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationdate", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationdate", authorisationdateLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Marketing authorisation Date Format must be either "102" corresponding to "CCYYMMDD" or "610" corresponding to "CCYYMM"
            ///									Business Rules: AP.12.6.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationdateformat
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationdateformat", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationdateformat", "EVMessage.MarketingAuthorisation.Schema"), value, "authorisationdateformat", authorisationdateformatLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									If the authorisation procedure is "EU mutual recognition procedure" this field must be filled with the Mutual Recognition Procedure Number of the product.
            ///									If the authorisation procedure is "EU decentralised procedure" this field must be filled with the EU Decentralised procedure number of the product.
            ///									Business Rules: AP.12.7.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string mrpnumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("mrpnumber", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("mrpnumber", "EVMessage.MarketingAuthorisation.Schema"), value, "mrpnumber", mrpnumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									If the authorisation procedure is one of the EU centralised procedures (CAPs) this field must be filled with the "EU Number of the product"
            ///									Business Rules: AP.12.8.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string eunumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("eunumber", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("eunumber", "EVMessage.MarketingAuthorisation.Schema"), value, "eunumber", eunumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Value 1 indicates that the product is an orphan drug.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> orphandrug
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("orphandrug", "EVMessage.MarketingAuthorisation.Schema"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("orphandrug", "EVMessage.MarketingAuthorisation.Schema"), value, "orphandrug", orphandrugLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Indicates if the product is the subject of Intensive Monitoring.
            ///									A value of 1 indicates that the product is subject to intensive monitoring.
            ///									A value of 2 indicates that the product is NOT subject to intensive monitoring.
            ///									Business Rules: AP.12.10.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> intensivemonitoring
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("intensivemonitoring", "EVMessage.MarketingAuthorisation.Schema"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("intensivemonitoring", "EVMessage.MarketingAuthorisation.Schema"), value, "intensivemonitoring", intensivemonitoringLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The format of the WithdrawnDate.
            ///									The only value accepted is "102" corresponding at "CCYYMMDD"
            ///									Business Rules: AP.12.12.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string withdrawndateformat
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("withdrawndateformat", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("withdrawndateformat", "EVMessage.MarketingAuthorisation.Schema"), value, "withdrawndateformat", withdrawndateformatLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									Date from which the Medicinal Product is withdrawn.
            ///									Business Rules: AP.12.12.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string withdrawndate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("withdrawndate", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("withdrawndate", "EVMessage.MarketingAuthorisation.Schema"), value, "withdrawndate", withdrawndateLocalType.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("authorisation", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<authorisationLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("authorisationcountrycode", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationprocedure", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                localElementDictionary.Add(XName.Get("authorisationstatus", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                localElementDictionary.Add(XName.Get("authorisationnumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationdate", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationdateformat", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("mrpnumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("eunumber", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("orphandrug", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                localElementDictionary.Add(XName.Get("intensivemonitoring", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                localElementDictionary.Add(XName.Get("withdrawndateformat", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("withdrawndate", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class authorisationcountrycodeLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                private authorisationcountrycodeLocalType()
                {
                }
            }

            private class authorisationprocedureLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null);

                private authorisationprocedureLocalType()
                {
                }
            }

            private class authorisationstatusLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));

                private authorisationstatusLocalType()
                {
                }
            }

            private class authorisationnumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationnumberLocalType()
                {
                }
            }

            private class authorisationdateLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                                "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationdateLocalType()
                {
                }
            }

            private class authorisationdateformatLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                "102",
                                "610",
                                ""}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationdateformatLocalType()
                {
                }
            }

            private class mrpnumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private mrpnumberLocalType()
                {
                }
            }

            private class eunumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private eunumberLocalType()
                {
                }
            }

            private class orphandrugLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                1,
                                2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                private orphandrugLocalType()
                {
                }
            }

            private class intensivemonitoringLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                1,
                                2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                private intensivemonitoringLocalType()
                {
                }
            }

            private class withdrawndateformatLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                                "102"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private withdrawndateformatLocalType()
                {
                }
            }

            private class withdrawndateLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                                "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

                private withdrawndateLocalType()
                {
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
        /// </para>
        /// </summary>
        public partial class presentationnameLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator presentationnameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<presentationnameLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static presentationnameLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productshortname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productgenericname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productcompanyname", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productstrength", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("productform", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("packagedesc", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public presentationnameLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///									The "Full Presentation Name" of the product as it has been authorised.
            ///									Business Rules: AP.13.1.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productname", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productname", "EVMessage.MarketingAuthorisation.Schema"), value, "productname", productnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The short name of the product as reported in the "Full Presentation Name".
            ///									Business Rules: AP.13.2.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productshortname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productshortname", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productshortname", "EVMessage.MarketingAuthorisation.Schema"), value, "productshortname", productshortnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The generic name (if present) as part of the "Full Presentation Name".
            ///									Business Rules: AP.13.3.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productgenericname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productgenericname", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productgenericname", "EVMessage.MarketingAuthorisation.Schema"), value, "productgenericname", productgenericnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The  name of company/trademark/manufacturer (if present) as part of the "Full Presentation Name".
            ///									Business Rules: AP.13.4.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productcompanyname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productcompanyname", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productcompanyname", "EVMessage.MarketingAuthorisation.Schema"), value, "productcompanyname", productcompanynameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The strength and strength unit (if present) as part of the "Full Presentation Name".
            ///									Business Rules: AP.13.5.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productstrength
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productstrength", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productstrength", "EVMessage.MarketingAuthorisation.Schema"), value, "productstrength", productstrengthLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									The pharmaceutical form (if present) as part of the "Full Presentation Name".
            ///									Business Rules: AP.13.6.BR.
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productform
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productform", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productform", "EVMessage.MarketingAuthorisation.Schema"), value, "productform", productformLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///									This field contains information about the package of the Medicinal Product. It is Mandatory when operation type is NOT a nullification
            ///									Business Rules: AP.13.7.BR
            ///								
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string packagedesc
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("packagedesc", "EVMessage.MarketingAuthorisation.Schema"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("packagedesc", "EVMessage.MarketingAuthorisation.Schema"), value, "packagedesc", packagedescLocalType.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("presentationname", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<presentationnameLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productname", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("productshortname", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("productgenericname", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("productcompanyname", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("productstrength", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("productform", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                localElementDictionary.Add(XName.Get("packagedesc", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class productnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                private productnameLocalType()
                {
                }
            }

            private class productshortnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productshortnameLocalType()
                {
                }
            }

            private class productgenericnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 1000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productgenericnameLocalType()
                {
                }
            }

            private class productcompanynameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productcompanynameLocalType()
                {
                }
            }

            private class productstrengthLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productstrengthLocalType()
                {
                }
            }

            private class productformLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productformLocalType()
                {
                }
            }

            private class packagedescLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private packagedescLocalType()
                {
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productatc+)
        /// </para>
        /// </summary>
        public partial class productatcsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productatcLocalType> productatcField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productatcsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productatcsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productatc", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public productatcsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.authorisedproductType.productatcsLocalType.productatcLocalType> productatc
            {
                get
                {
                    if ((this.productatcField == null))
                    {
                        this.productatcField = new XTypedList<productatcLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productatc", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.productatcField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productatcField = null;
                    }
                    else
                    {
                        if ((this.productatcField == null))
                        {
                            this.productatcField = XTypedList<productatcLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productatc", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<productatcLocalType>(this.productatcField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productatcs", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productatcsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productatc", "EVMessage.MarketingAuthorisation.Schema"), typeof(productatcLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atccode)
            /// </para>
            /// </summary>
            public partial class productatcLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productatcLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productatcLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("atccode", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public productatcLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												The ATC code of the product. The ATC code must have an attribute: Resolution Mode.
                ///												Business Rules: AP.ATC.1.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public atccodeLocalType atccode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("atccode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((atccodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("atccode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productatc", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productatcLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("atccode", "EVMessage.MarketingAuthorisation.Schema"), typeof(atccodeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class atccodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator atccodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<atccodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public atccodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///																Resolution mode = 1 Local (Foreign key present in the XML file)
                    ///																Resolution mode = 2 Global (ev_code present in the Eudravigilance Lookup Tables)
                    ///															
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("atccode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<atccodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productindication+)
        /// </para>
        /// </summary>
        public partial class productindicationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productindicationLocalType> productindicationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productindicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productindicationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productindication", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public productindicationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about each indication of a Medicinal Product, according to different MEDDRA's versions
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.authorisedproductType.productindicationsLocalType.productindicationLocalType> productindication
            {
                get
                {
                    if ((this.productindicationField == null))
                    {
                        this.productindicationField = new XTypedList<productindicationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productindication", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.productindicationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productindicationField = null;
                    }
                    else
                    {
                        if ((this.productindicationField == null))
                        {
                            this.productindicationField = XTypedList<productindicationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productindication", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<productindicationLocalType>(this.productindicationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productindications", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productindicationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productindication", "EVMessage.MarketingAuthorisation.Schema"), typeof(productindicationLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (meddraversion, meddralevel, meddracode)
            /// </para>
            /// </summary>
            public partial class productindicationLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productindicationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productindicationLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meddraversion", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("meddralevel", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("meddracode", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public productindicationLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												The MedDRA's version that the Drug Indication MedDRA code refers to (e.g. 13.0, 13.1, 14.0 etc)
                ///												Business Rules: AP.IND.1.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public decimal meddraversion
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddraversion", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddraversion", "EVMessage.MarketingAuthorisation.Schema"), value, "meddraversion", meddraversionLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field says the level of Drug Indication in the MEDDRA's version.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public string meddralevel
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddralevel", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddralevel", "EVMessage.MarketingAuthorisation.Schema"), value, "meddralevel", meddralevelLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												This field details the code of MEDDRA that specifies the Drug Indication in the MEDDRA's version.
                ///												Business Rules: AP.IND.3.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public int meddracode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddracode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddracode", "EVMessage.MarketingAuthorisation.Schema"), value, "meddracode", meddracodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productindication", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productindicationLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("meddraversion", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("meddralevel", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("meddracode", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class meddraversionLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 1, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));

                    private meddraversionLocalType()
                    {
                    }
                }

                private class meddralevelLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                    "SOC",
                                    "HLGT",
                                    "HLT",
                                    "PT",
                                    "LLT",
                                    "soc",
                                    "hlgt",
                                    "hlt",
                                    "pt",
                                    "llt"}, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private meddralevelLocalType()
                    {
                    }
                }

                private class meddracodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));

                    private meddracodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (pharmaceuticalproduct+)
        /// </para>
        /// </summary>
        public partial class pharmaceuticalproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<pharmaceuticalproductType> pharmaceuticalproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator pharmaceuticalproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static pharmaceuticalproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmaceuticalproduct", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public pharmaceuticalproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about every formulation in a Medicinal Product. (Some Medicinal Products are several formulations in the same presentation).
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public IList<pharmaceuticalproductType> pharmaceuticalproduct
            {
                get
                {
                    if ((this.pharmaceuticalproductField == null))
                    {
                        this.pharmaceuticalproductField = new XTypedList<pharmaceuticalproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("pharmaceuticalproduct", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.pharmaceuticalproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.pharmaceuticalproductField = null;
                    }
                    else
                    {
                        if ((this.pharmaceuticalproductField == null))
                        {
                            this.pharmaceuticalproductField = XTypedList<pharmaceuticalproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("pharmaceuticalproduct", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<pharmaceuticalproductType>(this.pharmaceuticalproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("pharmaceuticalproducts", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<pharmaceuticalproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("pharmaceuticalproduct", "EVMessage.MarketingAuthorisation.Schema"), typeof(pharmaceuticalproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (previousevcode+)
        /// </para>
        /// </summary>
        public partial class previousevcodesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<previousevcodeLocalType> previousevcodeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator previousevcodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static previousevcodesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("previousevcode", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public previousevcodesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.authorisedproductType.previousevcodesLocalType.previousevcodeLocalType> previousevcode
            {
                get
                {
                    if ((this.previousevcodeField == null))
                    {
                        this.previousevcodeField = new XTypedList<previousevcodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("previousevcode", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.previousevcodeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.previousevcodeField = null;
                    }
                    else
                    {
                        if ((this.previousevcodeField == null))
                        {
                            this.previousevcodeField = XTypedList<previousevcodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("previousevcode", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<previousevcodeLocalType>(this.previousevcodeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("previousevcodes", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<previousevcodesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("previousevcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(previousevcodeLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (devevcode)
            /// </para>
            /// </summary>
            public partial class previousevcodeLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator previousevcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static previousevcodeLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("devevcode", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public previousevcodeLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												This field contains (if exist) the ev_code of the previous development product it refers to.
                ///												Business Rules: AP.PEV.1.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public string devevcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("devevcode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("devevcode", "EVMessage.MarketingAuthorisation.Schema"), value, "devevcode", devevcodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("previousevcode", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<previousevcodeLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("devevcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class devevcodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private devevcodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ppiattachment+)
        /// </para>
        /// </summary>
        public partial class ppiattachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ppiattachmentLocalType> ppiattachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ppiattachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ppiattachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ppiattachment", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public ppiattachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Contains details for each individual Printed Product Information document in a specific language for the product. Each PPI must contain various annexes relating to the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.authorisedproductType.ppiattachmentsLocalType.ppiattachmentLocalType> ppiattachment
            {
                get
                {
                    if ((this.ppiattachmentField == null))
                    {
                        this.ppiattachmentField = new XTypedList<ppiattachmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ppiattachment", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.ppiattachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.ppiattachmentField = null;
                    }
                    else
                    {
                        if ((this.ppiattachmentField == null))
                        {
                            this.ppiattachmentField = XTypedList<ppiattachmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ppiattachment", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<ppiattachmentLocalType>(this.ppiattachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ppiattachments", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ppiattachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ppiattachment", "EVMessage.MarketingAuthorisation.Schema"), typeof(ppiattachmentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachmentcode, validitydeclaration?)
            /// </para>
            /// </summary>
            public partial class ppiattachmentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ppiattachmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ppiattachmentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachmentcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("validitydeclaration", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public ppiattachmentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												This field references the attachment for this product.  This element must have an attribute: Resolution Mode.
                ///												Business Rules: AP.PPI.1.BR
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public attachmentcodeLocalType attachmentcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("attachmentcode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((attachmentcodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("attachmentcode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												This must be set to 1 (valid) if an updated product PPI references a PPI previously loaded in the EVMPD (AP.PPI.1..1 = 2).
                ///												Business Rules: AP.PPI.2.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public System.Nullable<int> validitydeclaration
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("validitydeclaration", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("validitydeclaration", "EVMessage.MarketingAuthorisation.Schema"), value, "validitydeclaration", validitydeclarationLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ppiattachment", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ppiattachmentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("attachmentcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(attachmentcodeLocalType));
                    localElementDictionary.Add(XName.Get("validitydeclaration", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class attachmentcodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator attachmentcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public attachmentcodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///																Resolution mode = 1 Local (Local Number present in the XML file).
                    ///																Resolution mode = 2 Global (ev_code of the attachment present in the EudraVigilance Lookup Tables. The pattern of the ev_code is 'ATT999999' )
                    ///															
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("attachmentcode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<attachmentcodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class validitydeclarationLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private validitydeclarationLocalType()
                    {
                    }
                }
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
    /// </para>
    /// </summary>
    public partial class pharmaceuticalproductType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator pharmaceuticalproductType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalproductType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static pharmaceuticalproductType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmformcode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("adminroutes", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("activeingredients", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("excipients", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("adjuvants", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("medicaldevices", "EVMessage.MarketingAuthorisation.Schema")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public pharmaceuticalproductType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///						The pharmaceutical form of the product. The pharmaceutical form must have an attribute: Resolution Mode.
        ///						Business Rules: AllProducts.PP.1.BR.1
        ///						Business Rules: AuthProducts.PP.1.BR.1
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public pharmformcodeLocalType pharmformcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("pharmformcode", "EVMessage.MarketingAuthorisation.Schema"));
                return ((pharmformcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("pharmformcode", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information on all of the administration route(s) of the product.
        ///						Business Rules: AllProducts.PP.ARs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public adminroutesLocalType adminroutes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("adminroutes", "EVMessage.MarketingAuthorisation.Schema"));
                return ((adminroutesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("adminroutes", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information about all of the active ingredients present in the product.
        ///						Business Rules: AllProducts.PP.ACTs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public activeingredientsLocalType activeingredients
        {
            get
            {
                XElement x = this.GetElement(XName.Get("activeingredients", "EVMessage.MarketingAuthorisation.Schema"));
                return ((activeingredientsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("activeingredients", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information about the excipients present in the product.
        ///						Business Rules: AllProducts.PP.EXCs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public excipientsLocalType excipients
        {
            get
            {
                XElement x = this.GetElement(XName.Get("excipients", "EVMessage.MarketingAuthorisation.Schema"));
                return ((excipientsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("excipients", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information about all of the adjuvant ingredients present in the product.
        ///						Business Rules: AllProducts.PP.ADJs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public adjuvantsLocalType adjuvants
        {
            get
            {
                XElement x = this.GetElement(XName.Get("adjuvants", "EVMessage.MarketingAuthorisation.Schema"));
                return ((adjuvantsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("adjuvants", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///						This section contains information about all of the medical devices present in the product.
        ///						Business Rules: AllProducts.PP.MDs.BR.
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public medicaldevicesLocalType medicaldevices
        {
            get
            {
                XElement x = this.GetElement(XName.Get("medicaldevices", "EVMessage.MarketingAuthorisation.Schema"));
                return ((medicaldevicesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("medicaldevices", "EVMessage.MarketingAuthorisation.Schema"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("pharmaceuticalproductType", "EVMessage.MarketingAuthorisation.Schema");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<pharmaceuticalproductType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("pharmformcode", "EVMessage.MarketingAuthorisation.Schema"), typeof(pharmformcodeLocalType));
            localElementDictionary.Add(XName.Get("adminroutes", "EVMessage.MarketingAuthorisation.Schema"), typeof(adminroutesLocalType));
            localElementDictionary.Add(XName.Get("activeingredients", "EVMessage.MarketingAuthorisation.Schema"), typeof(activeingredientsLocalType));
            localElementDictionary.Add(XName.Get("excipients", "EVMessage.MarketingAuthorisation.Schema"), typeof(excipientsLocalType));
            localElementDictionary.Add(XName.Get("adjuvants", "EVMessage.MarketingAuthorisation.Schema"), typeof(adjuvantsLocalType));
            localElementDictionary.Add(XName.Get("medicaldevices", "EVMessage.MarketingAuthorisation.Schema"), typeof(medicaldevicesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        public partial class pharmformcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator pharmformcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmformcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public pharmformcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Resolution mode = 1 Local (Local Number present in the XML file) Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("pharmformcode", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<pharmformcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (adminroute+)
        /// </para>
        /// </summary>
        public partial class adminroutesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<adminrouteLocalType> adminrouteField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator adminroutesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminroutesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static adminroutesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adminroute", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adminroute+)
            /// </para>
            /// </summary>
            public adminroutesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information each administration route of the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (adminroute+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType.adminroutesLocalType.adminrouteLocalType> adminroute
            {
                get
                {
                    if ((this.adminrouteField == null))
                    {
                        this.adminrouteField = new XTypedList<adminrouteLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("adminroute", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.adminrouteField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.adminrouteField = null;
                    }
                    else
                    {
                        if ((this.adminrouteField == null))
                        {
                            this.adminrouteField = XTypedList<adminrouteLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("adminroute", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<adminrouteLocalType>(this.adminrouteField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("adminroutes", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<adminroutesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("adminroute", "EVMessage.MarketingAuthorisation.Schema"), typeof(adminrouteLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adminroutecode)
            /// </para>
            /// </summary>
            public partial class adminrouteLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator adminrouteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminrouteLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static adminrouteLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adminroutecode", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (adminroutecode)
                /// </para>
                /// </summary>
                public adminrouteLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Administration Route form of the product. The administration route must have an attribute: Resolution Mode.
                ///												Business Rules: AllProducts.PP.AR.1.BR.
                ///												Business Rules: AuthProducts.PP.AR.1.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (adminroutecode)
                /// </para>
                /// </summary>
                public adminroutecodeLocalType adminroutecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("adminroutecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((adminroutecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("adminroutecode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("adminroute", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<adminrouteLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("adminroutecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(adminroutecodeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class adminroutecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator adminroutecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminroutecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public adminroutecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///																Resolution mode = 1 Local (Local Number present in the XML file)
                    ///																Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    ///															
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("adminroutecode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<adminroutecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (activeingredient+)
        /// </para>
        /// </summary>
        public partial class activeingredientsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<activeingredientLocalType> activeingredientField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator activeingredientsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activeingredientsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static activeingredientsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("activeingredient", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (activeingredient+)
            /// </para>
            /// </summary>
            public activeingredientsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about an individual active ingredient present in the product. 
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (activeingredient+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType.activeingredientsLocalType.activeingredientLocalType> activeingredient
            {
                get
                {
                    if ((this.activeingredientField == null))
                    {
                        this.activeingredientField = new XTypedList<activeingredientLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("activeingredient", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.activeingredientField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.activeingredientField = null;
                    }
                    else
                    {
                        if ((this.activeingredientField == null))
                        {
                            this.activeingredientField = XTypedList<activeingredientLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("activeingredient", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<activeingredientLocalType>(this.activeingredientField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("activeingredients", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<activeingredientsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("activeingredient", "EVMessage.MarketingAuthorisation.Schema"), typeof(activeingredientLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class activeingredientLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator activeingredientLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activeingredientLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static activeingredientLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public activeingredientLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												The reference code of the substance that is present in the product. It identifies unequivocally a substance. This element must have an attribute: Resolution Mode.
                ///												Business Rules: DevProducts.PP.ACT.1.BR.
                ///												Business Rules: AuthProducts.PP.ACT.1.BR
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///												Business Rules: AllProducts.PP.ACT.2.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseUnionValue(x, global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), value, "concentrationtypecode", global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator value or for non range measurements the numerator value.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator prefix or for non range measurements the numerator prefix. Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ACT.4.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator Unit or for non range measurements the numerator Unit. Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ACT.5.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator value or for non range measurements the value specified.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator prefix or for non range measurements the denominator prefix.
                ///												Business Rules: AllProducts.PP.ACT.7.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator Unit  must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ACT.8.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator value must ONLY be used when specifying a range.
                ///												Business Rules: AllProducts.PP.ACT.9.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.ACT.10.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator Unit is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.ACT.11.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Value is used when specifying a range.
                ///												Business Rules: AllProducts.PP.ACT.12.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator prefix is used when specifying a range and must be from the published prefix list.
                ///												Business Rules: AllProducts.PP.ACT.13.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Unit is used when specifying a range and must be from the published denominator unit list.
                ///												Business Rules: AllProducts.PP.ACT.14.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("activeingredient", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<activeingredientLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///																Resolution mode = 1 Local (Local Number present in the XML file)
                    ///																Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    ///															
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (excipient+)
        /// </para>
        /// </summary>
        public partial class excipientsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<excipientLocalType> excipientField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator excipientsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<excipientsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static excipientsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("excipient", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (excipient+)
            /// </para>
            /// </summary>
            public excipientsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about the excipients present in the product. 
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (excipient+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType.excipientsLocalType.excipientLocalType> excipient
            {
                get
                {
                    if ((this.excipientField == null))
                    {
                        this.excipientField = new XTypedList<excipientLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("excipient", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.excipientField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.excipientField = null;
                    }
                    else
                    {
                        if ((this.excipientField == null))
                        {
                            this.excipientField = XTypedList<excipientLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("excipient", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<excipientLocalType>(this.excipientField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("excipients", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<excipientsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("excipient", "EVMessage.MarketingAuthorisation.Schema"), typeof(excipientLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class excipientLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator excipientLocalType(XElement xe) { return XTypedServices.ToXTypedElement<excipientLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static excipientLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public excipientLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												Code of the substance that is present in the product. It identifies unequivocally a substance that is acting as an excipient in this pharmaceutical product. This element must have an attribute: Resolution Mode.
                ///												Business Rules: DevProducts.PP.EXC.1.BR.
                ///												Business Rules: AuthProducts.PP.EXC.1.BR
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///												Business Rules: AllProducts.PP.EXC.2.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseUnionValue(x, global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), value, "concentrationtypecode", global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator value or for non range measurements the numerator value.
                ///												Business Rules: AllProducts.PP.EXC.3.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator prefix or for non range measurements the numerator prefix.
                ///												Business Rules: AllProducts.PP.EXC.4.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator Unit or for non range measurements the numerator Unit.
                ///												Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.EXC.5.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator value or for non range measurements the denominator value.
                ///												Business Rules: AllProducts.PP.EXC.6.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator prefix or for non range measurements the denominator prefix. Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.EXC.7.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator Unit or for non range measurements the denominator Unit.
                ///												Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.EXC.8.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator value must ONLY be used when specifying a range.
                ///												Business Rules: AllProducts.PP.EXC.9.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.EXC.10.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator Unit is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.EXC.11.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Value is used when specifying a range.
                ///												Business Rules: AllProducts.PP.EXC.12.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator prefix is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.EXC.13.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Unit is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.EXC.14.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("excipient", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<excipientLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (adjuvant+)
        /// </para>
        /// </summary>
        public partial class adjuvantsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<adjuvantLocalType> adjuvantField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator adjuvantsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adjuvantsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static adjuvantsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adjuvant", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adjuvant+)
            /// </para>
            /// </summary>
            public adjuvantsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about an individual adjuvant present in the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (adjuvant+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType.adjuvantsLocalType.adjuvantLocalType> adjuvant
            {
                get
                {
                    if ((this.adjuvantField == null))
                    {
                        this.adjuvantField = new XTypedList<adjuvantLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("adjuvant", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.adjuvantField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.adjuvantField = null;
                    }
                    else
                    {
                        if ((this.adjuvantField == null))
                        {
                            this.adjuvantField = XTypedList<adjuvantLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("adjuvant", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<adjuvantLocalType>(this.adjuvantField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("adjuvants", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<adjuvantsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("adjuvant", "EVMessage.MarketingAuthorisation.Schema"), typeof(adjuvantLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class adjuvantLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator adjuvantLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adjuvantLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static adjuvantLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public adjuvantLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												The reference code of the substance that is present in the product.
                ///												It identifies unequivocally a substance. This element must have an attribute: Resolution Mode.
                ///												Business Rules: DevProducts.PP.ADJ.1.BR.
                ///												Business Rules: AuthProducts.PP.ADJ.1.BR
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.2.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseUnionValue(x, global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), value, "concentrationtypecode", global::EVMessage.MarketingAuthorisation.Schema.integernullable.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator value or for non range measurements the numerator value.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator prefix or for non range measurements the numerator prefix. Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.4.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit numerator Unit or for non range measurements the numerator Unit. Must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.5.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator value or for non range measurements the value specified.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator prefix or for non range measurements the denominator prefix.
                ///												Business Rules: AllProducts.PP.ADJ.7.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The Low limit denominator Unit  must be a value from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.8.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator value must ONLY be used when specifying a range.
                ///												Business Rules: AllProducts.PP.ACT.9.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.10.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit numerator Unit is used when specifying a range and must be from the published list.
                ///												Business Rules: AllProducts.PP.ADJ.11.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Value is used when specifying a range.
                ///												Business Rules: AllProducts.PP.ADJ.12.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator prefix is used when specifying a range and must be from the published prefix list.
                ///												Business Rules: AllProducts.PP.ADJ.13.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// 
                ///												The High limit denominator Unit is used when specifying a range and must be from the published denominator unit list.
                ///												Business Rules: AllProducts.PP.ADJ.14.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("adjuvant", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<adjuvantLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "EVMessage.MarketingAuthorisation.Schema"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "EVMessage.MarketingAuthorisation.Schema"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::EVMessage.MarketingAuthorisation.Schema.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///																Resolution mode = 1 Local (Local Number present in the XML file)
                    ///																Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    ///															
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "EVMessage.MarketingAuthorisation.Schema");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (medicaldevice+)
        /// </para>
        /// </summary>
        public partial class medicaldevicesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<medicaldeviceLocalType> medicaldeviceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator medicaldevicesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<medicaldevicesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static medicaldevicesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("medicaldevice", "EVMessage.MarketingAuthorisation.Schema")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (medicaldevice+)
            /// </para>
            /// </summary>
            public medicaldevicesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (medicaldevice+)
            /// </para>
            /// </summary>
            public IList<EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType.medicaldevicesLocalType.medicaldeviceLocalType> medicaldevice
            {
                get
                {
                    if ((this.medicaldeviceField == null))
                    {
                        this.medicaldeviceField = new XTypedList<medicaldeviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("medicaldevice", "EVMessage.MarketingAuthorisation.Schema"));
                    }
                    return this.medicaldeviceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.medicaldeviceField = null;
                    }
                    else
                    {
                        if ((this.medicaldeviceField == null))
                        {
                            this.medicaldeviceField = XTypedList<medicaldeviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("medicaldevice", "EVMessage.MarketingAuthorisation.Schema"));
                        }
                        else
                        {
                            XTypedServices.SetList<medicaldeviceLocalType>(this.medicaldeviceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("medicaldevices", "EVMessage.MarketingAuthorisation.Schema");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<medicaldevicesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("medicaldevice", "EVMessage.MarketingAuthorisation.Schema"), typeof(medicaldeviceLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (medicaldevicecode)
            /// </para>
            /// </summary>
            public partial class medicaldeviceLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator medicaldeviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<medicaldeviceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static medicaldeviceLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("medicaldevicecode", "EVMessage.MarketingAuthorisation.Schema")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (medicaldevicecode)
                /// </para>
                /// </summary>
                public medicaldeviceLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///												This section contains the code of each medical device present in the product.
                ///												Business Rules: AllProducts.PP.MD.1.BR.
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (medicaldevicecode)
                /// </para>
                /// </summary>
                public int medicaldevicecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("medicaldevicecode", "EVMessage.MarketingAuthorisation.Schema"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("medicaldevicecode", "EVMessage.MarketingAuthorisation.Schema"), value, "medicaldevicecode", medicaldevicecodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("medicaldevice", "EVMessage.MarketingAuthorisation.Schema");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<medicaldeviceLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("medicaldevicecode", "EVMessage.MarketingAuthorisation.Schema"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class medicaldevicecodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private medicaldevicecodeLocalType()
                    {
                    }
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used to indicate, by an empty string, the null value 
    /// </para>
    /// </summary>
    public sealed class null_value
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

        private null_value()
        {
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used for specify a non mandatory integer field
    /// </para>
    /// </summary>
    public sealed class integernullable
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null),
                    EVMessage.MarketingAuthorisation.Schema.null_value.TypeDefinition});

        private integernullable()
        {
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used for specify a non mandatory double field
    /// </para>
    /// </summary>
    public sealed class doublenullable
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null),
                    EVMessage.MarketingAuthorisation.Schema.null_value.TypeDefinition});

        private doublenullable()
        {
        }
    }

    /// <summary>
    /// <para>
    /// The foreign key type: A string of max 60 character. 
    /// </para>
    /// </summary>
    public sealed class fk_code
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

        private fk_code()
        {
        }
    }

    /// <summary>
    /// <para>
    /// The foreign key / text type: A string of max 2000 character which can be a foreign key or a text.
    /// </para>
    /// </summary>
    public sealed class fk_code_text
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

        private fk_code_text()
        {
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildTypeDictionary();
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return typeDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildTypeDictionary()
        {
            typeDictionary.Add(XName.Get("messageheaderType", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.messageheaderType));
            typeDictionary.Add(XName.Get("attachmentType", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.attachmentType));
            typeDictionary.Add(XName.Get("authorisedproductType", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.authorisedproductType));
            typeDictionary.Add(XName.Get("pharmaceuticalproductType", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.pharmaceuticalproductType));
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("marketingauthorisation", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.marketingauthorisation));
            elementDictionary.Add(XName.Get("optional1", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.optional1));
            elementDictionary.Add(XName.Get("optional2", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.optional2));
            elementDictionary.Add(XName.Get("optional3", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.optional3));
            elementDictionary.Add(XName.Get("optional4", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.optional4));
            elementDictionary.Add(XName.Get("optional5", "EVMessage.MarketingAuthorisation.Schema"), typeof(global::EVMessage.MarketingAuthorisation.Schema.optional5));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("marketingauthorisation", "EVMessage.MarketingAuthorisation.Schema")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public marketingauthorisation marketingauthorisation { get { return rootObject as marketingauthorisation; } }

        public optional1 optional1 { get { return rootObject as optional1; } }

        public optional2 optional2 { get { return rootObject as optional2; } }

        public optional3 optional3 { get { return rootObject as optional3; } }

        public optional4 optional4 { get { return rootObject as optional4; } }

        public optional5 optional5 { get { return rootObject as optional5; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(marketingauthorisation root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional3 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional4 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(optional5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public global::EVMessage.MarketingAuthorisation.Schema.marketingauthorisation marketingauthorisation { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.marketingauthorisation; } }

        public global::EVMessage.MarketingAuthorisation.Schema.optional1 optional1 { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.optional1; } }

        public global::EVMessage.MarketingAuthorisation.Schema.optional2 optional2 { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.optional2; } }

        public global::EVMessage.MarketingAuthorisation.Schema.optional3 optional3 { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.optional3; } }

        public global::EVMessage.MarketingAuthorisation.Schema.optional4 optional4 { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.optional4; } }

        public global::EVMessage.MarketingAuthorisation.Schema.optional5 optional5 { get { return rootObject as global::EVMessage.MarketingAuthorisation.Schema.optional5; } }

        private XRoot()
        {
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.marketingauthorisation root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.optional1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.optional2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.optional3 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.optional4 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::EVMessage.MarketingAuthorisation.Schema.optional5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}
