//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eudravigilance.ema.europa.eu.schema.emaxevmpd
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi;


    /// <summary>
    /// <para>
    /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
    /// </para>
    /// </summary>
    public partial class evprm : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator evprm(XElement xe) { return XTypedServices.ToXTypedElement<evprm>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static evprm()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ichicsrmessageheader", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("organisations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("attachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("masterfilelocations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("developmentsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("approvedsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("standardterminology", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("developmentproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisedproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public evprm()
        {
        }

        /// <summary>
        /// <para>
        /// The message header section must be completed.  The section contains information related to sender, receiver, the type of information being transmitted and the transmission date.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public ichicsrmessageheaderType ichicsrmessageheader
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ichicsrmessageheader", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((ichicsrmessageheaderType)(x));
            }
            set
            {
                this.SetElement(XName.Get("ichicsrmessageheader", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Contains the data submitted for new/updated organisations to the EVPRM
        ///
        ///Business Rules: M.Os.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public organisationsLocalType organisations
        {
            get
            {
                XElement x = this.GetElement(XName.Get("organisations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((organisationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("organisations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Contains the data submitted for new/updated sources within the EVPRM.
        ///
        ///Business Rules: M.Ss.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public sourcesLocalType sources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((sourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Contains the new attachments required by the EVPRM
        ///
        ///Business Rules: M.ATTs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public attachmentsLocalType attachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((attachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("attachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Contains the new/updated PV System Master File Locations within the EVPRM.
        ///
        ///Business Rules: M.MFs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public masterfilelocationsLocalType masterfilelocations
        {
            get
            {
                XElement x = this.GetElement(XName.Get("masterfilelocations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((masterfilelocationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("masterfilelocations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The development substances section.
        ///
        ///Contains the new/updated development substances within the EVPRM.
        ///
        ///Business Rules: M.DSs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public developmentsubstancesLocalType developmentsubstances
        {
            get
            {
                XElement x = this.GetElement(XName.Get("developmentsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((developmentsubstancesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("developmentsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The approved substance section: 
        ///
        ///This section is applicable to all substances that are contained in medicinal product that are authorised. 
        ///
        ///Business Rules: M.ASs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public approvedsubstancesLocalType approvedsubstances
        {
            get
            {
                XElement x = this.GetElement(XName.Get("approvedsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((approvedsubstancesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("approvedsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about the standard terms: ATC Codes,  Pharmaceutical Forms and Administration Routes.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public standardterminologyLocalType standardterminology
        {
            get
            {
                XElement x = this.GetElement(XName.Get("standardterminology", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((standardterminologyLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("standardterminology", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The Development Products section contains all the information regarding Development Medicinal Products that are studied in Clinical Trials. Each Development Product section contains all the information regarding a specific Development Medicinal Product studied in Clinical Trials.
        ///
        ///Business Rules: M.DPs.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public developmentproductsLocalType developmentproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("developmentproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((developmentproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("developmentproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The Authorised products section contains all the information regarding Authorised Medicinal Products.
        ///
        ///Business Rules: M.AP.BR. 
        ///
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ichicsrmessageheader, organisations?, sources?, attachments?, masterfilelocations?, developmentsubstances?, approvedsubstances?, standardterminology?, developmentproducts?, authorisedproducts?)
        /// </para>
        /// </summary>
        public authorisedproductsLocalType authorisedproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("authorisedproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((authorisedproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("authorisedproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("evprm", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static evprm Load(string xmlFile)
        {
            return XTypedServices.Load<evprm>(xmlFile);
        }

        public static evprm Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<evprm>(xmlFile);
        }

        public static evprm Parse(string xml)
        {
            return XTypedServices.Parse<evprm>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<evprm>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ichicsrmessageheader", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(ichicsrmessageheaderType));
            localElementDictionary.Add(XName.Get("organisations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(organisationsLocalType));
            localElementDictionary.Add(XName.Get("sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourcesLocalType));
            localElementDictionary.Add(XName.Get("attachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentsLocalType));
            localElementDictionary.Add(XName.Get("masterfilelocations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(masterfilelocationsLocalType));
            localElementDictionary.Add(XName.Get("developmentsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentsubstancesLocalType));
            localElementDictionary.Add(XName.Get("approvedsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(approvedsubstancesLocalType));
            localElementDictionary.Add(XName.Get("standardterminology", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(standardterminologyLocalType));
            localElementDictionary.Add(XName.Get("developmentproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentproductsLocalType));
            localElementDictionary.Add(XName.Get("authorisedproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(authorisedproductsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (organisation+)
        /// </para>
        /// </summary>
        public partial class organisationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<organisationType> organisationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator organisationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<organisationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static organisationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("organisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (organisation+)
            /// </para>
            /// </summary>
            public organisationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The organisation section contains information about Marketing Authorisation Holders and Sponsors that will be stored directly in the XEVMPD. The sender should use this section to send data on new Organisations and/or send updated information about an Organisation already present in the standard list (e.g. add/edit telephone number or email address).
            ///
            ///Business Rules: O.BR.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (organisation+)
            /// </para>
            /// </summary>
            public IList<organisationType> organisation
            {
                get
                {
                    if ((this.organisationField == null))
                    {
                        this.organisationField = new XTypedList<organisationType>(this, LinqToXsdTypeManager.Instance, XName.Get("organisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.organisationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.organisationField = null;
                    }
                    else
                    {
                        if ((this.organisationField == null))
                        {
                            this.organisationField = XTypedList<organisationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("organisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<organisationType>(this.organisationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("organisations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<organisationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("organisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(organisationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (source+)
        /// </para>
        /// </summary>
        public partial class sourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<sourceType> sourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator sourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static sourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (source+)
            /// </para>
            /// </summary>
            public sourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The source section contains information about sources of reference information that will be stored directly in the XEVMPD. The sender should use this section to send data on a new source and/or send updated information about a reference source already present in the standard list (e.g. add to the comment).
            ///
            ///Business Rules: S.BR.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (source+)
            /// </para>
            /// </summary>
            public IList<sourceType> source
            {
                get
                {
                    if ((this.sourceField == null))
                    {
                        this.sourceField = new XTypedList<sourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.sourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.sourceField = null;
                    }
                    else
                    {
                        if ((this.sourceField == null))
                        {
                            this.sourceField = XTypedList<sourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<sourceType>(this.sourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (attachment+)
        /// </para>
        /// </summary>
        public partial class attachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<attachmentType> attachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator attachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static attachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachment+)
            /// </para>
            /// </summary>
            public attachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The document bundled in support of the product message being sent
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (attachment+)
            /// </para>
            /// </summary>
            public IList<attachmentType> attachment
            {
                get
                {
                    if ((this.attachmentField == null))
                    {
                        this.attachmentField = new XTypedList<attachmentType>(this, LinqToXsdTypeManager.Instance, XName.Get("attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.attachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.attachmentField = null;
                    }
                    else
                    {
                        if ((this.attachmentField == null))
                        {
                            this.attachmentField = XTypedList<attachmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<attachmentType>(this.attachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("attachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<attachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (masterfilelocation+)
        /// </para>
        /// </summary>
        public partial class masterfilelocationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<masterfilelocationType> masterfilelocationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator masterfilelocationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<masterfilelocationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static masterfilelocationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("masterfilelocation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (masterfilelocation+)
            /// </para>
            /// </summary>
            public masterfilelocationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (masterfilelocation+)
            /// </para>
            /// </summary>
            public IList<masterfilelocationType> masterfilelocation
            {
                get
                {
                    if ((this.masterfilelocationField == null))
                    {
                        this.masterfilelocationField = new XTypedList<masterfilelocationType>(this, LinqToXsdTypeManager.Instance, XName.Get("masterfilelocation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.masterfilelocationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.masterfilelocationField = null;
                    }
                    else
                    {
                        if ((this.masterfilelocationField == null))
                        {
                            this.masterfilelocationField = XTypedList<masterfilelocationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("masterfilelocation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<masterfilelocationType>(this.masterfilelocationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("masterfilelocations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<masterfilelocationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("masterfilelocation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(masterfilelocationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (developmentsubstance+)
        /// </para>
        /// </summary>
        public partial class developmentsubstancesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<developmentsubstanceType> developmentsubstanceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator developmentsubstancesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<developmentsubstancesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static developmentsubstancesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("developmentsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (developmentsubstance+)
            /// </para>
            /// </summary>
            public developmentsubstancesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This repeatable section is applicable to individual substances that are contained in medicinal products which are NOT yet authorised. For development substances specific confidentiality rules apply.
            ///
            ///This section shall be used to provide data on a new development substance /or to update information about a development substance for investigational medicinal products.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (developmentsubstance+)
            /// </para>
            /// </summary>
            public IList<developmentsubstanceType> developmentsubstance
            {
                get
                {
                    if ((this.developmentsubstanceField == null))
                    {
                        this.developmentsubstanceField = new XTypedList<developmentsubstanceType>(this, LinqToXsdTypeManager.Instance, XName.Get("developmentsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.developmentsubstanceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.developmentsubstanceField = null;
                    }
                    else
                    {
                        if ((this.developmentsubstanceField == null))
                        {
                            this.developmentsubstanceField = XTypedList<developmentsubstanceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("developmentsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<developmentsubstanceType>(this.developmentsubstanceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("developmentsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<developmentsubstancesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("developmentsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentsubstanceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (approvedsubstance+)
        /// </para>
        /// </summary>
        public partial class approvedsubstancesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<approvedsubstanceType> approvedsubstanceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator approvedsubstancesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<approvedsubstancesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static approvedsubstancesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("approvedsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (approvedsubstance+)
            /// </para>
            /// </summary>
            public approvedsubstancesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The approved substance section shall be used to specify the name of a substance, which is already in the public domain.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (approvedsubstance+)
            /// </para>
            /// </summary>
            public IList<approvedsubstanceType> approvedsubstance
            {
                get
                {
                    if ((this.approvedsubstanceField == null))
                    {
                        this.approvedsubstanceField = new XTypedList<approvedsubstanceType>(this, LinqToXsdTypeManager.Instance, XName.Get("approvedsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.approvedsubstanceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.approvedsubstanceField = null;
                    }
                    else
                    {
                        if ((this.approvedsubstanceField == null))
                        {
                            this.approvedsubstanceField = XTypedList<approvedsubstanceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("approvedsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<approvedsubstanceType>(this.approvedsubstanceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("approvedsubstances", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<approvedsubstancesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("approvedsubstance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(approvedsubstanceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (atcs?, pharmaceuticalforms?, administrationroutes?)
        /// </para>
        /// </summary>
        public partial class standardterminologyLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator standardterminologyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<standardterminologyLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static standardterminologyLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("atcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("pharmaceuticalforms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("administrationroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atcs?, pharmaceuticalforms?, administrationroutes?)
            /// </para>
            /// </summary>
            public standardterminologyLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Business Rules: ST.ATCs.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (atcs?, pharmaceuticalforms?, administrationroutes?)
            /// </para>
            /// </summary>
            public atcsLocalType atcs
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("atcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return ((atcsLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("atcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                }
            }

            /// <summary>
            /// <para>
            /// Business Rules: ST.PFs.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (atcs?, pharmaceuticalforms?, administrationroutes?)
            /// </para>
            /// </summary>
            public pharmaceuticalformsLocalType pharmaceuticalforms
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("pharmaceuticalforms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return ((pharmaceuticalformsLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("pharmaceuticalforms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                }
            }

            /// <summary>
            /// <para>
            /// Business Rules: ST.ARs.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (atcs?, pharmaceuticalforms?, administrationroutes?)
            /// </para>
            /// </summary>
            public administrationroutesLocalType administrationroutes
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("administrationroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return ((administrationroutesLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("administrationroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("standardterminology", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<standardterminologyLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("atcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(atcsLocalType));
                localElementDictionary.Add(XName.Get("pharmaceuticalforms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalformsLocalType));
                localElementDictionary.Add(XName.Get("administrationroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(administrationroutesLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atc+)
            /// </para>
            /// </summary>
            public partial class atcsLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<atcType> atcField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator atcsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<atcsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static atcsLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("atc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (atc+)
                /// </para>
                /// </summary>
                public atcsLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The ATC section contains information about an ATC Code used in a Medicinal Product (Authorised or Development). The ATC container can be used to either; Add a new ATC Code to the XEVMPD, or, to maintain an existing ATC code within the EVMPD
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (atc+)
                /// </para>
                /// </summary>
                public IList<atcType> atc
                {
                    get
                    {
                        if ((this.atcField == null))
                        {
                            this.atcField = new XTypedList<atcType>(this, LinqToXsdTypeManager.Instance, XName.Get("atc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        return this.atcField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.atcField = null;
                        }
                        else
                        {
                            if ((this.atcField == null))
                            {
                                this.atcField = XTypedList<atcType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("atc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                            }
                            else
                            {
                                XTypedServices.SetList<atcType>(this.atcField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("atcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<atcsLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("atc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(atcType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (pharmaceuticalform+)
            /// </para>
            /// </summary>
            public partial class pharmaceuticalformsLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<pharmaceuticalformType> pharmaceuticalformField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator pharmaceuticalformsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalformsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static pharmaceuticalformsLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmaceuticalform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (pharmaceuticalform+)
                /// </para>
                /// </summary>
                public pharmaceuticalformsLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The Pharmaceutical Form section contains information about a Pharmaceutical Form used in a Medicinal Product (Authorised or Development). The Pharmaceutical Form container can be used to either; Add a new Pharmaceutical Form to the XEVMPD, or, to maintain an existing Pharmaceutical Form within the EVMPD
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (pharmaceuticalform+)
                /// </para>
                /// </summary>
                public IList<pharmaceuticalformType> pharmaceuticalform
                {
                    get
                    {
                        if ((this.pharmaceuticalformField == null))
                        {
                            this.pharmaceuticalformField = new XTypedList<pharmaceuticalformType>(this, LinqToXsdTypeManager.Instance, XName.Get("pharmaceuticalform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        return this.pharmaceuticalformField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.pharmaceuticalformField = null;
                        }
                        else
                        {
                            if ((this.pharmaceuticalformField == null))
                            {
                                this.pharmaceuticalformField = XTypedList<pharmaceuticalformType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("pharmaceuticalform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                            }
                            else
                            {
                                XTypedServices.SetList<pharmaceuticalformType>(this.pharmaceuticalformField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("pharmaceuticalforms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<pharmaceuticalformsLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("pharmaceuticalform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalformType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (administrationroute+)
            /// </para>
            /// </summary>
            public partial class administrationroutesLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<administrationrouteType> administrationrouteField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator administrationroutesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<administrationroutesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static administrationroutesLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("administrationroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (administrationroute+)
                /// </para>
                /// </summary>
                public administrationroutesLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The Administration Route section contains information about an Administration Route used in a Medicinal Product (Authorised or Development). The Administration Route container can be used to either; Add a new Administration Route to the XEVMPD, or, to maintain an existing Administration Route within the EVMPD
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (administrationroute+)
                /// </para>
                /// </summary>
                public IList<administrationrouteType> administrationroute
                {
                    get
                    {
                        if ((this.administrationrouteField == null))
                        {
                            this.administrationrouteField = new XTypedList<administrationrouteType>(this, LinqToXsdTypeManager.Instance, XName.Get("administrationroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        return this.administrationrouteField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.administrationrouteField = null;
                        }
                        else
                        {
                            if ((this.administrationrouteField == null))
                            {
                                this.administrationrouteField = XTypedList<administrationrouteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("administrationroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                            }
                            else
                            {
                                XTypedServices.SetList<administrationrouteType>(this.administrationrouteField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("administrationroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<administrationroutesLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("administrationroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(administrationrouteType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (developmentproduct+)
        /// </para>
        /// </summary>
        public partial class developmentproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<developmentproductType> developmentproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator developmentproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<developmentproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static developmentproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("developmentproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (developmentproduct+)
            /// </para>
            /// </summary>
            public developmentproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (developmentproduct+)
            /// </para>
            /// </summary>
            public IList<developmentproductType> developmentproduct
            {
                get
                {
                    if ((this.developmentproductField == null))
                    {
                        this.developmentproductField = new XTypedList<developmentproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("developmentproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.developmentproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.developmentproductField = null;
                    }
                    else
                    {
                        if ((this.developmentproductField == null))
                        {
                            this.developmentproductField = XTypedList<developmentproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("developmentproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<developmentproductType>(this.developmentproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("developmentproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<developmentproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("developmentproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (authorisedproduct+)
        /// </para>
        /// </summary>
        public partial class authorisedproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<authorisedproductType> authorisedproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator authorisedproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authorisedproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static authorisedproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authorisedproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (authorisedproduct+)
            /// </para>
            /// </summary>
            public authorisedproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The Authorised product section contains all the information regarding a single Authorised Medicinal Product that is either marketed in one country or throughout the EU following the approval via Central Authorisation Procedures.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (authorisedproduct+)
            /// </para>
            /// </summary>
            public IList<authorisedproductType> authorisedproduct
            {
                get
                {
                    if ((this.authorisedproductField == null))
                    {
                        this.authorisedproductField = new XTypedList<authorisedproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("authorisedproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.authorisedproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.authorisedproductField = null;
                    }
                    else
                    {
                        if ((this.authorisedproductField == null))
                        {
                            this.authorisedproductField = XTypedList<authorisedproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("authorisedproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<authorisedproductType>(this.authorisedproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("authorisedproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<authorisedproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("authorisedproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(authorisedproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
    /// </para>
    /// </summary>
    public partial class ichicsrmessageheaderType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ichicsrmessageheaderType(XElement xe) { return XTypedServices.ToXTypedElement<ichicsrmessageheaderType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static ichicsrmessageheaderType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("messagetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messageformatversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messageformatrelease", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messagenumb", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messagesenderidentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messagereceiveridentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messagedateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("messagedate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public ichicsrmessageheaderType()
        {
        }

        /// <summary>
        /// <para>
        /// The message type must be specified. It contains information on the type of information being transmitted. 
        ///
        ///When creating a message, the value of this field must be "XEVPRM".
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagetype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagetype", messagetypeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Format Version: 
        ///
        ///The message format version shall be specified. It refers to the release number of the message format version of the XSD SCHEMA.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messageformatversion
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageformatversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messageformatversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messageformatversion", messageformatversionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Format Release
        /// </para>
        /// <para>
        /// The message format release contains the release number of the message format release number of the XSD SCHEMA.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messageformatrelease
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messageformatrelease", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messageformatrelease", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messageformatrelease", messageformatreleaseLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Number
        /// </para>
        /// <para>
        /// The message number shall be specified. It refers to the unique tracking number assigned to a specific medicinal product report message file transmitted by the sender. 
        ///
        ///The message number is unique to the sender.
        ///
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagenumb
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagenumb", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagenumb", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagenumb", messagenumbLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Sender Identifier must be specified. It refers to the unique identifier of the sender organisation as assigned during the EudraVigilance registration process.
        ///
        ///Business Rules: H.5.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagesenderidentifier
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagesenderidentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagesenderidentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagesenderidentifier", messagesenderidentifierLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Message Receiver Identifier
        ///
        ///The message receiver identifier shall be specified. This refers to the unique identifier of the receiving organisation i.e. the European Medicines Agency.
        ///
        ///Business Rules: H.6.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagereceiveridentifier
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagereceiveridentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagereceiveridentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagereceiveridentifier", messagereceiveridentifierLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The format of the Message Date.
        ///
        ///The only value accepted is "204" 
        ///
        ///					
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagedateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagedateformat", messagedateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Message Date must be specified in accordance with the business rules.
        ///
        ///Business Rules: H.8.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (messagetype, messageformatversion, messageformatrelease, messagenumb, messagesenderidentifier, messagereceiveridentifier, messagedateformat, messagedate)
        /// </para>
        /// </summary>
        public string messagedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("messagedate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("messagedate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "messagedate", messagedateLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ichicsrmessageheaderType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ichicsrmessageheaderType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("messagetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messageformatversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messageformatrelease", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messagenumb", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messagesenderidentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messagereceiveridentifier", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messagedateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("messagedate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class messagetypeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                            "XEVPRM",
                            "xevprm"}, 0, 0, null, null, 16, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagetypeLocalType()
            {
            }
        }

        private class messageformatversionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                            "2"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messageformatversionLocalType()
            {
            }
        }

        private class messageformatreleaseLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                            "0"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messageformatreleaseLocalType()
            {
            }
        }

        private class messagenumbLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private messagenumbLocalType()
            {
            }
        }

        private class messagesenderidentifierLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 3, null, 0, XmlSchemaWhiteSpace.Collapse));

            private messagesenderidentifierLocalType()
            {
            }
        }

        private class messagereceiveridentifierLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                            "EVTEST",
                            "EVHUMAN"}, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagereceiveridentifierLocalType()
            {
            }
        }

        private class messagedateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "204"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private messagedateformatLocalType()
            {
            }
        }

        private class messagedateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(46)), null, 0, 0, null, null, 14, null, null, 1, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Collapse));

            private messagedateLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
    /// </para>
    /// </summary>
    public partial class organisationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator organisationType(XElement xe) { return XTypedServices.ToXTypedElement<organisationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static organisationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("name_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("organisationsenderid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("address", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("city", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("state", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("postcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("tel_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("tel_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("tel_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("fax_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("fax_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("fax_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("email", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public organisationType()
        {
        }

        /// <summary>
        /// <para>
        /// The type of organisation shall be specified i.e. marketing authorisation holder (MAH). = 1; Sponsor = 2
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public int type_org
        {
            get
            {
                XElement x = this.GetElement(XName.Get("type_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("type_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "type_org", type_orgLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The name of the MAH/Sponsor shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string name_org
        {
            get
            {
                XElement x = this.GetElement(XName.Get("name_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("name_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "name_org", name_orgLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: O.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The EVcode of the organisation shall be specified.
        ///
        ///An EVcode is assigned to every new organisation.
        ///
        ///Business Rules: O.4.BR.
        ///
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The ID of the organisation that corresponds to the same organisation in the registration system shall be provided. 
        ///
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string organisationsenderid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("organisationsenderid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("organisationsenderid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "organisationsenderid", organisationsenderidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The address of the organisation shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string address
        {
            get
            {
                XElement x = this.GetElement(XName.Get("address", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("address", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "address", addressLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The city of the organisation shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string city
        {
            get
            {
                XElement x = this.GetElement(XName.Get("city", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("city", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "city", cityLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The state of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string state
        {
            get
            {
                XElement x = this.GetElement(XName.Get("state", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("state", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "state", stateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The postcode of the organisation shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string postcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("postcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("postcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "postcode", postcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The country code of the location of the organisation shall be specified.
        ///
        ///Business Rules: O.10.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string countrycode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "countrycode", countrycodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The telephone number of the organisation shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string tel_number
        {
            get
            {
                XElement x = this.GetElement(XName.Get("tel_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("tel_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "tel_number", tel_numberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The extension telephone number of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string tel_extension
        {
            get
            {
                XElement x = this.GetElement(XName.Get("tel_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("tel_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "tel_extension", tel_extensionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The telephone country code of the organisation shall be specified.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string tel_countrycode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("tel_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("tel_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "tel_countrycode", tel_countrycodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The fax number of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string fax_number
        {
            get
            {
                XElement x = this.GetElement(XName.Get("fax_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("fax_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "fax_number", fax_numberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The fax number extension of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string fax_extension
        {
            get
            {
                XElement x = this.GetElement(XName.Get("fax_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("fax_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "fax_extension", fax_extensionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The fax number country code of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string fax_countrycode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("fax_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("fax_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "fax_countrycode", fax_countrycodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The email address of the organisation shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string email
        {
            get
            {
                XElement x = this.GetElement(XName.Get("email", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("email", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "email", emailLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Further information on the organisation can be supplied in the comments field, if required. 
        ///
        ///When the organisation operation type is nullification, the comment field is mandatory and the reason for nullification shall be provided.
        ///
        ///Business Rules O.18.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_org, name_org, localnumber?, ev_code?, organisationsenderid?, address?, city, state?, postcode?, countrycode, tel_number?, tel_extension?, tel_countrycode?, fax_number?, fax_extension?, fax_countrycode?, email?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity.
        ///
        ///				1 = Insert 2 = Update 4 = Nullify
        ///
        ///Busines Rules: O..1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("organisationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<organisationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("type_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("name_org", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("organisationsenderid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("address", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("city", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("state", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("postcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("tel_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("tel_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("tel_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("fax_number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("fax_extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("fax_countrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("email", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class type_orgLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private type_orgLocalType()
            {
            }
        }

        private class name_orgLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private name_orgLocalType()
            {
            }
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private ev_codeLocalType()
            {
            }
        }

        private class organisationsenderidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private organisationsenderidLocalType()
            {
            }
        }

        private class addressLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private addressLocalType()
            {
            }
        }

        private class cityLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private cityLocalType()
            {
            }
        }

        private class stateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private stateLocalType()
            {
            }
        }

        private class postcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private postcodeLocalType()
            {
            }
        }

        private class countrycodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private countrycodeLocalType()
            {
            }
        }

        private class tel_numberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private tel_numberLocalType()
            {
            }
        }

        private class tel_extensionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private tel_extensionLocalType()
            {
            }
        }

        private class tel_countrycodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private tel_countrycodeLocalType()
            {
            }
        }

        private class fax_numberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private fax_numberLocalType()
            {
            }
        }

        private class fax_extensionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private fax_extensionLocalType()
            {
            }
        }

        private class fax_countrycodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private fax_countrycodeLocalType()
            {
            }
        }

        private class emailLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private emailLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
    /// </para>
    /// </summary>
    public partial class sourceType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator sourceType(XElement xe) { return XTypedServices.ToXTypedElement<sourceType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static sourceType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("sourcename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
        /// </para>
        /// </summary>
        public sourceType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. This field is mandatory for Operation Type Insert.
        ///
        ///Business Rules: S.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The EVcode of the reference source shall be specified.
        ///
        ///An EVcode is assigned to every new reference source.
        ///
        ///This field is mandatory if the operation type is NOT “Insert”.
        ///
        ///Business Rules: S.2.BR.
        ///
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The name of the reference source shall be provided.
        ///
        ///Business Rules: S.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
        /// </para>
        /// </summary>
        public string sourcename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sourcename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("sourcename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "sourcename", sourcenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Further information may be supplied in the comment field.
        ///
        ///The comment field is mandatory when the operation type is nullification (S..1 = 4).
        ///
        ///Business Rules S.4.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcename, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity. 1 = Insert 2 = Update 4 = Nullify
        ///
        ///Business Rules: S..1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("sourceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<sourceType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("sourcename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private ev_codeLocalType()
            {
            }
        }

        private class sourcenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private sourcenameLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
    /// </para>
    /// </summary>
    public partial class masterfilelocationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator masterfilelocationType(XElement xe) { return XTypedServices.ToXTypedElement<masterfilelocationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static masterfilelocationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflcompany", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mfldepartment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflbuilding", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflstreet", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflcity", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflstate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflpostcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public masterfilelocationType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: MF.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The EV Code of the entity. Mandatory if the operation type is not insert.
        ///
        ///Business Rules: MF.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflcompany
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflcompany", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflcompany", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflcompany", mflcompanyLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mfldepartment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mfldepartment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mfldepartment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mfldepartment", mfldepartmentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflbuilding
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflbuilding", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflbuilding", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflbuilding", mflbuildingLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflstreet
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflstreet", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflstreet", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflstreet", mflstreetLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflcity
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflcity", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflcity", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflcity", mflcityLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflstate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflstate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflstate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflstate", mflstateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflpostcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflpostcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflpostcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflpostcode", mflpostcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string mflcountrycode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("mflcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mflcountrycode", mflcountrycodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Further information may be supplied in the comment field.
        ///
        ///The comment field is mandatory when the operation type is nullification (MF..1 = 4).
        ///
        ///Business Rules MF.11.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, mflcompany?, mfldepartment?, mflbuilding?, mflstreet, mflcity, mflstate?, mflpostcode, mflcountrycode, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity. 1 = Insert 2 = Update 4 = Nullify
        ///
        ///Business Rules: MF..1.BR
        ///
        ///				
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("masterfilelocationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<masterfilelocationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflcompany", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mfldepartment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflbuilding", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflstreet", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflcity", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflstate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflpostcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mflcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(36)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private ev_codeLocalType()
            {
            }
        }

        private class mflcompanyLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mflcompanyLocalType()
            {
            }
        }

        private class mfldepartmentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mfldepartmentLocalType()
            {
            }
        }

        private class mflbuildingLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private mflbuildingLocalType()
            {
            }
        }

        private class mflstreetLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mflstreetLocalType()
            {
            }
        }

        private class mflcityLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 35, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mflcityLocalType()
            {
            }
        }

        private class mflstateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private mflstateLocalType()
            {
            }
        }

        private class mflpostcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 40, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mflpostcodeLocalType()
            {
            }
        }

        private class mflcountrycodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(33)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private mflcountrycodeLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
    /// </para>
    /// </summary>
    public partial class attachmentType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator attachmentType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static attachmentType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("filename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("filetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("attachmentname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("attachmenttype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("attachmentversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("attachmentversiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public attachmentType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. 
        ///
        ///Business Rules: ATT.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The file name of the attachment with file extension
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string filename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("filename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("filename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "filename", filenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The file type of the attachment.  
        ///
        ///Allowed values are as contained within the restriction allowedfiletypes
        ///
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public int filetype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("filetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("filetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "filetype", filetypeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The name of the attachment given by the sender
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "attachmentname", attachmentnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Type of attachment:
        ///
        ///Printed Product Information (PPI) = 1
        ///
        ///Printed Substance Information (PSI) = 2
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public int attachmenttype1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmenttype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmenttype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "attachmenttype1", attachmenttype1LocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The code of the language as reported in the LANGUAGE published list
        ///
        ///Business Rules: ATT.6.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string languagecode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "languagecode", languagecodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The version of the PPI attachement
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentversion
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "attachmentversion", attachmentversionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The date of the last update of the PPI document
        ///
        ///Business Rules: ATT.8.BR  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string attachmentversiondate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("attachmentversiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("attachmentversiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "attachmentversiondate", attachmentversiondateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Format of the Version Date. Only accepted value is “102” for "CCYYMMDD”
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber, filename, filetype, attachmentname, attachmenttype1, languagecode, attachmentversion, attachmentversiondate, versiondateformat)
        /// </para>
        /// </summary>
        public string versiondateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondateformat", versiondateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity. The only value accepted is 1 = Insert
        ///
        ///Business Rules: ATT..1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("attachmentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<attachmentType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("filename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("filetype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("attachmentname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmenttype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmentversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("attachmentversiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private localnumberLocalType()
            {
            }
        }

        private class filenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private filenameLocalType()
            {
            }
        }

        private class filetypeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2,
                            3,
                            4,
                            5}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private filetypeLocalType()
            {
            }
        }

        private class attachmentnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentnameLocalType()
            {
            }
        }

        private class attachmenttype1LocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmenttype1LocalType()
            {
            }
        }

        private class languagecodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private languagecodeLocalType()
            {
            }
        }

        private class attachmentversionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 5, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentversionLocalType()
            {
            }
        }

        private class attachmentversiondateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(41)), null, 0, 8, null, null, 0, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Collapse));

            private attachmentversiondateLocalType()
            {
            }
        }

        private class versiondateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "102"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateformatLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
    /// </para>
    /// </summary>
    public partial class developmentsubstanceType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator developmentsubstanceType(XElement xe) { return XTypedServices.ToXTypedElement<developmentsubstanceType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static developmentsubstanceType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("developmentsubstancenames", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public developmentsubstanceType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: DS.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The EVcode of the development substance shall be specified.				An EVcode is assigned to every new development substance.			This field is mandatory if the operation type is NOT “Insert”.
        ///
        ///Business Rules: D.S.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Owner Identifier This field identifies the Owner of the Development substance. Only for operation type Insert and reserved for EMA use only.
        ///
        ///Business Rules DS.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The code of the sponsor shall be specified.
        ///
        ///The sponsor code shall have an attribute ‘Resolution Mode’:
        ///
        ///				Resolution mode 1 when the code is a Local Number; this is mandatory if the operation type is “Insert”.
        ///
        ///				Resolution mode 2 when the code is an ev_code; this is mandatory if the operation type is NOT “Insert”.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public sponsorcodeLocalType sponsorcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((sponsorcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The Chemical Abstracts Service (CAS) number of the development substance shall be specified, where applicable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string casnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "casnumber", casnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The empiric molecular formula of the development substance shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string molecularformula
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "molecularformula", molecularformulaLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field indicates the code referring to the substance classification look up list
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public System.Nullable<int> substanceclass
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "substanceclass", substanceclassLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Chemical Biological Description (CBD) of the Development Substance (if applicable)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string cbd
        {
            get
            {
                XElement x = this.GetElement(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "cbd", cbdLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Development substance names section 
        ///
        ///Business Rules: DS.DSNs.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public developmentsubstancenamesLocalType developmentsubstancenames
        {
            get
            {
                XElement x = this.GetElement(XName.Get("developmentsubstancenames", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((developmentsubstancenamesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("developmentsubstancenames", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public internationalcodesLocalType internationalcodes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((internationalcodesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Business Rules: DS.SSIs.BR.
        ///
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substancessisLocalType substancessis
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substancessisLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// For development substances attachments may be absent.
        ///
        ///Business Rules: DS.ATTs.BR.
        ///
        ///				
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substanceattachmentsLocalType substanceattachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substanceattachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Further information on the development substance may be supplied in the comment field.
        ///
        ///					When the development substance shall be nullified, the comment field is mandatory and the reasons for nullification shall be provided.
        /// </para>
        /// <para>
        /// This element can be used to put some comments in a section. It is mandatory when there is a request of nullification.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, sponsorcode, casnumber?, molecularformula?, substanceclass?, cbd?, developmentsubstancenames, internationalcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity.
        ///
        ///1 = Insert 2 = Update 4 = Nullify 5 = Change Owner (Reserved for EMA)
        ///
        ///Business Rules: DS..1.BR. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Reserved for EMA Use only
        ///
        ///Business Rules DS..2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> @virtual
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("virtual", ""));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("virtual", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("developmentsubstanceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<developmentsubstanceType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sponsorcodeLocalType));
            localElementDictionary.Add(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("developmentsubstancenames", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentsubstancenamesLocalType));
            localElementDictionary.Add(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(internationalcodesLocalType));
            localElementDictionary.Add(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancessisLocalType));
            localElementDictionary.Add(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substanceattachmentsLocalType));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        public partial class sponsorcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator sponsorcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sponsorcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public sponsorcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 1 = Local Number ; 2 = EV_Code
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sponsorcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        private class casnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 15, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private casnumberLocalType()
            {
            }
        }

        private class molecularformulaLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private molecularformulaLocalType()
            {
            }
        }

        private class substanceclassLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));

            private substanceclassLocalType()
            {
            }
        }

        private class cbdLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private cbdLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (developmentsubstancename+)
        /// </para>
        /// </summary>
        public partial class developmentsubstancenamesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<developmentsubstancenameLocalType> developmentsubstancenameField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator developmentsubstancenamesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<developmentsubstancenamesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static developmentsubstancenamesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("developmentsubstancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (developmentsubstancename+)
            /// </para>
            /// </summary>
            public developmentsubstancenamesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The development substance name section shall be used to specify the name and/or code of the development substance.
            ///
            ///Business Rules: DS.DSN.BR.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (developmentsubstancename+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentsubstanceType.developmentsubstancenamesLocalType.developmentsubstancenameLocalType> developmentsubstancename
            {
                get
                {
                    if ((this.developmentsubstancenameField == null))
                    {
                        this.developmentsubstancenameField = new XTypedList<developmentsubstancenameLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("developmentsubstancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.developmentsubstancenameField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.developmentsubstancenameField = null;
                    }
                    else
                    {
                        if ((this.developmentsubstancenameField == null))
                        {
                            this.developmentsubstancenameField = XTypedList<developmentsubstancenameLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("developmentsubstancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<developmentsubstancenameLocalType>(this.developmentsubstancenameField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("developmentsubstancenames", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<developmentsubstancenamesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("developmentsubstancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentsubstancenameLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancename, preferred, iscode?)
            /// </para>
            /// </summary>
            public partial class developmentsubstancenameLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator developmentsubstancenameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<developmentsubstancenameLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static developmentsubstancenameLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("preferred", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("iscode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancename, preferred, iscode?)
                /// </para>
                /// </summary>
                public developmentsubstancenameLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The name and/or code of the development substance shall be specified in English.
                ///
                ///Business Rules: DS.DSN.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancename, preferred, iscode?)
                /// </para>
                /// </summary>
                public string substancename
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "substancename", substancenameLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// Used to specify if the development substance name is a preferred name.
                ///
                ///1= Indicates name is the preferred name, 2 Indicates name is not the preferred  name.
                ///
                ///
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancename, preferred, iscode?)
                /// </para>
                /// </summary>
                public int preferred
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("preferred", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("preferred", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "preferred", preferredLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// It shall be specified if the development substance name specified is a code.
                ///
                ///				The value is 1 if the name or the code specified is a code;
                ///
                ///				The value is 2 if the name or the code specified is NOT a code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancename, preferred, iscode?)
                /// </para>
                /// </summary>
                public System.Nullable<int> iscode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("iscode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("iscode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "iscode", iscodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("developmentsubstancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<developmentsubstancenameLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("preferred", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                    localElementDictionary.Add(XName.Get("iscode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class substancenameLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private substancenameLocalType()
                    {
                    }
                }

                private class preferredLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1,
                                    2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private preferredLocalType()
                    {
                    }
                }

                private class iscodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1,
                                    2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private iscodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (internationalcode+)
        /// </para>
        /// </summary>
        public partial class internationalcodesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<internationalcodeLocalType> internationalcodeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator internationalcodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<internationalcodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static internationalcodesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (internationalcode+)
            /// </para>
            /// </summary>
            public internationalcodesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Any internationally recognised code by which the substance can be identified shall be specified as applicable.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (internationalcode+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentsubstanceType.internationalcodesLocalType.internationalcodeLocalType> internationalcode
            {
                get
                {
                    if ((this.internationalcodeField == null))
                    {
                        this.internationalcodeField = new XTypedList<internationalcodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.internationalcodeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.internationalcodeField = null;
                    }
                    else
                    {
                        if ((this.internationalcodeField == null))
                        {
                            this.internationalcodeField = XTypedList<internationalcodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<internationalcodeLocalType>(this.internationalcodeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<internationalcodesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(internationalcodeLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcecode, referencetext)
            /// </para>
            /// </summary>
            public partial class internationalcodeLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator internationalcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<internationalcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static internationalcodeLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public internationalcodeLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// A valid reference source of the substance code shall be specified.
                ///
                ///The Source code must have an attribute ‘Resolution Mode’:
                ///
                ///Business Rules: DS.IC.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public sourcecodeLocalType sourcecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((sourcecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The identifying name/code for the susbstance within the reference source system provided in DS.IC.1.
                ///
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public referencetextLocalType referencetext
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((referencetextLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<internationalcodeLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourcecodeLocalType));
                    localElementDictionary.Add(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(referencetextLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class sourcecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator sourcecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public sourcecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 -  Local (Local Number present in the XML file in the sources section.)
                    ///
                    ///Resolution mode = 2 -  Global (EV Code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<sourcecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                public partial class referencetextLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator referencetextLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencetextLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public referencetextLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code_text.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (EV Code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public System.Nullable<int> resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            if ((x == null))
                            {
                                return null;
                            }
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<referencetextLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substancessi+)
        /// </para>
        /// </summary>
        public partial class substancessisLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substancessiLocalType> substancessiField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substancessisLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancessisLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substancessisLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancessi+)
            /// </para>
            /// </summary>
            public substancessisLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substancessi+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentsubstanceType.substancessisLocalType.substancessiLocalType> substancessi
            {
                get
                {
                    if ((this.substancessiField == null))
                    {
                        this.substancessiField = new XTypedList<substancessiLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substancessiField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substancessiField = null;
                    }
                    else
                    {
                        if ((this.substancessiField == null))
                        {
                            this.substancessiField = XTypedList<substancessiLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substancessiLocalType>(this.substancessiField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substancessisLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancessiLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// 
            ///
            ///								Business Rules: DS.SSI.BR.
            ///
            ///								
            /// </para>
            /// <para>
            /// Regular expression: (substance)
            /// </para>
            /// </summary>
            public partial class substancessiLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancessiLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancessiLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancessiLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
                }

                /// <summary>
                /// <para>
                /// 
                ///
                ///								Business Rules: DS.SSI.BR.
                ///
                ///								
                /// </para>
                /// <para>
                /// Regular expression: (substance)
                /// </para>
                /// </summary>
                public substancessiLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substance)
                /// </para>
                /// </summary>
                public eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance substance
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        return ((eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancessiLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substanceattachment+)
        /// </para>
        /// </summary>
        public partial class substanceattachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substanceattachmentLocalType> substanceattachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substanceattachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceattachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substanceattachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substanceattachment+)
            /// </para>
            /// </summary>
            public substanceattachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The attachment section is used to reference an attachment.  The referenced attachment may be included as a file in the message or may reference an attachment that is already stored in the EVMPD
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substanceattachment+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentsubstanceType.substanceattachmentsLocalType.substanceattachmentLocalType> substanceattachment
            {
                get
                {
                    if ((this.substanceattachmentField == null))
                    {
                        this.substanceattachmentField = new XTypedList<substanceattachmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substanceattachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substanceattachmentField = null;
                    }
                    else
                    {
                        if ((this.substanceattachmentField == null))
                        {
                            this.substanceattachmentField = XTypedList<substanceattachmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substanceattachmentLocalType>(this.substanceattachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substanceattachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substanceattachmentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachmentcode, validitydeclaration?)
            /// </para>
            /// </summary>
            public partial class substanceattachmentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substanceattachmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceattachmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substanceattachmentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public substanceattachmentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field references the printable substance information attachment for this substance.  This will be the local number reference number if the attachment is included with the current message otherwise it will be EV Code of the attachement.  This element must have an attribute: Resolution Mode.
                ///
                ///Resolution mode = 1 Local (Local Number present in the XML file).
                ///
                ///Resolution mode = 2 Global (ev_code of the attachment present in the EudraVigilance Lookup Tables. 
                ///
                ///The pattern of the ev_code is 'ATT999999' 
                ///
                ///Business Rules: DS.ATT.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public attachmentcodeLocalType attachmentcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((attachmentcodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// In performing an update of existing medicinal product information where an attachment for an approved substance was already previously loaded and referenced, a confirmation shall be provided that the referenced attachment is the latest version of the documentation.
                ///
                ///The value is 1 if the attachment is the latest version.
                ///
                ///Business Rules: DS.ATT.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public System.Nullable<int> validitydeclaration
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "validitydeclaration", validitydeclarationLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substanceattachmentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentcodeLocalType));
                    localElementDictionary.Add(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class attachmentcodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator attachmentcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public attachmentcodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// The details of the attachment for the approved substance shall be specified. 
                    ///
                    ///Resolution mode  = 1 when the code is a Local Number.
                    ///
                    ///Resolution mode 2 when the code is an EV Code.
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<attachmentcodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class validitydeclarationLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private validitydeclarationLocalType()
                    {
                    }
                }
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
    /// </para>
    /// </summary>
    public partial class approvedsubstanceType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator approvedsubstanceType(XElement xe) { return XTypedServices.ToXTypedElement<approvedsubstanceType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static approvedsubstanceType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substancetranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substancealiases", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public approvedsubstanceType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Buisness Rules: AS.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The EVcode of the approved substance shall be specified.
        ///
        ///An EVcode is assigned to every new approved substance.
        ///
        ///This field is mandatory if the operation type is NOT “Insert”.
        ///
        ///Business Rules: AS.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// A valid reference source of the approved substance name shall be specified
        ///
        ///The Source code must have an attribute ‘Resolution Mode’ (AS.3..1).
        ///
        ///Business Rules: AS.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public sourcecodeLocalType sourcecode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((sourcecodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The name of the approved substance in English shall be provided.
        ///
        ///Business Rules: AS.4.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string substancename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "substancename", substancenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Chemical Abstracts Service (CAS) number of the approved substance shall be specified, where applicable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string casnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "casnumber", casnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The empiric molecular formula of the approved substance shall be specified, where applicable. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string molecularformula
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "molecularformula", molecularformulaLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field indicates the code referring to the substance classification look up list.
        ///
        ///A value must be specified from the published list if the operation type is Insert or Update.
        ///
        ///Business Rules: AS.7.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public System.Nullable<int> substanceclass
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "substanceclass", substanceclassLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Chemical Biological Description (CBD) of the Approved Substance (if applicable)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string cbd
        {
            get
            {
                XElement x = this.GetElement(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "cbd", cbdLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The optional substance translations section can be used to supply the names by which the substance is known in languages other than English.
        ///
        ///Business Rules: AS.Ts.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substancetranslationsLocalType substancetranslations
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substancetranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substancetranslationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substancetranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substancealiasesLocalType substancealiases
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substancealiases", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substancealiasesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substancealiases", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public internationalcodesLocalType internationalcodes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((internationalcodesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The previous EV Code section 
        ///
        ///This section shall be used when an approved substance shall be linked to the EVcodes of one or more development substances.
        ///
        ///Business Rules: AS.PEVs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public previousevcodesLocalType previousevcodes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((previousevcodesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Business Rules: AS.SSIs.BR.
        ///
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substancessisLocalType substancessis
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substancessisLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Business Rules: AS.ATTs.BR.
        ///
        ///					
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public substanceattachmentsLocalType substanceattachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((substanceattachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Further information may be supplied in the comment field. 
        ///
        ///When the operation type is nullification, the comment field is mandatory and the reason of nullification shall be provided.
        ///
        ///Business Rules: AS.10.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, sourcecode, substancename, casnumber?, molecularformula?, substanceclass?, cbd?, substancetranslations?, substancealiases?, internationalcodes?, previousevcodes?, substancessis?, substanceattachments?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity.
        /// </para>
        /// <para>
        /// 	1 = Insert 2 = Update 4 = Nullify
        ///
        ///Business Rules: AS..1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Reserved for EMA Use only
        ///
        ///Business Rules AS..2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> @virtual
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("virtual", ""));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("virtual", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("approvedsubstanceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<approvedsubstanceType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourcecodeLocalType));
            localElementDictionary.Add(XName.Get("substancename", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("casnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("molecularformula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("substanceclass", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("cbd", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("substancetranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancetranslationsLocalType));
            localElementDictionary.Add(XName.Get("substancealiases", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancealiasesLocalType));
            localElementDictionary.Add(XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(internationalcodesLocalType));
            localElementDictionary.Add(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(previousevcodesLocalType));
            localElementDictionary.Add(XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancessisLocalType));
            localElementDictionary.Add(XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substanceattachmentsLocalType));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        public partial class sourcecodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator sourcecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public sourcecodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Resolution mode = 1 when the code is a Local Number this indicates that the reference source is included in the current xml message.
            ///
            ///Resolution mode  = 2 when the code is an EV Code this indicates that the reference is already present in the EVMPD source list.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sourcecodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        private class substancenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private substancenameLocalType()
            {
            }
        }

        private class casnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 15, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private casnumberLocalType()
            {
            }
        }

        private class molecularformulaLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private molecularformulaLocalType()
            {
            }
        }

        private class substanceclassLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));

            private substanceclassLocalType()
            {
            }
        }

        private class cbdLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private cbdLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substancetranslation+)
        /// </para>
        /// </summary>
        public partial class substancetranslationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substancetranslationLocalType> substancetranslationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substancetranslationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancetranslationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substancetranslationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancetranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancetranslation+)
            /// </para>
            /// </summary>
            public substancetranslationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The sender should use this section to add or update each individual translation of the substance name.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substancetranslation+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.substancetranslationsLocalType.substancetranslationLocalType> substancetranslation
            {
                get
                {
                    if ((this.substancetranslationField == null))
                    {
                        this.substancetranslationField = new XTypedList<substancetranslationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substancetranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substancetranslationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substancetranslationField = null;
                    }
                    else
                    {
                        if ((this.substancetranslationField == null))
                        {
                            this.substancetranslationField = XTypedList<substancetranslationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substancetranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substancetranslationLocalType>(this.substancetranslationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substancetranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substancetranslationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substancetranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancetranslationLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (languagecode, term)
            /// </para>
            /// </summary>
            public partial class substancetranslationLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancetranslationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancetranslationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancetranslationLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (languagecode, term)
                /// </para>
                /// </summary>
                public substancetranslationLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The two letter code of the language as detailed in the published LANGUAGE  list
                ///
                ///Business Rules: AS.T.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (languagecode, term)
                /// </para>
                /// </summary>
                public string languagecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "languagecode", languagecodeLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The translation of the substance name must be specified.
                ///
                ///Business Rules: AS.T.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (languagecode, term)
                /// </para>
                /// </summary>
                public string term
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "term", termLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substancetranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancetranslationLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class languagecodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private languagecodeLocalType()
                    {
                    }
                }

                private class termLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private termLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// The optional substance aliases section can be used to supply known synonyms of the substance name.
        ///
        ///Business Rules: AS.SAs.BR.
        ///
        ///						
        /// </para>
        /// <para>
        /// Regular expression: (substancealias+)
        /// </para>
        /// </summary>
        public partial class substancealiasesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substancealiasLocalType> substancealiasField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substancealiasesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancealiasesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substancealiasesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancealias", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// The optional substance aliases section can be used to supply known synonyms of the substance name.
            ///
            ///Business Rules: AS.SAs.BR.
            ///
            ///						
            /// </para>
            /// <para>
            /// Regular expression: (substancealias+)
            /// </para>
            /// </summary>
            public substancealiasesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Where applicable, one synonym of the substance name shall be provided or updated using this section.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substancealias+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.substancealiasesLocalType.substancealiasLocalType> substancealias
            {
                get
                {
                    if ((this.substancealiasField == null))
                    {
                        this.substancealiasField = new XTypedList<substancealiasLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substancealias", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substancealiasField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substancealiasField = null;
                    }
                    else
                    {
                        if ((this.substancealiasField == null))
                        {
                            this.substancealiasField = XTypedList<substancealiasLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substancealias", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substancealiasLocalType>(this.substancealiasField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substancealiases", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substancealiasesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substancealias", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancealiasLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcecode, aliasname, aliastranslations?)
            /// </para>
            /// </summary>
            public partial class substancealiasLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancealiasLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancealiasLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancealiasLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("aliasname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("aliastranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (sourcecode, aliasname, aliastranslations?)
                /// </para>
                /// </summary>
                public substancealiasLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// A valid reference source of the approved substance synonym shall be specified.
                ///
                ///The Source code must have an attribute ‘Resolution Mode’ (AS.SA.1..1)
                ///
                ///Business Rules: AS.SA.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, aliasname, aliastranslations?)
                /// </para>
                /// </summary>
                public sourcecodeLocalType sourcecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((sourcecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The synonym of the substance name shall be specified.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, aliasname, aliastranslations?)
                /// </para>
                /// </summary>
                public string aliasname
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("aliasname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("aliasname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "aliasname", aliasnameLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This optional section can be used to add or update translations of aliases of the substance name.
                ///
                ///Business Rules: SA.Ts.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, aliasname, aliastranslations?)
                /// </para>
                /// </summary>
                public aliastranslationsLocalType aliastranslations
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("aliastranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((aliastranslationsLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("aliastranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substancealias", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancealiasLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourcecodeLocalType));
                    localElementDictionary.Add(XName.Get("aliasname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("aliastranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(aliastranslationsLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class sourcecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator sourcecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public sourcecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 1 = Local Number; 2 =  EV_Code
                    ///
                    ///Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (EV Code present in the EudraVigilance Lookup Tables for Sources)
                    ///
                    ///Business Rules: AS.SA.1..1.BR.
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<sourcecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class aliasnameLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private aliasnameLocalType()
                    {
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (aliastranslation+)
                /// </para>
                /// </summary>
                public partial class aliastranslationsLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<aliastranslationLocalType> aliastranslationField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator aliastranslationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<aliastranslationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static aliastranslationsLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("aliastranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (aliastranslation+)
                    /// </para>
                    /// </summary>
                    public aliastranslationsLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// The sender should use this section to add or update a translation of an alias name (repeatable if more than one translation exists).
                    ///
                    ///														
                    /// </para>
                    /// <para>
                    /// Occurrence: required, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (aliastranslation+)
                    /// </para>
                    /// </summary>
                    public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.substancealiasesLocalType.substancealiasLocalType.aliastranslationsLocalType.aliastranslationLocalType> aliastranslation
                    {
                        get
                        {
                            if ((this.aliastranslationField == null))
                            {
                                this.aliastranslationField = new XTypedList<aliastranslationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("aliastranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                            }
                            return this.aliastranslationField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.aliastranslationField = null;
                            }
                            else
                            {
                                if ((this.aliastranslationField == null))
                                {
                                    this.aliastranslationField = XTypedList<aliastranslationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("aliastranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                                }
                                else
                                {
                                    XTypedServices.SetList<aliastranslationLocalType>(this.aliastranslationField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("aliastranslations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<aliastranslationsLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("aliastranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(aliastranslationLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (languagecode, term)
                    /// </para>
                    /// </summary>
                    public partial class aliastranslationLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator aliastranslationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<aliastranslationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static aliastranslationLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (languagecode, term)
                        /// </para>
                        /// </summary>
                        public aliastranslationLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// The code of the language as reported in the LANGUAGE published list
                        ///
                        ///Business Rules: SA.T.1.BR.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (languagecode, term)
                        /// </para>
                        /// </summary>
                        public string languagecode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElementWithValidation(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "languagecode", languagecodeLocalType.TypeDefinition);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// The translation of the substance alias name shall be specified.
                        ///
                        ///Business Rules: SA.T.2.BR.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (languagecode, term)
                        /// </para>
                        /// </summary>
                        public string term
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElementWithValidation(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "term", termLocalType.TypeDefinition);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("aliastranslation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<aliastranslationLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("languagecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                            localElementDictionary.Add(XName.Get("term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        private class languagecodeLocalType
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                            private languagecodeLocalType()
                            {
                            }
                        }

                        private class termLocalType
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                            private termLocalType()
                            {
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (internationalcode+)
        /// </para>
        /// </summary>
        public partial class internationalcodesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<internationalcodeLocalType> internationalcodeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator internationalcodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<internationalcodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static internationalcodesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (internationalcode+)
            /// </para>
            /// </summary>
            public internationalcodesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Any internationally recognised code by which the substance can be identified shall be specified as applicable.
            ///
            ///Business Rules: AS.ICs.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (internationalcode+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.internationalcodesLocalType.internationalcodeLocalType> internationalcode
            {
                get
                {
                    if ((this.internationalcodeField == null))
                    {
                        this.internationalcodeField = new XTypedList<internationalcodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.internationalcodeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.internationalcodeField = null;
                    }
                    else
                    {
                        if ((this.internationalcodeField == null))
                        {
                            this.internationalcodeField = XTypedList<internationalcodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<internationalcodeLocalType>(this.internationalcodeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("internationalcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<internationalcodesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(internationalcodeLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcecode, referencetext)
            /// </para>
            /// </summary>
            public partial class internationalcodeLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator internationalcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<internationalcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static internationalcodeLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public internationalcodeLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// A valid reference source of the approved substance name shall be specified. 
                ///
                ///The Source code must have an attribute ‘Resolution Mode’ AS.IC.1..1. 
                ///
                ///Business Rules: AS.IC.1.BR
                ///
                ///Mandatory if the operation type for the substance is "Insert"  or Update.
                ///
                ///Optional for nullifcation operation.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public sourcecodeLocalType sourcecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((sourcecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The identifying name/code for the susbstance within the reference source system provided in AS.IC.1.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (sourcecode, referencetext)
                /// </para>
                /// </summary>
                public referencetextLocalType referencetext
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((referencetextLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("internationalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<internationalcodeLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sourcecodeLocalType));
                    localElementDictionary.Add(XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(referencetextLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class sourcecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator sourcecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public sourcecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (EV Code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("sourcecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<sourcecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                public partial class referencetextLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator referencetextLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencetextLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public referencetextLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code_text.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (EV Code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public System.Nullable<int> resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            if ((x == null))
                            {
                                return null;
                            }
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("referencetext", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<referencetextLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (previousevcode+)
        /// </para>
        /// </summary>
        public partial class previousevcodesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<previousevcodeLocalType> previousevcodeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator previousevcodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static previousevcodesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public previousevcodesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The previous EV Code section 
            ///
            ///This section shall be used when an approved substance shall be linked to the EVcode of a development substance.
            ///
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.previousevcodesLocalType.previousevcodeLocalType> previousevcode
            {
                get
                {
                    if ((this.previousevcodeField == null))
                    {
                        this.previousevcodeField = new XTypedList<previousevcodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.previousevcodeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.previousevcodeField = null;
                    }
                    else
                    {
                        if ((this.previousevcodeField == null))
                        {
                            this.previousevcodeField = XTypedList<previousevcodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<previousevcodeLocalType>(this.previousevcodeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<previousevcodesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(previousevcodeLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (devevcode)
            /// </para>
            /// </summary>
            public partial class previousevcodeLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator previousevcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static previousevcodeLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public previousevcodeLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field contains an EV Code of the same substance as it exists as a Development Substance in the EVMPD.
                ///
                ///Business Rules: AS.PEV.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public string devevcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "devevcode", devevcodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<previousevcodeLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class devevcodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private devevcodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substancessi+)
        /// </para>
        /// </summary>
        public partial class substancessisLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substancessiLocalType> substancessiField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substancessisLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancessisLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substancessisLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancessi+)
            /// </para>
            /// </summary>
            public substancessisLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substancessi+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.substancessisLocalType.substancessiLocalType> substancessi
            {
                get
                {
                    if ((this.substancessiField == null))
                    {
                        this.substancessiField = new XTypedList<substancessiLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substancessiField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substancessiField = null;
                    }
                    else
                    {
                        if ((this.substancessiField == null))
                        {
                            this.substancessiField = XTypedList<substancessiLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substancessiLocalType>(this.substancessiField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substancessis", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substancessisLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancessiLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substance)
            /// </para>
            /// </summary>
            public partial class substancessiLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancessiLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancessiLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancessiLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substance)
                /// </para>
                /// </summary>
                public substancessiLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substance)
                /// </para>
                /// </summary>
                public eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance substance
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        return ((eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substancessi", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancessiLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substanceattachment+)
        /// </para>
        /// </summary>
        public partial class substanceattachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substanceattachmentLocalType> substanceattachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substanceattachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceattachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substanceattachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substanceattachment+)
            /// </para>
            /// </summary>
            public substanceattachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The attachment section is used to reference an attachment.  The referenced attachment may be included as a file in the message or may reference an attachment that is already stored in the EVMPD
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substanceattachment+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType.substanceattachmentsLocalType.substanceattachmentLocalType> substanceattachment
            {
                get
                {
                    if ((this.substanceattachmentField == null))
                    {
                        this.substanceattachmentField = new XTypedList<substanceattachmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.substanceattachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substanceattachmentField = null;
                    }
                    else
                    {
                        if ((this.substanceattachmentField == null))
                        {
                            this.substanceattachmentField = XTypedList<substanceattachmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<substanceattachmentLocalType>(this.substanceattachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substanceattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substanceattachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substanceattachmentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachmentcode, validitydeclaration?)
            /// </para>
            /// </summary>
            public partial class substanceattachmentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substanceattachmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceattachmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substanceattachmentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public substanceattachmentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field references the attachment for this substance.  
                ///
                ///This element must have an attribute Resolution Mode (AS.ATT.1..1)
                ///
                ///Business Rules: AS.ATT.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public attachmentcodeLocalType attachmentcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((attachmentcodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// In performing an update of existing medicinal product information where an attachment for an approved substance was already previously loaded and referenced, a confirmation shall be provided that the referenced attachment is the latest version of the documentation.
                ///
                ///The value is 1 if the attachment is the latest version.
                ///
                ///Business Rules: AS.ATT.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public System.Nullable<int> validitydeclaration
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "validitydeclaration", validitydeclarationLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substanceattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substanceattachmentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentcodeLocalType));
                    localElementDictionary.Add(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class attachmentcodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator attachmentcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public attachmentcodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file).
                    ///
                    ///Resolution mode = 2 Global (EV Code of an attachment already present in the EVMPD). 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<attachmentcodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class validitydeclarationLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private validitydeclarationLocalType()
                    {
                    }
                }
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
    /// </para>
    /// </summary>
    public partial class atcType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator atcType(XElement xe) { return XTypedServices.ToXTypedElement<atcType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static atcType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("atccode_desc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public atcType()
        {
        }

        /// <summary>
        /// <para>
        /// 1: Development Term, 2: Proposed Term;3= Standard Term (EMA USE ONLY)
        ///
        ///Business Rules: ATC.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public int type_term
        {
            get
            {
                XElement x = this.GetElement(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "type_term", type_termLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This is the ATC Code
        ///
        ///Business Rules: ATC.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string atccode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "atccode", atccodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field identifies the Owner of the Development Entity. Only for operation type Insert and reserved for EMA use only.
        ///
        ///Business Rules: ATC.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The English Description of the Term
        ///
        ///Business Rules: ATC.4.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string atccode_desc
        {
            get
            {
                XElement x = this.GetElement(XName.Get("atccode_desc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("atccode_desc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "atccode_desc", atccode_descLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Format of the Version Date. Only accepted value is “102” for "CCYYMMDD”
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string versiondateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondateformat", versiondateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Date of last update of ATC Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string versiondate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondate", versiondateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This element can be used to put some comments in a section. It is mandatory when there is a request of nullification.
        ///
        ///Business Rules: ATC.7.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, atccode, newownerid?, atccode_desc?, versiondateformat?, versiondate?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 1=Insert; 2=Update; 4=Nullify
        ///
        ///Business Rules: ST.ATC..1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("atcType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<atcType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("atccode_desc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class type_termLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2,
                            3}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private type_termLocalType()
            {
            }
        }

        private class atccodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private atccodeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        private class atccode_descLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 200, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private atccode_descLocalType()
            {
            }
        }

        private class versiondateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "102"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateformatLocalType()
            {
            }
        }

        private class versiondateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
    /// </para>
    /// </summary>
    public partial class pharmaceuticalformType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator pharmaceuticalformType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalformType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static pharmaceuticalformType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("name_pharmform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public pharmaceuticalformType()
        {
        }

        /// <summary>
        /// <para>
        /// 1: Development Term, 2: Proposed Term;3= Standard Term (EMA USE ONLY)
        ///
        ///Business Rules: ST.PF.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public int type_term
        {
            get
            {
                XElement x = this.GetElement(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "type_term", type_termLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: ST.PF.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// EV_CODE of the Pharmaceutical Form. It's mandatory if the operation type is not an insert.
        ///
        ///Business Rules: ST.PF.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field identifies the Owner of the Development Entity. Only for operation type Insert and reserved for EMA Use only.
        ///
        ///Business Rules: ST.PF.4.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The English Description of a Term
        ///
        ///Business Rules: ST.PF.5.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string name_pharmform
        {
            get
            {
                XElement x = this.GetElement(XName.Get("name_pharmform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("name_pharmform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "name_pharmform", name_pharmformLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Format of the Version Date. Only accepted value is “102” for "CCYYMMDD”
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string versiondateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondateformat", versiondateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string versiondate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondate", versiondateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// For Development Term, this field is empty. For Proposed Term this field contains (if exist) the ev_code of the Previous Development Term. For Standard Term this field contains (if exist) the ev_code of the Previous Proposed Term.
        ///
        ///Business Rules: ST.PF.8.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string previous_ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "previous_ev_code", previous_ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This element can be used to put some comments in a section. It is mandatory when there is a request of nullification.
        ///
        ///Business Rules: ST.PF.9.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_pharmform, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 1=Insert; 2=Update; 4=Nullify
        ///
        ///Business Rules: ST.PF..1
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("pharmaceuticalformType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<pharmaceuticalformType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("name_pharmform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class type_termLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2,
                            3}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private type_termLocalType()
            {
            }
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        private class name_pharmformLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private name_pharmformLocalType()
            {
            }
        }

        private class versiondateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "102"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateformatLocalType()
            {
            }
        }

        private class versiondateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateLocalType()
            {
            }
        }

        private class previous_ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private previous_ev_codeLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
    /// </para>
    /// </summary>
    public partial class administrationrouteType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator administrationrouteType(XElement xe) { return XTypedServices.ToXTypedElement<administrationrouteType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static administrationrouteType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("name_admroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public administrationrouteType()
        {
        }

        /// <summary>
        /// <para>
        /// 1: Development Term, 2: Proposed Term;3= Standard Term (EMA USE ONLY)
        ///
        ///Business Rules: ST.AR.1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public int type_term
        {
            get
            {
                XElement x = this.GetElement(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "type_term", type_termLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: ST.AR.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// EV_CODE of Administration Route. It's mandatory if the operation type is not an insert.
        ///
        ///Business Rules: ST.AR.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Owner Identifier: This field identifies the Owner of a Development Entity. Reserved for EMA use only.
        ///
        ///Business Rules: ST.AR.4.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The English Description of a Term
        ///
        ///Business Rules: ST.AR.5.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string name_admroute
        {
            get
            {
                XElement x = this.GetElement(XName.Get("name_admroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("name_admroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "name_admroute", name_admrouteLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Format of the Version Date. Only accepted value is “102” for "CCYYMMDD”
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string versiondateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondateformat", versiondateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Date of last update of Administratiorn Route
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string versiondate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "versiondate", versiondateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// For Development Term, this field is empty. For Proposed Term this field contains (if exist) the ev_code of the Previous Development Term. For Standard Term this field contains (if exist) the ev_code of the Previous Proposed Term 
        ///
        ///Business Rules: ST.AR.8.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string previous_ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "previous_ev_code", previous_ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This element can be used to put some comments in a section. It is mandatory when there is a request of nullification.
        ///
        ///Business Rules: ST.AR.9.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type_term, localnumber?, ev_code?, newownerid?, name_admroute, versiondateformat?, versiondate?, previous_ev_code?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 1:Insert; 2=Update; 4=Nullify
        ///
        ///Business Rules: ST.AR..1.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("administrationrouteType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<administrationrouteType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("type_term", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("name_admroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("versiondate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("previous_ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class type_termLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1,
                            2,
                            3}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private type_termLocalType()
            {
            }
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        private class name_admrouteLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

            private name_admrouteLocalType()
            {
            }
        }

        private class versiondateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "102"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateformatLocalType()
            {
            }
        }

        private class versiondateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

            private versiondateLocalType()
            {
            }
        }

        private class previous_ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private previous_ev_codeLocalType()
            {
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
    /// </para>
    /// </summary>
    public partial class developmentproductType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator developmentproductType(XElement xe) { return XTypedServices.ToXTypedElement<developmentproductType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static developmentproductType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("developmentpresentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public developmentproductType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: DP.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// EV_CODE of Development Product. It's mandatory if the operation type is NOT an insert.
        ///
        ///Business Rules: DP.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field identifies the Owner of the Development Entity. Only for operation type Insert and reserved for EMA use only.
        ///
        ///Business Rules: DP.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Sender Local Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string senderlocalcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "senderlocalcode", senderlocalcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The code of the sponsor shall be specified.
        ///
        ///The sponsor code shall have an attribute ‘Resolution Mode’:
        ///
        ///Resolution mode 1 when the code is a Local Number (organisation is present in the current message)
        ///
        ///Resolution mode 2 when the code is an EV Code where the organisation is already present in the EVMPD
        ///
        ///Business Rules: DP.5.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public sponsorcodeLocalType sponsorcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((sponsorcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains all the information on the product presentation.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public developmentpresentationnameLocalType developmentpresentationname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("developmentpresentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((developmentpresentationnameLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("developmentpresentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information on the ATC code(s) for the product.
        ///
        ///Business Rules: DP.ATCs.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productatcsLocalType productatcs
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((productatcsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about the indications of a Medicinal Product, according to different MEDDRA's versions.
        ///
        ///Business Rules: DP.Inds.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productindicationsLocalType productindications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((productindicationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about every formulation in a Medicinal Product. (Some Medicinal Products are several formulations in the same presentation).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public pharmaceuticalproductsLocalType pharmaceuticalproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((pharmaceuticalproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public ppiattachmentsLocalType ppiattachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((ppiattachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This element can be used to put some comments in a section. It is mandatory when there is a request of nullification
        ///
        ///Business Rules: DP.7.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, senderlocalcode?, sponsorcode, developmentpresentationname, productatcs?, productindications?, pharmaceuticalproducts, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity.
        ///
        ///1 = Insert 2 = Update 4 = Nullify 5 = Change Ownership (EMA USE ONLY)
        ///
        ///Business Rules: DP..1.BR
        ///
        ///				
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("developmentproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<developmentproductType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(sponsorcodeLocalType));
            localElementDictionary.Add(XName.Get("developmentpresentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(developmentpresentationnameLocalType));
            localElementDictionary.Add(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productatcsLocalType));
            localElementDictionary.Add(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productindicationsLocalType));
            localElementDictionary.Add(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalproductsLocalType));
            localElementDictionary.Add(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(ppiattachmentsLocalType));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        private class senderlocalcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private senderlocalcodeLocalType()
            {
            }
        }

        public partial class sponsorcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator sponsorcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sponsorcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public sponsorcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 1 = Local Number ; 2 = EV_Code
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("sponsorcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sponsorcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productcode?, productname?, productothername?)
        /// </para>
        /// </summary>
        public partial class developmentpresentationnameLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator developmentpresentationnameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<developmentpresentationnameLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static developmentpresentationnameLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productothername", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productcode?, productname?, productothername?)
            /// </para>
            /// </summary>
            public developmentpresentationnameLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The code of the development product if available.
            ///
            ///Business Rules: DP.6.1.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productcode?, productname?, productothername?)
            /// </para>
            /// </summary>
            public string productcode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productcode", productcodeLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The name of the development product if available.
            ///
            ///Business Rules: DP.6.2.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productcode?, productname?, productothername?)
            /// </para>
            /// </summary>
            public string productname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productname", productnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Other descriptive name.
            ///
            ///Business Rules: DP.6.3.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productcode?, productname?, productothername?)
            /// </para>
            /// </summary>
            public string productothername
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productothername", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productothername", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productothername", productothernameLocalType.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("developmentpresentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<developmentpresentationnameLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productothername", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class productcodeLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productcodeLocalType()
                {
                }
            }

            private class productnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productnameLocalType()
                {
                }
            }

            private class productothernameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productothernameLocalType()
                {
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productatc+)
        /// </para>
        /// </summary>
        public partial class productatcsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productatcLocalType> productatcField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productatcsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productatcsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public productatcsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information on the ATC code(s) for the product.
            ///
            ///			Business Rules: DP.ATCs.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentproductType.productatcsLocalType.productatcLocalType> productatc
            {
                get
                {
                    if ((this.productatcField == null))
                    {
                        this.productatcField = new XTypedList<productatcLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.productatcField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productatcField = null;
                    }
                    else
                    {
                        if ((this.productatcField == null))
                        {
                            this.productatcField = XTypedList<productatcLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<productatcLocalType>(this.productatcField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productatcsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productatcLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atccode)
            /// </para>
            /// </summary>
            public partial class productatcLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productatcLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productatcLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public productatcLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The ATC code of the product. The ATC code must have an attribute: Resolution Mode.
                ///
                ///			Business Rules DP.ATC.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public atccodeLocalType atccode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((atccodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productatcLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(atccodeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class atccodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator atccodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<atccodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public atccodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Foreign key present in the XML file)
                    ///
                    ///			Resolution mode = 2 Global (EV Code present in the Eudravigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<atccodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productindication+)
        /// </para>
        /// </summary>
        public partial class productindicationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productindicationLocalType> productindicationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productindicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productindicationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public productindicationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about the indications of a Medicinal Product, according to different MEDDRA's versions
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentproductType.productindicationsLocalType.productindicationLocalType> productindication
            {
                get
                {
                    if ((this.productindicationField == null))
                    {
                        this.productindicationField = new XTypedList<productindicationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.productindicationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productindicationField = null;
                    }
                    else
                    {
                        if ((this.productindicationField == null))
                        {
                            this.productindicationField = XTypedList<productindicationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<productindicationLocalType>(this.productindicationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productindicationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productindicationLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (meddraversion, meddralevel, meddracode)
            /// </para>
            /// </summary>
            public partial class productindicationLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productindicationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productindicationLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public productindicationLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The MedDRA's version that the Drug Indication MedDRA code refers to (13.0, 13.1, 14.0 etc).
                ///
                ///Business Rules: DP.Ind.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public decimal meddraversion
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddraversion", meddraversionLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field indicates the level of Drug Indication in the MEDDRA's version.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public string meddralevel
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddralevel", meddralevelLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field indicates the MEDDRA code that specifies the Drug Indication as defined in the referenced MEDDRA version.
                ///
                ///Business Rules: DP.Ind.3_BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public int meddracode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddracode", meddracodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productindicationLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class meddraversionLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 1, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));

                    private meddraversionLocalType()
                    {
                    }
                }

                private class meddralevelLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                    "SOC",
                                    "HLGT",
                                    "HLT",
                                    "PT",
                                    "LLT",
                                    "soc",
                                    "hlgt",
                                    "hlt",
                                    "pt",
                                    "llt"}, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private meddralevelLocalType()
                    {
                    }
                }

                private class meddracodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));

                    private meddracodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (pharmaceuticalproduct+)
        /// </para>
        /// </summary>
        public partial class pharmaceuticalproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<pharmaceuticalproductType> pharmaceuticalproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator pharmaceuticalproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static pharmaceuticalproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public pharmaceuticalproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about each formulation in a Medicinal Product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public IList<pharmaceuticalproductType> pharmaceuticalproduct
            {
                get
                {
                    if ((this.pharmaceuticalproductField == null))
                    {
                        this.pharmaceuticalproductField = new XTypedList<pharmaceuticalproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.pharmaceuticalproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.pharmaceuticalproductField = null;
                    }
                    else
                    {
                        if ((this.pharmaceuticalproductField == null))
                        {
                            this.pharmaceuticalproductField = XTypedList<pharmaceuticalproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<pharmaceuticalproductType>(this.pharmaceuticalproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<pharmaceuticalproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ppiattachment+)
        /// </para>
        /// </summary>
        public partial class ppiattachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ppiattachmentLocalType> ppiattachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ppiattachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ppiattachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public ppiattachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The Printed Product Information document in a specific language for the product either bundled along with the product message or referring to an existing document within EVMPD. The PPI must contain various annexes relating to the product  
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentproductType.ppiattachmentsLocalType.ppiattachmentLocalType> ppiattachment
            {
                get
                {
                    if ((this.ppiattachmentField == null))
                    {
                        this.ppiattachmentField = new XTypedList<ppiattachmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.ppiattachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.ppiattachmentField = null;
                    }
                    else
                    {
                        if ((this.ppiattachmentField == null))
                        {
                            this.ppiattachmentField = XTypedList<ppiattachmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<ppiattachmentLocalType>(this.ppiattachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ppiattachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(ppiattachmentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachmentcode, validitydeclaration?)
            /// </para>
            /// </summary>
            public partial class ppiattachmentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ppiattachmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ppiattachmentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public ppiattachmentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field references the attachment for this product.  This will be local reference number relevant to sender organisation if it is an insert operation, otherwise it will be ev code of the attachement.  This element must have an attribute: Resolution Mode.Resolution mode = 1 Local (Local Number present in the XML file) Resolution mode = 2 Global (ev_code of the attachment present in the EudraVigilance Lookup Tables. The pattern of the ev_code is 'ATT999999' )
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public attachmentcodeLocalType attachmentcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((attachmentcodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// This must be set to 1 if an updated product PPI references a PPI previously loaded in the EVMPD (references a remote look up value).
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public System.Nullable<int> validitydeclaration
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "validitydeclaration", validitydeclarationLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ppiattachmentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentcodeLocalType));
                    localElementDictionary.Add(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class attachmentcodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator attachmentcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public attachmentcodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 1=Local Number2=EV_Code Issue:  DCM version says;The details of the attachment for the approved substance shall be specified. 
                    ///
                    ///					
                    ///
                    ///					•	Resolution mode 1 when the code is a Local Number; this is mandatory if the operation type is NOT “Insert”.
                    ///
                    ///					
                    ///
                    ///					•	Resolution mode 2 when the code is an ev_code; this is mandatory if the operation type is NOT “Insert”.   Suggested IT version;  The resolution mode is 1 if a new attachment is included in the message and this is to be used or 2 if the reference is an existing EV_Code
                    ///
                    ///					
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<attachmentcodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class validitydeclarationLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private validitydeclarationLocalType()
                    {
                    }
                }
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
    /// </para>
    /// </summary>
    public partial class authorisedproductType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator authorisedproductType(XElement xe) { return XTypedServices.ToXTypedElement<authorisedproductType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static authorisedproductType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mahcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("qppvcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mflcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("enquiryemail", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("enquiryphone", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("infodateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("infodate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("presentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public authorisedproductType()
        {
        }

        /// <summary>
        /// <para>
        /// The unique reference for the entity in the message. It's mandatory for Operation Type Insert.
        ///
        ///Business Rules: AP.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string localnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "localnumber", localnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// EV_Code of the Authorised Medicinal Product. It's mandatory if the operation type is NOT an insert.
        ///
        ///Business Rules: AP.2.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string ev_code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "ev_code", ev_codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This field identifies the new Owner of the Authorised Product. The field is reserved for EMA use only
        ///
        ///Business Rules: AP.3.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string newownerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "newownerid", newowneridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The MAH code of the Marketing Authorisation Holder as reported in the application of the product. This element must have an attribute: Resolution Mode.
        ///
        ///Business Rules: AP.4.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public mahcodeLocalType mahcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mahcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((mahcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mahcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The EV Registration System QPPV code assigned to the QPPV detailed in the Pharmacovigilance System Master File in place for the product. Format of this code is USRnnnn
        ///
        ///Business Rules: AP.5.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public qppvcodeLocalType qppvcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("qppvcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((qppvcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("qppvcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The code of the PharmacoVigilance System Master File Location.  Must have an attribute; resolutionmode.
        ///
        ///Business Rules: AP.6.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public mflcodeLocalType mflcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mflcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((mflcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mflcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// The Pharmacovigilance Enquiry email address shall be specified.
        ///
        ///Business Rules: AP.7.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string enquiryemail
        {
            get
            {
                XElement x = this.GetElement(XName.Get("enquiryemail", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("enquiryemail", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "enquiryemail", enquiryemailLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The Pharmacovigilance Enquiry telephone number shall be specified.
        ///
        ///Business Rules: AP.8.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string enquiryphone
        {
            get
            {
                XElement x = this.GetElement(XName.Get("enquiryphone", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("enquiryphone", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "enquiryphone", enquiryphoneLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Sender Local Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string senderlocalcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "senderlocalcode", senderlocalcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The format of the Info Date. The only value accepted is "102" corresponding to "CCYYMMDD"
        ///
        ///Business Rules: AP.10.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string infodateformat
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infodateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infodateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "infodateformat", infodateformatLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Date of the most recent update to the Summary Product Characteristics (SPC). The format must conform to "CCYYMMDD"
        ///
        ///Business Rules: AP.11.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string infodate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infodate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infodate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "infodate", infodateLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains all the information on the product authorisation.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public authorisationLocalType authorisation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("authorisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((authorisationLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("authorisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains all the information on the product presentation.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public presentationnameLocalType presentationname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("presentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((presentationnameLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("presentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information on the ATC code(s) approved for the product.
        ///
        ///Business Rules: AT.ATCs.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productatcsLocalType productatcs
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((productatcsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about all of the indications of a Medicinal Product, according to different MEDDRA's versions.
        ///
        ///Business Rules: AP.INDs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public productindicationsLocalType productindications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((productindicationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public pharmaceuticalproductsLocalType pharmaceuticalproducts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((pharmaceuticalproductsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section is used to reference all development products that are the same as the approved product.
        ///
        ///Business Rules: AP.PEVs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public previousevcodesLocalType previousevcodes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((previousevcodesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Container for the Printed Product Information documents for the product.
        ///
        ///Business Rules: AP.PPIs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public ppiattachmentsLocalType ppiattachments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((ppiattachmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This element can be used to put some comments in a section.
        ///
        ///Business Rules: AP.14.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (localnumber?, ev_code?, newownerid?, mahcode, qppvcode?, mflcode?, enquiryemail?, enquiryphone?, senderlocalcode?, infodateformat?, infodate?, authorisation, presentationname, productatcs, productindications?, pharmaceuticalproducts, previousevcodes?, ppiattachments?, comments?)
        /// </para>
        /// </summary>
        public string comments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "comments", commentsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// The type of the operation for this entity.
        ///
        ///1 = Insert 2 = Update 3 = Variation 4 = Nullify 5 = Change Ownership (EMA USE ONLY)  6 = Withdrawn
        ///
        ///Business Rules: AP..1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int operationtype
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("operationtype", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("operationtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("authorisedproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<authorisedproductType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("localnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("ev_code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("newownerid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("mahcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(mahcodeLocalType));
            localElementDictionary.Add(XName.Get("qppvcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(qppvcodeLocalType));
            localElementDictionary.Add(XName.Get("mflcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(mflcodeLocalType));
            localElementDictionary.Add(XName.Get("enquiryemail", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("enquiryphone", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("senderlocalcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("infodateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("infodate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            localElementDictionary.Add(XName.Get("authorisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(authorisationLocalType));
            localElementDictionary.Add(XName.Get("presentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(presentationnameLocalType));
            localElementDictionary.Add(XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productatcsLocalType));
            localElementDictionary.Add(XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productindicationsLocalType));
            localElementDictionary.Add(XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalproductsLocalType));
            localElementDictionary.Add(XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(previousevcodesLocalType));
            localElementDictionary.Add(XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(ppiattachmentsLocalType));
            localElementDictionary.Add(XName.Get("comments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class localnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private localnumberLocalType()
            {
            }
        }

        private class ev_codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private ev_codeLocalType()
            {
            }
        }

        private class newowneridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private newowneridLocalType()
            {
            }
        }

        public partial class mahcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator mahcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mahcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public mahcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///
            ///Resolution mode = 1 Local (Local Number present in the XML file).
            ///
            ///Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("mahcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<mahcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class qppvcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator qppvcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<qppvcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public qppvcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("qppvcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<qppvcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class mflcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator mflcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mflcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public mflcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Resolution mode = 1 Local (Local Number present in the XML file).
            ///
            ///Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables) - The format of stored master files location codes is MFLxxxxxx.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("mflcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<mflcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        private class enquiryemailLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private enquiryemailLocalType()
            {
            }
        }

        private class enquiryphoneLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private enquiryphoneLocalType()
            {
            }
        }

        private class senderlocalcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private senderlocalcodeLocalType()
            {
            }
        }

        private class infodateformatLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                            "102"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infodateformatLocalType()
            {
            }
        }

        private class infodateLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                            "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

            private infodateLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
        /// </para>
        /// </summary>
        public partial class authorisationLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator authorisationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authorisationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static authorisationLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authorisationcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisationprocedure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisationstatus", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisationnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisationdate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("authorisationdateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("mrpnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("eunumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("orphandrug", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("intensivemonitoring", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("withdrawndateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("withdrawndate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public authorisationLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Country code of the country in which the product has been authorised
            ///
            ///Business Rules: AP.12.1.BR
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationcountrycode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationcountrycode", authorisationcountrycodeLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The procedure the product has followed to be authorised. Must be the code specified in the published list
            ///
            ///Business Rules: AP.12.2.BR
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public int authorisationprocedure
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationprocedure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationprocedure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationprocedure", authorisationprocedureLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Marketing authorisation status must be a value from the published list
            ///
            ///Business Rules: AP.12.3.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> authorisationstatus
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationstatus", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationstatus", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationstatus", authorisationstatusLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Marketing authorisation number
            ///
            ///Business Rules: AP.12.4.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationnumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationnumber", authorisationnumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Marketing authorisation Date
            ///
            ///Business Rules: AP.12.5.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationdate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationdate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationdate", authorisationdateLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Marketing authorisation Date Format must be either "102" corresponding to "CCYYMMDD" or "610" corresponding to "CCYYMM"
            ///
            ///Business Rules: AP.12.6.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string authorisationdateformat
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("authorisationdateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("authorisationdateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "authorisationdateformat", authorisationdateformatLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// If the authorisation procedure is "EU mutual recognition procedure" this field must be filled with the Mutual Recognition Procedure Number of the product.
            ///
            ///If the authorisation procedure is "EU decentralised procedure" this field must be filled with the EU Decentralised procedure number of the product.
            ///
            ///Business Rules: AP.12.7.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string mrpnumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("mrpnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("mrpnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "mrpnumber", mrpnumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// If the authorisation procedure is one of the EU centralised procedures (CAPs) this field must be filled with the "EU Number of the product"
            ///
            ///Business Rules: AP.12.8.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string eunumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("eunumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("eunumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "eunumber", eunumberLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Value 1 indicates that the product is an orphan drug.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> orphandrug
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("orphandrug", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("orphandrug", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "orphandrug", orphandrugLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Indicates if the product is the subject of Intensive Monitoring.
            ///
            ///A value of 1 indicates that the product is subject to intensive monitoring.
            ///
            ///A value of 2 indicates that the product is NOT subject to intensive monitoring.
            ///
            ///Business Rules: AP.12.10.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public System.Nullable<int> intensivemonitoring
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("intensivemonitoring", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("intensivemonitoring", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "intensivemonitoring", intensivemonitoringLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The format of the WithdrawnDate.
            ///
            ///The only value accepted is "102" corresponding at "CCYYMMDD"
            ///
            ///Business Rules: AP.12.12.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string withdrawndateformat
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("withdrawndateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("withdrawndateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "withdrawndateformat", withdrawndateformatLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            ///  Date from which the Medicinal Product is withdrawn.
            ///
            ///Business Rules: AP.12.12.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (authorisationcountrycode, authorisationprocedure, authorisationstatus?, authorisationnumber?, authorisationdate?, authorisationdateformat?, mrpnumber?, eunumber?, orphandrug?, intensivemonitoring?, withdrawndateformat?, withdrawndate?)
            /// </para>
            /// </summary>
            public string withdrawndate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("withdrawndate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("withdrawndate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "withdrawndate", withdrawndateLocalType.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("authorisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<authorisationLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("authorisationcountrycode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationprocedure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                localElementDictionary.Add(XName.Get("authorisationstatus", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                localElementDictionary.Add(XName.Get("authorisationnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationdate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("authorisationdateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("mrpnumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("eunumber", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("orphandrug", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                localElementDictionary.Add(XName.Get("intensivemonitoring", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                localElementDictionary.Add(XName.Get("withdrawndateformat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("withdrawndate", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class authorisationcountrycodeLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                private authorisationcountrycodeLocalType()
                {
                }
            }

            private class authorisationprocedureLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null);

                private authorisationprocedureLocalType()
                {
                }
            }

            private class authorisationstatusLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));

                private authorisationstatusLocalType()
                {
                }
            }

            private class authorisationnumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationnumberLocalType()
                {
                }
            }

            private class authorisationdateLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                                "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationdateLocalType()
                {
                }
            }

            private class authorisationdateformatLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                "102",
                                "610",
                                ""}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private authorisationdateformatLocalType()
                {
                }
            }

            private class mrpnumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private mrpnumberLocalType()
                {
                }
            }

            private class eunumberLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private eunumberLocalType()
                {
                }
            }

            private class orphandrugLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                1,
                                2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                private orphandrugLocalType()
                {
                }
            }

            private class intensivemonitoringLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                1,
                                2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                private intensivemonitoringLocalType()
                {
                }
            }

            private class withdrawndateformatLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                                "102"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private withdrawndateformatLocalType()
                {
                }
            }

            private class withdrawndateLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 14, null, null, 0, new string[] {
                                "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));

                private withdrawndateLocalType()
                {
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
        /// </para>
        /// </summary>
        public partial class presentationnameLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator presentationnameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<presentationnameLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static presentationnameLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productshortname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productgenericname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productcompanyname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productstrength", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("productform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("packagedesc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public presentationnameLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// The "Full Presentation Name" of the product as it has been authorised.
            ///
            ///Business Rules: AP.13.1.BR
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productname", productnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The short name of the product as reported in the "Full Presentation Name".
            ///
            ///Business Rules: AP.13.2.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productshortname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productshortname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productshortname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productshortname", productshortnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The generic name (if present) as part of the "Full Presentation Name".
            ///
            ///Business Rules: AP.13.3.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productgenericname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productgenericname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productgenericname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productgenericname", productgenericnameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The  name of company/trademark/manufacturer (if present) as part of the "Full Presentation Name".
            ///
            ///Business Rules: AP.13.4.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productcompanyname
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productcompanyname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productcompanyname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productcompanyname", productcompanynameLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The strength and strength unit (if present) as part of the "Full Presentation Name".
            ///
            ///Business Rules: AP.13.5.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productstrength
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productstrength", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productstrength", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productstrength", productstrengthLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// The pharmaceutical form (if present) as part of the "Full Presentation Name".
            ///
            ///Business Rules: AP.13.6.BR.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string productform
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("productform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("productform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "productform", productformLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// This field contains information about the package of the Medicinal Product. It is Mandatory when operation type is NOT a nullification
            ///
            ///Business Rules: AP.13.7.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (productname, productshortname?, productgenericname?, productcompanyname?, productstrength?, productform?, packagedesc?)
            /// </para>
            /// </summary>
            public string packagedesc
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("packagedesc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("packagedesc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "packagedesc", packagedescLocalType.TypeDefinition);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("presentationname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<presentationnameLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productshortname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productgenericname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productcompanyname", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productstrength", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("productform", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                localElementDictionary.Add(XName.Get("packagedesc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class productnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                private productnameLocalType()
                {
                }
            }

            private class productshortnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productshortnameLocalType()
                {
                }
            }

            private class productgenericnameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 1000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productgenericnameLocalType()
                {
                }
            }

            private class productcompanynameLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productcompanynameLocalType()
                {
                }
            }

            private class productstrengthLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productstrengthLocalType()
                {
                }
            }

            private class productformLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private productformLocalType()
                {
                }
            }

            private class packagedescLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private packagedescLocalType()
                {
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productatc+)
        /// </para>
        /// </summary>
        public partial class productatcsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productatcLocalType> productatcField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productatcsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productatcsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public productatcsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productatc+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.authorisedproductType.productatcsLocalType.productatcLocalType> productatc
            {
                get
                {
                    if ((this.productatcField == null))
                    {
                        this.productatcField = new XTypedList<productatcLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.productatcField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productatcField = null;
                    }
                    else
                    {
                        if ((this.productatcField == null))
                        {
                            this.productatcField = XTypedList<productatcLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<productatcLocalType>(this.productatcField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productatcs", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productatcsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productatcLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atccode)
            /// </para>
            /// </summary>
            public partial class productatcLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productatcLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productatcLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productatcLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public productatcLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The ATC code of the product. The ATC code must have an attribute: Resolution Mode.
                ///
                ///Business Rules: AP.ATC.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (atccode)
                /// </para>
                /// </summary>
                public atccodeLocalType atccode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((atccodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productatc", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productatcLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(atccodeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class atccodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator atccodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<atccodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public atccodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Foreign key present in the XML file)
                    ///
                    ///Resolution mode = 2 Global (ev_code present in the Eudravigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("atccode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<atccodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (productindication+)
        /// </para>
        /// </summary>
        public partial class productindicationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<productindicationLocalType> productindicationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator productindicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static productindicationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public productindicationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about each indication of a Medicinal Product, according to different MEDDRA's versions
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (productindication+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.authorisedproductType.productindicationsLocalType.productindicationLocalType> productindication
            {
                get
                {
                    if ((this.productindicationField == null))
                    {
                        this.productindicationField = new XTypedList<productindicationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.productindicationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.productindicationField = null;
                    }
                    else
                    {
                        if ((this.productindicationField == null))
                        {
                            this.productindicationField = XTypedList<productindicationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<productindicationLocalType>(this.productindicationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("productindications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<productindicationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(productindicationLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (meddraversion, meddralevel, meddracode)
            /// </para>
            /// </summary>
            public partial class productindicationLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator productindicationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productindicationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static productindicationLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public productindicationLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The MedDRA's version that the Drug Indication MedDRA code refers to (e.g. 13.0, 13.1, 14.0 etc)
                ///
                ///Business Rules: AP.IND.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public decimal meddraversion
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddraversion", meddraversionLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field says the level of Drug Indication in the MEDDRA's version.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public string meddralevel
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddralevel", meddralevelLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// This field details the code of MEDDRA that specifies the Drug Indication in the MEDDRA's version.
                ///
                ///Business Rules: AP.IND.3.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (meddraversion, meddralevel, meddracode)
                /// </para>
                /// </summary>
                public int meddracode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "meddracode", meddracodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("productindication", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<productindicationLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("meddraversion", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("meddralevel", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("meddracode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class meddraversionLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 1, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));

                    private meddraversionLocalType()
                    {
                    }
                }

                private class meddralevelLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                                    "SOC",
                                    "HLGT",
                                    "HLT",
                                    "PT",
                                    "LLT",
                                    "soc",
                                    "hlgt",
                                    "hlt",
                                    "pt",
                                    "llt"}, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private meddralevelLocalType()
                    {
                    }
                }

                private class meddracodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));

                    private meddracodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (pharmaceuticalproduct+)
        /// </para>
        /// </summary>
        public partial class pharmaceuticalproductsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<pharmaceuticalproductType> pharmaceuticalproductField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator pharmaceuticalproductsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalproductsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static pharmaceuticalproductsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public pharmaceuticalproductsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about every formulation in a Medicinal Product. (Some Medicinal Products are several formulations in the same presentation).
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (pharmaceuticalproduct+)
            /// </para>
            /// </summary>
            public IList<pharmaceuticalproductType> pharmaceuticalproduct
            {
                get
                {
                    if ((this.pharmaceuticalproductField == null))
                    {
                        this.pharmaceuticalproductField = new XTypedList<pharmaceuticalproductType>(this, LinqToXsdTypeManager.Instance, XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.pharmaceuticalproductField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.pharmaceuticalproductField = null;
                    }
                    else
                    {
                        if ((this.pharmaceuticalproductField == null))
                        {
                            this.pharmaceuticalproductField = XTypedList<pharmaceuticalproductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<pharmaceuticalproductType>(this.pharmaceuticalproductField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("pharmaceuticalproducts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<pharmaceuticalproductsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("pharmaceuticalproduct", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmaceuticalproductType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (previousevcode+)
        /// </para>
        /// </summary>
        public partial class previousevcodesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<previousevcodeLocalType> previousevcodeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator previousevcodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static previousevcodesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public previousevcodesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (previousevcode+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.authorisedproductType.previousevcodesLocalType.previousevcodeLocalType> previousevcode
            {
                get
                {
                    if ((this.previousevcodeField == null))
                    {
                        this.previousevcodeField = new XTypedList<previousevcodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.previousevcodeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.previousevcodeField = null;
                    }
                    else
                    {
                        if ((this.previousevcodeField == null))
                        {
                            this.previousevcodeField = XTypedList<previousevcodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<previousevcodeLocalType>(this.previousevcodeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("previousevcodes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<previousevcodesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(previousevcodeLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (devevcode)
            /// </para>
            /// </summary>
            public partial class previousevcodeLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator previousevcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<previousevcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static previousevcodeLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public previousevcodeLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field contains (if exist) the ev_code of the previous development product it refers to.
                ///
                ///Business Rules: AP.PEV.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (devevcode)
                /// </para>
                /// </summary>
                public string devevcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "devevcode", devevcodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("previousevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<previousevcodeLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("devevcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class devevcodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private devevcodeLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ppiattachment+)
        /// </para>
        /// </summary>
        public partial class ppiattachmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ppiattachmentLocalType> ppiattachmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ppiattachmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ppiattachmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public ppiattachmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Contains details for each individual Printed Product Information document in a specific language for the product. Each PPI must contain various annexes relating to the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ppiattachment+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.authorisedproductType.ppiattachmentsLocalType.ppiattachmentLocalType> ppiattachment
            {
                get
                {
                    if ((this.ppiattachmentField == null))
                    {
                        this.ppiattachmentField = new XTypedList<ppiattachmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.ppiattachmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.ppiattachmentField = null;
                    }
                    else
                    {
                        if ((this.ppiattachmentField == null))
                        {
                            this.ppiattachmentField = XTypedList<ppiattachmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<ppiattachmentLocalType>(this.ppiattachmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ppiattachments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ppiattachmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(ppiattachmentLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (attachmentcode, validitydeclaration?)
            /// </para>
            /// </summary>
            public partial class ppiattachmentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ppiattachmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppiattachmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ppiattachmentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public ppiattachmentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This field references the attachment for this product.  This element must have an attribute: Resolution Mode.
                ///
                ///Business Rules: AP.PPI.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public attachmentcodeLocalType attachmentcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((attachmentcodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// This must be set to 1 (valid) if an updated product PPI references a PPI previously loaded in the EVMPD (AP.PPI.1..1 = 2).
                ///
                ///Business Rules: AP.PPI.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (attachmentcode, validitydeclaration?)
                /// </para>
                /// </summary>
                public System.Nullable<int> validitydeclaration
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "validitydeclaration", validitydeclarationLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ppiattachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ppiattachmentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(attachmentcodeLocalType));
                    localElementDictionary.Add(XName.Get("validitydeclaration", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class attachmentcodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator attachmentcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public attachmentcodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// 
                    ///
                    ///Resolution mode = 1 Local (Local Number present in the XML file).
                    ///
                    ///Resolution mode = 2 Global (ev_code of the attachment present in the EudraVigilance Lookup Tables. The pattern of the ev_code is 'ATT999999' )
                    ///
                    ///								
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("attachmentcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<attachmentcodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class validitydeclarationLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private validitydeclarationLocalType()
                    {
                    }
                }
            }
        }

        private class commentsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentsLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
    /// </para>
    /// </summary>
    public partial class pharmaceuticalproductType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator pharmaceuticalproductType(XElement xe) { return XTypedServices.ToXTypedElement<pharmaceuticalproductType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static pharmaceuticalproductType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("pharmformcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("adminroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("activeingredients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("excipients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("adjuvants", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("medicaldevices", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public pharmaceuticalproductType()
        {
        }

        /// <summary>
        /// <para>
        /// The pharmaceutical form of the product. The pharmaceutical form must have an attribute: Resolution Mode.
        ///
        ///Business Rules: AllProducts.PP.1.BR.1
        ///
        ///Business Rules: AuthProducts.PP.1.BR.1
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public pharmformcodeLocalType pharmformcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("pharmformcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((pharmformcodeLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("pharmformcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information on all of the administration route(s) of the product. 
        ///
        ///Business Rules: AllProducts.PP.ARs.BR.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public adminroutesLocalType adminroutes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("adminroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((adminroutesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("adminroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about all of the active ingredients present in the product. 
        ///
        ///Business Rules: AllProducts.PP.ACTs.BR.	
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public activeingredientsLocalType activeingredients
        {
            get
            {
                XElement x = this.GetElement(XName.Get("activeingredients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((activeingredientsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("activeingredients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about the excipients present in the product. 
        ///
        ///Business Rules: AllProducts.PP.EXCs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public excipientsLocalType excipients
        {
            get
            {
                XElement x = this.GetElement(XName.Get("excipients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((excipientsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("excipients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about all of the adjuvant ingredients present in the product. 
        ///
        ///Business Rules: AllProducts.PP.ADJs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public adjuvantsLocalType adjuvants
        {
            get
            {
                XElement x = this.GetElement(XName.Get("adjuvants", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((adjuvantsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("adjuvants", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        /// <summary>
        /// <para>
        /// This section contains information about all of the medical devices present in the product. 
        ///
        ///Business Rules: AllProducts.PP.MDs.BR.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pharmformcode, adminroutes, activeingredients, excipients?, adjuvants?, medicaldevices?)
        /// </para>
        /// </summary>
        public medicaldevicesLocalType medicaldevices
        {
            get
            {
                XElement x = this.GetElement(XName.Get("medicaldevices", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                return ((medicaldevicesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("medicaldevices", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("pharmaceuticalproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<pharmaceuticalproductType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("pharmformcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(pharmformcodeLocalType));
            localElementDictionary.Add(XName.Get("adminroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(adminroutesLocalType));
            localElementDictionary.Add(XName.Get("activeingredients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(activeingredientsLocalType));
            localElementDictionary.Add(XName.Get("excipients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(excipientsLocalType));
            localElementDictionary.Add(XName.Get("adjuvants", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(adjuvantsLocalType));
            localElementDictionary.Add(XName.Get("medicaldevices", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(medicaldevicesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        public partial class pharmformcodeLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator pharmformcodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<pharmformcodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public pharmformcodeLocalType()
            {
            }

            public string TypedValue
            {
                get
                {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Resolution mode = 1 Local (Local Number present in the XML file) Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int resolutionmode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("pharmformcode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<pharmformcodeLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (adminroute+)
        /// </para>
        /// </summary>
        public partial class adminroutesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<adminrouteLocalType> adminrouteField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator adminroutesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminroutesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static adminroutesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adminroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adminroute+)
            /// </para>
            /// </summary>
            public adminroutesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information each administration route of the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (adminroute+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType.adminroutesLocalType.adminrouteLocalType> adminroute
            {
                get
                {
                    if ((this.adminrouteField == null))
                    {
                        this.adminrouteField = new XTypedList<adminrouteLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("adminroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.adminrouteField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.adminrouteField = null;
                    }
                    else
                    {
                        if ((this.adminrouteField == null))
                        {
                            this.adminrouteField = XTypedList<adminrouteLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("adminroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<adminrouteLocalType>(this.adminrouteField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("adminroutes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<adminroutesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("adminroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(adminrouteLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adminroutecode)
            /// </para>
            /// </summary>
            public partial class adminrouteLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator adminrouteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminrouteLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static adminrouteLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adminroutecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (adminroutecode)
                /// </para>
                /// </summary>
                public adminrouteLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The Administration Route form of the product. The administration route must have an attribute: Resolution Mode.
                ///
                ///Business Rules: AllProducts.PP.AR.1.BR.
                ///
                ///			Business Rules: AuthProducts.PP.AR.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (adminroutecode)
                /// </para>
                /// </summary>
                public adminroutecodeLocalType adminroutecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("adminroutecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((adminroutecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("adminroutecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("adminroute", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<adminrouteLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("adminroutecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(adminroutecodeLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class adminroutecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator adminroutecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adminroutecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public adminroutecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///			Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("adminroutecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<adminroutecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (activeingredient+)
        /// </para>
        /// </summary>
        public partial class activeingredientsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<activeingredientLocalType> activeingredientField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator activeingredientsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activeingredientsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static activeingredientsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("activeingredient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (activeingredient+)
            /// </para>
            /// </summary>
            public activeingredientsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about an individual active ingredient present in the product. 
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (activeingredient+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType.activeingredientsLocalType.activeingredientLocalType> activeingredient
            {
                get
                {
                    if ((this.activeingredientField == null))
                    {
                        this.activeingredientField = new XTypedList<activeingredientLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("activeingredient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.activeingredientField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.activeingredientField = null;
                    }
                    else
                    {
                        if ((this.activeingredientField == null))
                        {
                            this.activeingredientField = XTypedList<activeingredientLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("activeingredient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<activeingredientLocalType>(this.activeingredientField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("activeingredients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<activeingredientsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("activeingredient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(activeingredientLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class activeingredientLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator activeingredientLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activeingredientLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static activeingredientLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public activeingredientLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The reference code of the substance that is present in the product. It identifies unequivocally a substance. This element must have an attribute: Resolution Mode.
                ///
                ///Business Rules: DevProducts.PP.ACT.1.BR.
                ///
                ///Business Rules: AuthProducts.PP.ACT.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///
                ///Business Rules: AllProducts.PP.ACT.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "concentrationtypecode", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code_text.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator value or for non range measurements the numerator value.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator prefix or for non range measurements the numerator prefix. Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.ACT.4.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator Unit or for non range measurements the numerator Unit. Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.ACT.5.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator value or for non range measurements the value specified.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator prefix or for non range measurements the denominator prefix.
                ///
                ///Business Rules: AllProducts.PP.ACT.7.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator Unit  must be a value from the published list. 
                ///
                ///Business Rules: AllProducts.PP.ACT.8.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator value must ONLY be used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.ACT.9.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.ACT.10.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator Unit is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.ACT.11.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Value is used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.ACT.12.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator prefix is used when specifying a range and must be from the published prefix list.
                ///
                ///Business Rules: AllProducts.PP.ACT.13.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Unit is used when specifying a range and must be from the published denominator unit list.
                ///
                ///Business Rules: AllProducts.PP.ACT.14.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("activeingredient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<activeingredientLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (excipient+)
        /// </para>
        /// </summary>
        public partial class excipientsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<excipientLocalType> excipientField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator excipientsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<excipientsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static excipientsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("excipient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (excipient+)
            /// </para>
            /// </summary>
            public excipientsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about the excipients present in the product. 
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (excipient+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType.excipientsLocalType.excipientLocalType> excipient
            {
                get
                {
                    if ((this.excipientField == null))
                    {
                        this.excipientField = new XTypedList<excipientLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("excipient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.excipientField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.excipientField = null;
                    }
                    else
                    {
                        if ((this.excipientField == null))
                        {
                            this.excipientField = XTypedList<excipientLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("excipient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<excipientLocalType>(this.excipientField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("excipients", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<excipientsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("excipient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(excipientLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class excipientLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator excipientLocalType(XElement xe) { return XTypedServices.ToXTypedElement<excipientLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static excipientLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public excipientLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Code of the substance that is present in the product. It identifies unequivocally a substance that is acting as an excipient in this pharmaceutical product. This element must have an attribute: Resolution Mode.
                ///
                ///Business Rules: DevProducts.PP.EXC.1.BR.
                ///
                ///Business Rules: AuthProducts.PP.EXC.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "concentrationtypecode", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.integernullable.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator value or for non range measurements the numerator value. 
                ///
                ///Business Rules: AllProducts.PP.EXC.3.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator prefix or for non range measurements the numerator prefix. 
                ///
                ///Business Rules: AllProducts.PP.EXC.4.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator Unit or for non range measurements the numerator Unit.
                ///
                ///Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.5.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator value or for non range measurements the denominator value.
                ///
                ///Business Rules: AllProducts.PP.EXC.6.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator prefix or for non range measurements the denominator prefix. Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.7.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator Unit or for non range measurements the denominator Unit.
                ///
                ///Must be a value from the published list. 
                ///
                ///Business Rules: AllProducts.PP.EXC.8.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator value must ONLY be used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.EXC.9.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.10.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator Unit is used when specifying a range and must be from the published list. 
                ///
                ///Business Rules: AllProducts.PP.EXC.11.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Value is used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.EXC.12.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator prefix is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.13.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Unit is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.EXC.14.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode?, lowamountnumervalue?, lowamountnumerprefix?, lowamountnumerunit?, lowamountdenomvalue?, lowamountdenomprefix?, lowamountdenomunit?, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("excipient", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<excipientLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (adjuvant+)
        /// </para>
        /// </summary>
        public partial class adjuvantsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<adjuvantLocalType> adjuvantField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator adjuvantsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adjuvantsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static adjuvantsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("adjuvant", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (adjuvant+)
            /// </para>
            /// </summary>
            public adjuvantsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// This section contains information about an individual adjuvant present in the product.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (adjuvant+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType.adjuvantsLocalType.adjuvantLocalType> adjuvant
            {
                get
                {
                    if ((this.adjuvantField == null))
                    {
                        this.adjuvantField = new XTypedList<adjuvantLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("adjuvant", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.adjuvantField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.adjuvantField = null;
                    }
                    else
                    {
                        if ((this.adjuvantField == null))
                        {
                            this.adjuvantField = XTypedList<adjuvantLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("adjuvant", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<adjuvantLocalType>(this.adjuvantField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("adjuvants", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<adjuvantsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("adjuvant", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(adjuvantLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
            /// </para>
            /// </summary>
            public partial class adjuvantLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator adjuvantLocalType(XElement xe) { return XTypedServices.ToXTypedElement<adjuvantLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static adjuvantLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")), new NamedContentModelEntity(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public adjuvantLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// The reference code of the substance that is present in the product. 
                ///
                ///It identifies unequivocally a substance. This element must have an attribute: Resolution Mode.
                ///
                ///Business Rules: DevProducts.PP.ADJ.1.BR.
                ///
                ///Business Rules: AuthProducts.PP.ADJ.1.BR
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public substancecodeLocalType substancecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return ((substancecodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value);
                    }
                }

                /// <summary>
                /// <para>
                /// The code of the concentration type as in the CONCENTRATIONTYPE from the published list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.2.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public object concentrationtypecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd.integernullable.TypeDefinition);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "concentrationtypecode", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code_text.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator value or for non range measurements the numerator value.
                ///
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumervalue", lowamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator prefix or for non range measurements the numerator prefix. Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.4.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerprefix", lowamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit numerator Unit or for non range measurements the numerator Unit. Must be a value from the published list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.5.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountnumerunit", lowamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator value or for non range measurements the value specified.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public decimal lowamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomvalue", lowamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator prefix or for non range measurements the denominator prefix.
                ///
                ///Business Rules: AllProducts.PP.ADJ.7.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomprefix", lowamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The Low limit denominator Unit  must be a value from the published list. 
                ///
                ///Business Rules: AllProducts.PP.ADJ.8.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string lowamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "lowamountdenomunit", lowamountdenomunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator value must ONLY be used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.ACT.9.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountnumervalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumervalue", highamountnumervalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator prefix is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.10.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerprefix", highamountnumerprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit numerator Unit is used when specifying a range and must be from the published list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.11.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountnumerunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountnumerunit", highamountnumerunitLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Value is used when specifying a range.
                ///
                ///Business Rules: AllProducts.PP.ADJ.12.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public System.Nullable<decimal> highamountdenomvalue
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomvalue", highamountdenomvalueLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator prefix is used when specifying a range and must be from the published prefix list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.13.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomprefix
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomprefix", highamountdenomprefixLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// The High limit denominator Unit is used when specifying a range and must be from the published denominator unit list.
                ///
                ///Business Rules: AllProducts.PP.ADJ.14.BR.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (substancecode, concentrationtypecode, lowamountnumervalue, lowamountnumerprefix, lowamountnumerunit, lowamountdenomvalue, lowamountdenomprefix, lowamountdenomunit, highamountnumervalue?, highamountnumerprefix?, highamountnumerunit?, highamountdenomvalue?, highamountdenomprefix?, highamountdenomunit?)
                /// </para>
                /// </summary>
                public string highamountdenomunit
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "highamountdenomunit", highamountdenomunitLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("adjuvant", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<adjuvantLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(substancecodeLocalType));
                    localElementDictionary.Add(XName.Get("concentrationtypecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(object));
                    localElementDictionary.Add(XName.Get("lowamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("lowamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("lowamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumervalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountnumerprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountnumerunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomvalue", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highamountdenomprefix", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                    localElementDictionary.Add(XName.Get("highamountdenomunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class substancecodeLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator substancecodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    public substancecodeLocalType()
                    {
                    }

                    public string TypedValue
                    {
                        get
                        {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd.fk_code.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Resolution mode = 1 Local (Local Number present in the XML file) 
                    ///
                    ///Resolution mode = 2 Global (ev_code present in the EudraVigilance Lookup Tables)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public int resolutionmode
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("resolutionmode", ""));
                            return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("resolutionmode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("substancecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<substancecodeLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                private class lowamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumervalueLocalType()
                    {
                    }
                }

                private class lowamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerprefixLocalType()
                    {
                    }
                }

                private class lowamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountnumerunitLocalType()
                    {
                    }
                }

                private class lowamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomvalueLocalType()
                    {
                    }
                }

                private class lowamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomprefixLocalType()
                    {
                    }
                }

                private class lowamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private lowamountdenomunitLocalType()
                    {
                    }
                }

                private class highamountnumervalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountnumervalueLocalType()
                    {
                    }
                }

                private class highamountnumerprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerprefixLocalType()
                    {
                    }
                }

                private class highamountnumerunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountnumerunitLocalType()
                    {
                    }
                }

                private class highamountdenomvalueLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 12, 0, null, null, 0, null, null, 0, null, 24, XmlSchemaWhiteSpace.Collapse));

                    private highamountdenomvalueLocalType()
                    {
                    }
                }

                private class highamountdenomprefixLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomprefixLocalType()
                    {
                    }
                }

                private class highamountdenomunitLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private highamountdenomunitLocalType()
                    {
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (medicaldevice+)
        /// </para>
        /// </summary>
        public partial class medicaldevicesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<medicaldeviceLocalType> medicaldeviceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator medicaldevicesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<medicaldevicesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static medicaldevicesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("medicaldevice", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (medicaldevice+)
            /// </para>
            /// </summary>
            public medicaldevicesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (medicaldevice+)
            /// </para>
            /// </summary>
            public IList<eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType.medicaldevicesLocalType.medicaldeviceLocalType> medicaldevice
            {
                get
                {
                    if ((this.medicaldeviceField == null))
                    {
                        this.medicaldeviceField = new XTypedList<medicaldeviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("medicaldevice", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                    }
                    return this.medicaldeviceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.medicaldeviceField = null;
                    }
                    else
                    {
                        if ((this.medicaldeviceField == null))
                        {
                            this.medicaldeviceField = XTypedList<medicaldeviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("medicaldevice", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        }
                        else
                        {
                            XTypedServices.SetList<medicaldeviceLocalType>(this.medicaldeviceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("medicaldevices", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<medicaldevicesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("medicaldevice", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(medicaldeviceLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (medicaldevicecode)
            /// </para>
            /// </summary>
            public partial class medicaldeviceLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator medicaldeviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<medicaldeviceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static medicaldeviceLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("medicaldevicecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (medicaldevicecode)
                /// </para>
                /// </summary>
                public medicaldeviceLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// This section contains the code of each medical device present in the product. 
                ///
                ///Business Rules: AllProducts.PP.MD.1.BR.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (medicaldevicecode)
                /// </para>
                /// </summary>
                public int medicaldevicecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("medicaldevicecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"));
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("medicaldevicecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), value, "medicaldevicecode", medicaldevicecodeLocalType.TypeDefinition);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("medicaldevice", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<medicaldeviceLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("medicaldevicecode", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(int));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class medicaldevicecodeLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

                    private medicaldevicecodeLocalType()
                    {
                    }
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used to indicate, by an empty string, the null value 
    /// </para>
    /// </summary>
    public sealed class null_value
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

        private null_value()
        {
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used for specify a non mandatory integer field
    /// </para>
    /// </summary>
    public sealed class integernullable
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null),
                    eudravigilance.ema.europa.eu.schema.emaxevmpd.null_value.TypeDefinition});

        private integernullable()
        {
        }
    }

    /// <summary>
    /// <para>
    /// This XML type is used for specify a non mandatory double field
    /// </para>
    /// </summary>
    public sealed class doublenullable
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null),
                    eudravigilance.ema.europa.eu.schema.emaxevmpd.null_value.TypeDefinition});

        private doublenullable()
        {
        }
    }

    /// <summary>
    /// <para>
    /// The foreign key type: A string of max 60 character. 
    /// </para>
    /// </summary>
    public sealed class fk_code
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 60, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

        private fk_code()
        {
        }
    }

    /// <summary>
    /// <para>
    /// The foreign key / text type: A string of max 2000 character which can be a foreign key or a text.
    /// </para>
    /// </summary>
    public sealed class fk_code_text
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));

        private fk_code_text()
        {
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildTypeDictionary();
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return typeDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildTypeDictionary()
        {
            typeDictionary.Add(XName.Get("ichicsrmessageheaderType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.ichicsrmessageheaderType));
            typeDictionary.Add(XName.Get("organisationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.organisationType));
            typeDictionary.Add(XName.Get("sourceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.sourceType));
            typeDictionary.Add(XName.Get("masterfilelocationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.masterfilelocationType));
            typeDictionary.Add(XName.Get("attachmentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.attachmentType));
            typeDictionary.Add(XName.Get("developmentsubstanceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentsubstanceType));
            typeDictionary.Add(XName.Get("approvedsubstanceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.approvedsubstanceType));
            typeDictionary.Add(XName.Get("atcType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.atcType));
            typeDictionary.Add(XName.Get("pharmaceuticalformType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalformType));
            typeDictionary.Add(XName.Get("administrationrouteType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.administrationrouteType));
            typeDictionary.Add(XName.Get("developmentproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.developmentproductType));
            typeDictionary.Add(XName.Get("authorisedproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.authorisedproductType));
            typeDictionary.Add(XName.Get("pharmaceuticalproductType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.pharmaceuticalproductType));
            typeDictionary.Add(XName.Get("reference-sourceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.referencesourceType));
            typeDictionary.Add(XName.Get("nameType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.nameType));
            typeDictionary.Add(XName.Get("official-nameType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.officialnameType));
            typeDictionary.Add(XName.Get("official-name-domainType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.officialnamedomainType));
            typeDictionary.Add(XName.Get("official-name-jurisdictionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.officialnamejurisdictionType));
            typeDictionary.Add(XName.Get("codeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.codeType));
            typeDictionary.Add(XName.Get("reference-informationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.referenceinformationType));
            typeDictionary.Add(XName.Get("geneType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.geneType));
            typeDictionary.Add(XName.Get("gene-elementType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.geneelementType));
            typeDictionary.Add(XName.Get("targetType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.targetType));
            typeDictionary.Add(XName.Get("substance-relationshipType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substancerelationshipType));
            typeDictionary.Add(XName.Get("substance-classificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substanceclassificationType));
            typeDictionary.Add(XName.Get("substance-classification-subType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substanceclassificationsubType));
            typeDictionary.Add(XName.Get("structureType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.structureType));
            typeDictionary.Add(XName.Get("isotopeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.isotopeType));
            typeDictionary.Add(XName.Get("versionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.versionType));
            typeDictionary.Add(XName.Get("modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.modificationType));
            typeDictionary.Add(XName.Get("structural-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.structuralmodificationType));
            typeDictionary.Add(XName.Get("moietyType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.moietyType));
            typeDictionary.Add(XName.Get("molecular-fragmentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.molecularfragmentType));
            typeDictionary.Add(XName.Get("physical-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.physicalmodificationType));
            typeDictionary.Add(XName.Get("parameterType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.parameterType));
            typeDictionary.Add(XName.Get("agent-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.agentmodificationType));
            typeDictionary.Add(XName.Get("source-materialType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.sourcematerialType));
            typeDictionary.Add(XName.Get("partType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.partType));
            typeDictionary.Add(XName.Get("fractionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.fractionType));
            typeDictionary.Add(XName.Get("organismType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.organismType));
            typeDictionary.Add(XName.Get("chemicalType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.chemicalType));
            typeDictionary.Add(XName.Get("non-stoichiometricType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.nonstoichiometricType));
            typeDictionary.Add(XName.Get("propertyType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.propertyType));
            typeDictionary.Add(XName.Get("proteinType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.proteinType));
            typeDictionary.Add(XName.Get("molecular-weightType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.molecularweightType));
            typeDictionary.Add(XName.Get("glycosylationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.glycosylationType));
            typeDictionary.Add(XName.Get("protein-subunitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.proteinsubunitType));
            typeDictionary.Add(XName.Get("nucleic-acidType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.nucleicacidType));
            typeDictionary.Add(XName.Get("nucleic-acid-subunitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.nucleicacidsubunitType));
            typeDictionary.Add(XName.Get("polymerType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.polymerType));
            typeDictionary.Add(XName.Get("structural-repeatType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.structuralrepeatType));
            typeDictionary.Add(XName.Get("structural-repeat-unitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.structuralrepeatunitType));
            typeDictionary.Add(XName.Get("degree-of-polymerisationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.degreeofpolymerisationType));
            typeDictionary.Add(XName.Get("monomer-descriptionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.monomerdescriptionType));
            typeDictionary.Add(XName.Get("monomerType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.monomerType));
            typeDictionary.Add(XName.Get("structurally-diverseType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.structurallydiverseType));
            typeDictionary.Add(XName.Get("mixtureType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.mixtureType));
            typeDictionary.Add(XName.Get("mixture-constituentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.mixtureconstituentType));
            typeDictionary.Add(XName.Get("specified-substance-group1Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.specifiedsubstancegroup1Type));
            typeDictionary.Add(XName.Get("physical-formType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.physicalformType));
            typeDictionary.Add(XName.Get("constituentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.constituentType));
            typeDictionary.Add(XName.Get("specified-substance-group2Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.specifiedsubstancegroup2Type));
            typeDictionary.Add(XName.Get("specified-substance-group3Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.specifiedsubstancegroup3Type));
            typeDictionary.Add(XName.Get("gradeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.gradeType));
            typeDictionary.Add(XName.Get("manufacturingType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.manufacturingType));
            typeDictionary.Add(XName.Get("amountType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.amountType));
            typeDictionary.Add(XName.Get("singleType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.singleType));
            typeDictionary.Add(XName.Get("specifiedType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.specifiedType));
            typeDictionary.Add(XName.Get("cvType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.cvType));
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("evprm", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.evprm));
            elementDictionary.Add(XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("evprm", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public evprm evprm { get { return rootObject as evprm; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(evprm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public global::eudravigilance.ema.europa.eu.schema.emaxevmpd.evprm evprm { get { return rootObject as global::eudravigilance.ema.europa.eu.schema.emaxevmpd.evprm; } }

        public global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance substance { get { return rootObject as global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance; } }

        private XRoot()
        {
        }

        public XRoot(global::eudravigilance.ema.europa.eu.schema.emaxevmpd.evprm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.substance root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}
namespace eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using eudravigilance.ema.europa.eu.schema.emaxevmpd;


    /// <summary>
    /// <para>
    /// Regular expression: (common, extension)
    /// </para>
    /// </summary>
    public partial class substance : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string languagecvDefaultValue = "eng";

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator substance(XElement xe) { return XTypedServices.ToXTypedElement<substance>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static substance()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("common", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (common, extension)
        /// </para>
        /// </summary>
        public substance()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SUB.COM.GD Business Rules: SUB.COM.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (common, extension)
        /// </para>
        /// </summary>
        public commonLocalType common
        {
            get
            {
                XElement x = this.GetElement(XName.Get("common", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((commonLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("common", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SUB.EXT.GD Business Rules: SUB.EXT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (common, extension)
        /// </para>
        /// </summary>
        public extensionLocalType extension
        {
            get
            {
                XElement x = this.GetElement(XName.Get("extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((extensionLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SUB.LANG.GD Business Rules: SUB.LANG.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string languagecv
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("language-cv", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, languagecvDefaultValue);
            }
            set
            {
                this.SetAttribute(XName.Get("language-cv", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("substance", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static substance Load(string xmlFile)
        {
            return XTypedServices.Load<substance>(xmlFile);
        }

        public static substance Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<substance>(xmlFile);
        }

        public static substance Parse(string xml)
        {
            return XTypedServices.Parse<substance>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<substance>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("common", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(commonLocalType));
            localElementDictionary.Add(XName.Get("extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(extensionLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
        /// </para>
        /// </summary>
        public partial class commonLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator commonLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commonLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static commonLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-codes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("versions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-information", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public commonLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: COM.1.GD Business Rules: COM.1.BR
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public string substanceid
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substanceid", substanceidLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: COM.2.CV.GD List Reference: COM.2.CV.LIST Business Rules: COM.2.CV.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public cvType substanceclassificationcv
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((cvType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: COM.SNMs.GD Business Rules: COM.SNMs.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public substancenamesLocalType substancenames
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("substance-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((substancenamesLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("substance-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: COM.SCs.GD Business Rules: COM.SCs.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public substancecodesLocalType substancecodes
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("substance-codes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((substancecodesLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("substance-codes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: COM.VERs.GD Business Rules: COM.VERs.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public versionsLocalType versions
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("versions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((versionsLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("versions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: COM.RI.GD Business Rules: COM.RI.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (substanceid?, substanceclassificationcv, substancenames, substancecodes?, versions, referenceinformation)
            /// </para>
            /// </summary>
            public referenceinformationType referenceinformation
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reference-information", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((referenceinformationType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reference-information", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("common", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<commonLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
                localElementDictionary.Add(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
                localElementDictionary.Add(XName.Get("substance-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substancenamesLocalType));
                localElementDictionary.Add(XName.Get("substance-codes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substancecodesLocalType));
                localElementDictionary.Add(XName.Get("versions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(versionsLocalType));
                localElementDictionary.Add(XName.Get("reference-information", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referenceinformationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class substanceidLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

                private substanceidLocalType()
                {
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancename+)
            /// </para>
            /// </summary>
            public partial class substancenamesLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<nameType> substancenameField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancenamesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancenamesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancenamesLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancename+)
                /// </para>
                /// </summary>
                public substancenamesLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///Guidance Notes: COM.SNM.GD Business Rules: COM.SNM.BR
                ///
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (substancename+)
                /// </para>
                /// </summary>
                public IList<nameType> substancename
                {
                    get
                    {
                        if ((this.substancenameField == null))
                        {
                            this.substancenameField = new XTypedList<nameType>(this, LinqToXsdTypeManager.Instance, XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        return this.substancenameField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.substancenameField = null;
                        }
                        else
                        {
                            if ((this.substancenameField == null))
                            {
                                this.substancenameField = XTypedList<nameType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                            }
                            else
                            {
                                XTypedServices.SetList<nameType>(this.substancenameField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substance-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancenamesLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(nameType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancecode+)
            /// </para>
            /// </summary>
            public partial class substancecodesLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<codeType> substancecodeField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator substancecodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancecodesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static substancecodesLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (substancecode+)
                /// </para>
                /// </summary>
                public substancecodesLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///Guidance Notes: COM.SC.GD Business Rules: COM.SC.BR
                ///
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (substancecode+)
                /// </para>
                /// </summary>
                public IList<codeType> substancecode
                {
                    get
                    {
                        if ((this.substancecodeField == null))
                        {
                            this.substancecodeField = new XTypedList<codeType>(this, LinqToXsdTypeManager.Instance, XName.Get("substance-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        return this.substancecodeField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.substancecodeField = null;
                        }
                        else
                        {
                            if ((this.substancecodeField == null))
                            {
                                this.substancecodeField = XTypedList<codeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substance-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                            }
                            else
                            {
                                XTypedServices.SetList<codeType>(this.substancecodeField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("substance-codes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<substancecodesLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("substance-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(codeType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (version+)
            /// </para>
            /// </summary>
            public partial class versionsLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<versionType> versionField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator versionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<versionsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static versionsLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("version", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (version+)
                /// </para>
                /// </summary>
                public versionsLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// 
                ///Guidance Notes: COM.VER.GD Business Rules: COM.VER.BR
                ///
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (version+)
                /// </para>
                /// </summary>
                public IList<versionType> version
                {
                    get
                    {
                        if ((this.versionField == null))
                        {
                            this.versionField = new XTypedList<versionType>(this, LinqToXsdTypeManager.Instance, XName.Get("version", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        return this.versionField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.versionField = null;
                        }
                        else
                        {
                            if ((this.versionField == null))
                            {
                                this.versionField = XTypedList<versionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("version", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                            }
                            else
                            {
                                XTypedServices.SetList<versionType>(this.versionField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("versions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<versionsLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("version", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(versionType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (single | mixture | specified)
        /// </para>
        /// </summary>
        public partial class extensionLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator extensionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<extensionLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static extensionLocalType()
            {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("single", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("mixture", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (single | mixture | specified)
            /// </para>
            /// </summary>
            public extensionLocalType()
            {
            }

            public extensionLocalType(singleType single)
            {
                this.single = single;
            }

            public extensionLocalType(mixtureType mixture)
            {
                this.mixture = mixture;
            }

            public extensionLocalType(specifiedType specified)
            {
                this.specified = specified;
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: EXT.SING.GD Business Rules: EXT.SING.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (single | mixture | specified)
            /// </para>
            /// </summary>
            public singleType single
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("single", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((singleType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("single", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: EXT.MIXT.GD Business Rules: EXT.MIXT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (single | mixture | specified)
            /// </para>
            /// </summary>
            public mixtureType mixture
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("mixture", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((mixtureType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("mixture", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: EXT.SPCFD.GD Business Rules: EXT.SPCFD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (single | mixture | specified)
            /// </para>
            /// </summary>
            public specifiedType specified
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("specified", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((specifiedType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("specified", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("extension", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<extensionLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("single", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(singleType));
                localElementDictionary.Add(XName.Get("mixture", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(mixtureType));
                localElementDictionary.Add(XName.Get("specified", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(specifiedType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: RS.GD Business Rules: RS.BR
    /// </para>
    /// <para>
    /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
    /// </para>
    /// </summary>
    public partial class referencesourceType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator referencesourceType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourceType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static referencesourceType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("public-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-source-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-source-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-source-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-source-citation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RS.GD Business Rules: RS.BR
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public referencesourceType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RS.1.GD Business Rules: RS.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public bool publicdomain
        {
            get
            {
                XElement x = this.GetElement(XName.Get("public-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("public-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RS.2.CV.GD List Reference: RS.2.CV.LIST Business Rules: RS.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public cvType referencesourcetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-source-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-source-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RS.3.CV.GD List Reference: RS.3.CV.LIST Business Rules: RS.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public cvType referencesourceclasscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-source-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-source-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RS.4.GD Business Rules: RS.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public string referencesourcecode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-source-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reference-source-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "referencesourcecode", referencesourcecodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RS.5.GD Business Rules: RS.5.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (publicdomain, referencesourcetypecv, referencesourceclasscv?, referencesourcecode?, referencesourcecitation?)
        /// </para>
        /// </summary>
        public string referencesourcecitation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-source-citation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("reference-source-citation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "referencesourcecitation", referencesourcecitationLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reference-sourceType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<referencesourceType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("public-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(bool));
            localElementDictionary.Add(XName.Get("reference-source-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("reference-source-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("reference-source-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("reference-source-citation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class referencesourcecodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private referencesourcecodeLocalType()
            {
            }
        }

        private class referencesourcecitationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private referencesourcecitationLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SNM.GD Business Rules: SNM.BR
    /// </para>
    /// <para>
    /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
    /// </para>
    /// </summary>
    public partial class nameType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator nameType(XElement xe) { return XTypedServices.ToXTypedElement<nameType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static nameType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("language-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("official-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SNM.GD Business Rules: SNM.BR
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public nameType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SNM.1.GD Business Rules: SNM.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public string substancename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substancename", substancenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SNM.2.CV.GD Business Rules: SNM.2.CV.BR List Reference: SNM.2.CV.LIST
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public cvType substancenametypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SNM.3.CV.GD Business Rules: SNM.3.CV.BR List Reference: SNM.3.CV.LIST
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public string languagecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("language-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("language-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "languagecv", languagecvLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SNM.ONs.GD Business Rules: SNM.ONs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public officialnamesLocalType officialnames
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((officialnamesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SNM.RSs.GD Business Rules: SNM.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substancename, substancenametypecv, languagecv, officialnames?, referencesources)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("nameType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<nameType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("language-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("official-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnamesLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class substancenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substancenameLocalType()
            {
            }
        }

        private class languagecvLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private languagecvLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (officialname+)
        /// </para>
        /// </summary>
        public partial class officialnamesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<officialnameType> officialnameField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator officialnamesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<officialnamesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static officialnamesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (officialname+)
            /// </para>
            /// </summary>
            public officialnamesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SNM.ON.GD Business Rules: SNM.ON.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (officialname+)
            /// </para>
            /// </summary>
            public IList<officialnameType> officialname
            {
                get
                {
                    if ((this.officialnameField == null))
                    {
                        this.officialnameField = new XTypedList<officialnameType>(this, LinqToXsdTypeManager.Instance, XName.Get("official-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.officialnameField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.officialnameField = null;
                    }
                    else
                    {
                        if ((this.officialnameField == null))
                        {
                            this.officialnameField = XTypedList<officialnameType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("official-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<officialnameType>(this.officialnameField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("official-names", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<officialnamesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("official-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnameType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SNM.RS.GD Business Rules: SNM.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: ON.GD Business Rules: ON.BR
    /// </para>
    /// <para>
    /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
    /// </para>
    /// </summary>
    public partial class officialnameType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator officialnameType(XElement xe) { return XTypedServices.ToXTypedElement<officialnameType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static officialnameType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("official-name-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("official-name-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("official-name-domains", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("official-name-jurisdictions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ON.GD Business Rules: ON.BR
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public officialnameType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ON.1.CV.GD List Reference: ON.1.CV.LIST Business Rules: ON.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public cvType officialnametypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ON.2.CV.GD List Reference: ON.2.CV.LIST Business Rules: ON.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public cvType officialnamestatuscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-name-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ON.3.GD Business Rules: ON.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> officialnamestatuschangedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("official-name-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ON.DOMs.GD Business Rules: ON.DOMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public officialnamedomainsLocalType officialnamedomains
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-domains", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((officialnamedomainsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-name-domains", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ON.JURs.GD Business Rules: ON.JURs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnametypecv, officialnamestatuscv, officialnamestatuschangedate?, officialnamedomains, officialnamejurisdictions)
        /// </para>
        /// </summary>
        public officialnamejurisdictionsLocalType officialnamejurisdictions
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-jurisdictions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((officialnamejurisdictionsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-name-jurisdictions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("official-nameType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<officialnameType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("official-name-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("official-name-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("official-name-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("official-name-domains", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnamedomainsLocalType));
            localElementDictionary.Add(XName.Get("official-name-jurisdictions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnamejurisdictionsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (officialnamedomain+)
        /// </para>
        /// </summary>
        public partial class officialnamedomainsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<officialnamedomainType> officialnamedomainField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator officialnamedomainsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<officialnamedomainsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static officialnamedomainsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (officialnamedomain+)
            /// </para>
            /// </summary>
            public officialnamedomainsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: ON.DOM.GD Business Rules: ON.DOM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (officialnamedomain+)
            /// </para>
            /// </summary>
            public IList<officialnamedomainType> officialnamedomain
            {
                get
                {
                    if ((this.officialnamedomainField == null))
                    {
                        this.officialnamedomainField = new XTypedList<officialnamedomainType>(this, LinqToXsdTypeManager.Instance, XName.Get("official-name-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.officialnamedomainField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.officialnamedomainField = null;
                    }
                    else
                    {
                        if ((this.officialnamedomainField == null))
                        {
                            this.officialnamedomainField = XTypedList<officialnamedomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("official-name-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<officialnamedomainType>(this.officialnamedomainField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("official-name-domains", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<officialnamedomainsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("official-name-domain", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnamedomainType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (officialnamejurisdiction+)
        /// </para>
        /// </summary>
        public partial class officialnamejurisdictionsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<officialnamejurisdictionType> officialnamejurisdictionField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator officialnamejurisdictionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<officialnamejurisdictionsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static officialnamejurisdictionsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name-jurisdiction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (officialnamejurisdiction+)
            /// </para>
            /// </summary>
            public officialnamejurisdictionsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: ON.JUR.GD Business Rules: ON.JUR.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (officialnamejurisdiction+)
            /// </para>
            /// </summary>
            public IList<officialnamejurisdictionType> officialnamejurisdiction
            {
                get
                {
                    if ((this.officialnamejurisdictionField == null))
                    {
                        this.officialnamejurisdictionField = new XTypedList<officialnamejurisdictionType>(this, LinqToXsdTypeManager.Instance, XName.Get("official-name-jurisdiction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.officialnamejurisdictionField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.officialnamejurisdictionField = null;
                    }
                    else
                    {
                        if ((this.officialnamejurisdictionField == null))
                        {
                            this.officialnamejurisdictionField = XTypedList<officialnamejurisdictionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("official-name-jurisdiction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<officialnamejurisdictionType>(this.officialnamejurisdictionField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("official-name-jurisdictions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<officialnamejurisdictionsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("official-name-jurisdiction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(officialnamejurisdictionType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: DOM.GD Business Rules: DOM.BR
    /// </para>
    /// <para>
    /// Regular expression: (officialnamedomaincv)
    /// </para>
    /// </summary>
    public partial class officialnamedomainType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator officialnamedomainType(XElement xe) { return XTypedServices.ToXTypedElement<officialnamedomainType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static officialnamedomainType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name-domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: DOM.GD Business Rules: DOM.BR
        /// </para>
        /// <para>
        /// Regular expression: (officialnamedomaincv)
        /// </para>
        /// </summary>
        public officialnamedomainType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: DOM.1.CV.GD List Reference: DOM.1.CV.LIST Business Rules: DOM.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnamedomaincv)
        /// </para>
        /// </summary>
        public cvType officialnamedomaincv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("official-name-domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("official-name-domainType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<officialnamedomainType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("official-name-domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: JUR.GD Business Rules: JUR.BR
    /// </para>
    /// <para>
    /// Regular expression: (officialnamejurisdictioncv)
    /// </para>
    /// </summary>
    public partial class officialnamejurisdictionType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator officialnamejurisdictionType(XElement xe) { return XTypedServices.ToXTypedElement<officialnamejurisdictionType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static officialnamejurisdictionType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("official-name-jurisdiction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: JUR.GD Business Rules: JUR.BR
        /// </para>
        /// <para>
        /// Regular expression: (officialnamejurisdictioncv)
        /// </para>
        /// </summary>
        public officialnamejurisdictionType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: JUR.1.CV.GD List Reference: JUR.1.CV.LIST Business Rules: JUR.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (officialnamejurisdictioncv)
        /// </para>
        /// </summary>
        public string officialnamejurisdictioncv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("official-name-jurisdiction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("official-name-jurisdiction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "officialnamejurisdictioncv", officialnamejurisdictioncvLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("official-name-jurisdictionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<officialnamejurisdictionType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("official-name-jurisdiction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class officialnamejurisdictioncvLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private officialnamejurisdictioncvLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SC.GD Business Rules: SC.BR
    /// </para>
    /// <para>
    /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
    /// </para>
    /// </summary>
    public partial class codeType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator codeType(XElement xe) { return XTypedServices.ToXTypedElement<codeType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static codeType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("code-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("code-system-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("code-system-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("code-system-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SC.GD Business Rules: SC.BR
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public codeType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SC.1.GD Business Rules: SC.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public string code
        {
            get
            {
                XElement x = this.GetElement(XName.Get("code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "code", codeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SC.2.CV.GD List Reference: SC.2.CV.LIST Business Rules: SC.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public cvType codesystemcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("code-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("code-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SC.3.GD Business Rules: SC.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public string codesystemid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("code-system-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("code-system-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "codesystemid", codesystemidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SC.4.CV.GD List Reference: SC.4.CV.LIST Business Rules: SC.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public cvType codesystemstatuscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("code-system-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("code-system-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SC.5.GD Business Rules: SC.5.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> codesystemstatuschangedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("code-system-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("code-system-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SC.6.GD Business Rules: SC.6.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SC.RSs.GD Business Rules: SC.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, codesystemcv, codesystemid?, codesystemstatuscv, codesystemstatuschangedate?, comment?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("codeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<codeType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("code-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("code-system-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("code-system-status-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("code-system-status-change-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class codeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private codeLocalType()
            {
            }
        }

        private class codesystemidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private codesystemidLocalType()
            {
            }
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: SC.RS.GD Business Rules: SC.RS.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: RI.GD Business Rules: RI.BR
    /// </para>
    /// <para>
    /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
    /// </para>
    /// </summary>
    public partial class referenceinformationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator referenceinformationType(XElement xe) { return XTypedServices.ToXTypedElement<referenceinformationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static referenceinformationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-relationships", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("genes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("gene-elements", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("targets", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RI.GD Business Rules: RI.BR
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public referenceinformationType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: RI.1.GD Business Rules: RI.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RI.SCLFs.GD Business Rules: RI.SCLFs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public substanceclassificationsLocalType substanceclassifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((substanceclassificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-classifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RI.RELs.GD Business Rules: RI.RELs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public substancerelationshipsLocalType substancerelationships
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-relationships", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((substancerelationshipsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-relationships", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RI.GNs.GD Business Rules: RI.GNs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public genesLocalType genes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("genes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((genesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("genes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RI.GEs.GD Business Rules: RI.GEs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public geneelementsLocalType geneelements
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-elements", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((geneelementsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("gene-elements", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: RI.TRGs.GD Business Rules: RI.TRGs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, substanceclassifications, substancerelationships?, genes?, geneelements?, targets?)
        /// </para>
        /// </summary>
        public targetsLocalType targets
        {
            get
            {
                XElement x = this.GetElement(XName.Get("targets", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((targetsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("targets", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reference-informationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<referenceinformationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-classifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substanceclassificationsLocalType));
            localElementDictionary.Add(XName.Get("substance-relationships", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substancerelationshipsLocalType));
            localElementDictionary.Add(XName.Get("genes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(genesLocalType));
            localElementDictionary.Add(XName.Get("gene-elements", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(geneelementsLocalType));
            localElementDictionary.Add(XName.Get("targets", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(targetsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substanceclassification)
        /// </para>
        /// </summary>
        public partial class substanceclassificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substanceclassificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceclassificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substanceclassificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-classification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substanceclassification)
            /// </para>
            /// </summary>
            public substanceclassificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: RI.SCLF.GD Business Rules: RI.SCLF.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (substanceclassification)
            /// </para>
            /// </summary>
            public substanceclassificationType substanceclassification
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("substance-classification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    return ((substanceclassificationType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("substance-classification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substance-classifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substanceclassificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substance-classification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substanceclassificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substancerelationship+)
        /// </para>
        /// </summary>
        public partial class substancerelationshipsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substancerelationshipType> substancerelationshipField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substancerelationshipsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substancerelationshipsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substancerelationshipsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-relationship", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substancerelationship+)
            /// </para>
            /// </summary>
            public substancerelationshipsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: RI.REL.GD Business Rules: RI.REL.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substancerelationship+)
            /// </para>
            /// </summary>
            public IList<substancerelationshipType> substancerelationship
            {
                get
                {
                    if ((this.substancerelationshipField == null))
                    {
                        this.substancerelationshipField = new XTypedList<substancerelationshipType>(this, LinqToXsdTypeManager.Instance, XName.Get("substance-relationship", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.substancerelationshipField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substancerelationshipField = null;
                    }
                    else
                    {
                        if ((this.substancerelationshipField == null))
                        {
                            this.substancerelationshipField = XTypedList<substancerelationshipType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substance-relationship", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<substancerelationshipType>(this.substancerelationshipField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substance-relationships", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substancerelationshipsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substance-relationship", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substancerelationshipType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (gene+)
        /// </para>
        /// </summary>
        public partial class genesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<geneType> geneField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator genesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<genesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static genesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("gene", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (gene+)
            /// </para>
            /// </summary>
            public genesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: RI.GN.GD Business Rules: RI.GN.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (gene+)
            /// </para>
            /// </summary>
            public IList<geneType> gene
            {
                get
                {
                    if ((this.geneField == null))
                    {
                        this.geneField = new XTypedList<geneType>(this, LinqToXsdTypeManager.Instance, XName.Get("gene", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.geneField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.geneField = null;
                    }
                    else
                    {
                        if ((this.geneField == null))
                        {
                            this.geneField = XTypedList<geneType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("gene", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<geneType>(this.geneField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("genes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<genesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("gene", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(geneType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (geneelement+)
        /// </para>
        /// </summary>
        public partial class geneelementsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<geneelementType> geneelementField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator geneelementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<geneelementsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static geneelementsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("gene-element", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (geneelement+)
            /// </para>
            /// </summary>
            public geneelementsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: RI.GE.GD Business Rules: RI.GE.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (geneelement+)
            /// </para>
            /// </summary>
            public IList<geneelementType> geneelement
            {
                get
                {
                    if ((this.geneelementField == null))
                    {
                        this.geneelementField = new XTypedList<geneelementType>(this, LinqToXsdTypeManager.Instance, XName.Get("gene-element", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.geneelementField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.geneelementField = null;
                    }
                    else
                    {
                        if ((this.geneelementField == null))
                        {
                            this.geneelementField = XTypedList<geneelementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("gene-element", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<geneelementType>(this.geneelementField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("gene-elements", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<geneelementsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("gene-element", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(geneelementType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (target+)
        /// </para>
        /// </summary>
        public partial class targetsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<targetType> targetField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator targetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<targetsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static targetsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("target", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (target+)
            /// </para>
            /// </summary>
            public targetsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: RI.TRG.GD Business Rules: RI.TRG.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (target+)
            /// </para>
            /// </summary>
            public IList<targetType> target
            {
                get
                {
                    if ((this.targetField == null))
                    {
                        this.targetField = new XTypedList<targetType>(this, LinqToXsdTypeManager.Instance, XName.Get("target", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.targetField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.targetField = null;
                    }
                    else
                    {
                        if ((this.targetField == null))
                        {
                            this.targetField = XTypedList<targetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("target", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<targetType>(this.targetField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("targets", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<targetsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("target", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(targetType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GN.GD Business Rules: GN.BR
    /// </para>
    /// <para>
    /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
    /// </para>
    /// </summary>
    public partial class geneType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator geneType(XElement xe) { return XTypedServices.ToXTypedElement<geneType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static geneType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("gene-sequence-origin-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GN.GD Business Rules: GN.BR
        /// </para>
        /// <para>
        /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
        /// </para>
        /// </summary>
        public geneType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GN.1.CV.GD List Reference: GN.1.CV.LIST Business Rules: GN.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
        /// </para>
        /// </summary>
        public cvType genesequenceorigincv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-sequence-origin-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("gene-sequence-origin-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GN.2.GD Business Rules: GN.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
        /// </para>
        /// </summary>
        public string geneid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "geneid", geneidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GN.3.CV.GD List Reference: GN.3.CV.LIST Business Rules: GN.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
        /// </para>
        /// </summary>
        public cvType genenamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GN.RSs.GD Business Rules: GN.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (genesequenceorigincv?, geneid?, genenamecv, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("geneType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<geneType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("gene-sequence-origin-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class geneidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private geneidLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: GN.RS.GD Business Rules: GN.RS.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GE.GD Business Rules: GE.BR
    /// </para>
    /// <para>
    /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
    /// </para>
    /// </summary>
    public partial class geneelementType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator geneelementType(XElement xe) { return XTypedServices.ToXTypedElement<geneelementType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static geneelementType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("gene-element-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("gene-element-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("gene-element-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GE.GD Business Rules: GE.BR
        /// </para>
        /// <para>
        /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
        /// </para>
        /// </summary>
        public geneelementType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GE.1.CV.GD List Reference: GE.1.CV.LIST Business Rules: GE.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
        /// </para>
        /// </summary>
        public cvType geneelementtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-element-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("gene-element-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GE.2.GD Business Rules: GE.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
        /// </para>
        /// </summary>
        public string geneelementid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-element-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("gene-element-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "geneelementid", geneelementidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GE.3.GD Business Rules: GE.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
        /// </para>
        /// </summary>
        public string geneelementname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("gene-element-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("gene-element-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "geneelementname", geneelementnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GE.RSs.GD Business Rules: GE.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geneelementtypecv, geneelementid?, geneelementname, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("gene-elementType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<geneelementType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("gene-element-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("gene-element-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("gene-element-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class geneelementidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private geneelementidLocalType()
            {
            }
        }

        private class geneelementnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private geneelementnameLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: GE.RS.GD Business Rules: GE.RS.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: TRG.GD Business Rules: TRG.BR
    /// </para>
    /// <para>
    /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
    /// </para>
    /// </summary>
    public partial class targetType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator targetType(XElement xe) { return XTypedServices.ToXTypedElement<targetType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static targetType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("target-gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("target-gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("target-organism-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("target-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: TRG.GD Business Rules: TRG.BR
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public targetType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: TRG.1.GD Business Rules: TRG.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public string targetgeneid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("target-gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("target-gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "targetgeneid", targetgeneidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: TRG.2.CV.GD List Reference: TRG.2.CV.LIST Business Rules: TRG.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public cvType targetgenenamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("target-gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("target-gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: TRG.3.CV.GD List Reference: TRG.3.CV.LIST Business Rules: TRG.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public cvType interactiontypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: TRG.4.CV.GD List Reference: TRG.4.CV.LIST Business Rules: TRG.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public cvType targetorganismtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("target-organism-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("target-organism-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: TRG.5.CV.GD List Reference: TRG.5.CV.LIST Business Rules: TRG.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public cvType targettypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("target-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("target-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: TRG.RSs.GD Business Rules: TRG.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (targetgeneid?, targetgenenamecv, interactiontypecv, targetorganismtypecv?, targettypecv?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("targetType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<targetType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("target-gene-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("target-gene-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("target-organism-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("target-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class targetgeneidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private targetgeneidLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: TRG.RS.GD Business Rules: TRG.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: REL.GD Business Rules: REL.BR
    /// </para>
    /// <para>
    /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
    /// </para>
    /// </summary>
    public partial class substancerelationshipType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator substancerelationshipType(XElement xe) { return XTypedServices.ToXTypedElement<substancerelationshipType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static substancerelationshipType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("relationship-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: REL.GD Business Rules: REL.BR
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public substancerelationshipType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: REL.1.CV.GD List Reference: REL.1.CV.LIST Business Rules: REL.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public cvType relationshipcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("relationship-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("relationship-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: REL.2.CV.GD List Reference: REL.2.CV.LIST Business Rules: REL.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public cvType interactiontypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: REL.3.GD Business Rules: REL.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public string substanceid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substanceid", substanceidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: REL.4.GD Business Rules: REL.4.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public string substancename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substancename", substancenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: REL.5.CV.GD List Reference: REL.5.CV.LIST Business Rules: REL.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: REL.AMT.GD Business Rules: REL.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: REL.RSs.GD Business Rules: REL.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (relationshipcv, interactiontypecv?, substanceid?, substancename, amounttypecv?, amount?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("substance-relationshipType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<substancerelationshipType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("relationship-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("interaction-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class substanceidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substanceidLocalType()
            {
            }
        }

        private class substancenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substancenameLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: REL.RS.GD Business Rules: REL.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SCLF.GD Business Rules: SCLF.BR
    /// </para>
    /// <para>
    /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
    /// </para>
    /// </summary>
    public partial class substanceclassificationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator substanceclassificationType(XElement xe) { return XTypedServices.ToXTypedElement<substanceclassificationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static substanceclassificationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classification-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-classification-subtypes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SCLF.GD Business Rules: SCLF.BR
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public substanceclassificationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.1.CV.GD List Reference: SCLF.1.CV.LIST Business Rules: SCLF.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public cvType domaincv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.2.CV.GD List Reference: SCLF.2.CV.LIST Business Rules: SCLF.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public cvType substanceclassificationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.3.CV.GD List Reference: SCLF.3.CV.LIST Business Rules: SCLF.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public cvType substanceclassificationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-classification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.4.GD Business Rules: SCLF.4.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public string substanceclassificationcode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classification-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-classification-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substanceclassificationcode", substanceclassificationcodeLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.STs.GD Business Rules: SCLF.STs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public substanceclassificationsubtypesLocalType substanceclassificationsubtypes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classification-subtypes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((substanceclassificationsubtypesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-classification-subtypes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SCLF.RSs.GD Business Rules: SCLF.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (domaincv, substanceclassificationcv, substanceclassificationtypecv, substanceclassificationcode?, substanceclassificationsubtypes, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("substance-classificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<substanceclassificationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("domain-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("substance-classification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("substance-classification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("substance-classification-code", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-classification-subtypes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substanceclassificationsubtypesLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class substanceclassificationcodeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substanceclassificationcodeLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (substanceclassificationsubtype+)
        /// </para>
        /// </summary>
        public partial class substanceclassificationsubtypesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<substanceclassificationsubType> substanceclassificationsubtypeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator substanceclassificationsubtypesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceclassificationsubtypesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static substanceclassificationsubtypesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-classification-subtype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (substanceclassificationsubtype+)
            /// </para>
            /// </summary>
            public substanceclassificationsubtypesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SCLF.ST.GD Business Rules: SCLF.ST.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (substanceclassificationsubtype+)
            /// </para>
            /// </summary>
            public IList<substanceclassificationsubType> substanceclassificationsubtype
            {
                get
                {
                    if ((this.substanceclassificationsubtypeField == null))
                    {
                        this.substanceclassificationsubtypeField = new XTypedList<substanceclassificationsubType>(this, LinqToXsdTypeManager.Instance, XName.Get("substance-classification-subtype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.substanceclassificationsubtypeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.substanceclassificationsubtypeField = null;
                    }
                    else
                    {
                        if ((this.substanceclassificationsubtypeField == null))
                        {
                            this.substanceclassificationsubtypeField = XTypedList<substanceclassificationsubType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("substance-classification-subtype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<substanceclassificationsubType>(this.substanceclassificationsubtypeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("substance-classification-subtypes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<substanceclassificationsubtypesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("substance-classification-subtype", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(substanceclassificationsubType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SCLF.RS.GD Business Rules: SCLF.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: ST.GD Business Rules: ST.BR
    /// </para>
    /// <para>
    /// Regular expression: (substanceclassificationsubtypecv)
    /// </para>
    /// </summary>
    public partial class substanceclassificationsubType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator substanceclassificationsubType(XElement xe) { return XTypedServices.ToXTypedElement<substanceclassificationsubType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static substanceclassificationsubType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-classification-subtype-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ST.GD Business Rules: ST.BR
        /// </para>
        /// <para>
        /// Regular expression: (substanceclassificationsubtypecv)
        /// </para>
        /// </summary>
        public substanceclassificationsubType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ST.1.CV.GD List Reference: ST.1.CV.LIST Business Rules: ST.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substanceclassificationsubtypecv)
        /// </para>
        /// </summary>
        public cvType substanceclassificationsubtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-classification-subtype-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-classification-subtype-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("substance-classification-subType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<substanceclassificationsubType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("substance-classification-subtype-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: STR.GD Business Rules: STR.BR
    /// </para>
    /// <para>
    /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
    /// </para>
    /// </summary>
    public partial class structureType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator structureType(XElement xe) { return XTypedServices.ToXTypedElement<structureType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static structureType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structural-representation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structural-representation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structural-representation-attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("stereochemistry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("optical-activity-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-formula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("isotopes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: STR.GD Business Rules: STR.BR
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public structureType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: STR.1.CV.GD List Reference: STR.1.CV.LIST Business Rules: STR.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public cvType structuralrepresentationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-representation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structural-representation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: STR.2.GD Business Rules: STR.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public string structuralrepresentation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-representation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("structural-representation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "structuralrepresentation", structuralrepresentationLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: STR.3.GD Business Rules: STR.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public string structuralrepresentationattachment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-representation-attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("structural-representation-attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: STR.4.CV.GD List Reference: STR.4.CV.LIST Business Rules: STR.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public cvType stereochemistrycv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("stereochemistry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("stereochemistry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: STR.5.CV.GD List Reference: STR.5.CV.LIST Business Rules: STR.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public cvType opticalactivitycv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("optical-activity-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("optical-activity-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: STR.6.GD Business Rules: STR.6.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public string molecularformula
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-formula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("molecular-formula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "molecularformula", molecularformulaLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: STR.ISOs.GD Business Rules: STR.ISOs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structuralrepresentationtypecv, structuralrepresentation, structuralrepresentationattachment?, stereochemistrycv, opticalactivitycv, molecularformula?, isotopes?)
        /// </para>
        /// </summary>
        public isotopesLocalType isotopes
        {
            get
            {
                XElement x = this.GetElement(XName.Get("isotopes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((isotopesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("isotopes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("structureType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<structureType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("structural-representation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("structural-representation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("structural-representation-attachment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("stereochemistry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("optical-activity-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("molecular-formula", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("isotopes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(isotopesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class structuralrepresentationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private structuralrepresentationLocalType()
            {
            }
        }

        private class molecularformulaLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private molecularformulaLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (isotope+)
        /// </para>
        /// </summary>
        public partial class isotopesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<isotopeType> isotopeField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator isotopesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<isotopesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static isotopesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("isotope", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (isotope+)
            /// </para>
            /// </summary>
            public isotopesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: STR.ISO.GD Business Rules: STR.ISO.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (isotope+)
            /// </para>
            /// </summary>
            public IList<isotopeType> isotope
            {
                get
                {
                    if ((this.isotopeField == null))
                    {
                        this.isotopeField = new XTypedList<isotopeType>(this, LinqToXsdTypeManager.Instance, XName.Get("isotope", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.isotopeField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.isotopeField = null;
                    }
                    else
                    {
                        if ((this.isotopeField == null))
                        {
                            this.isotopeField = XTypedList<isotopeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("isotope", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<isotopeType>(this.isotopeField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("isotopes", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<isotopesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("isotope", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(isotopeType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: ISO.GD Business Rules: ISO.BR
    /// </para>
    /// <para>
    /// Regular expression: (nuclideid?, nuclidename, substitutiontypecv)
    /// </para>
    /// </summary>
    public partial class isotopeType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator isotopeType(XElement xe) { return XTypedServices.ToXTypedElement<isotopeType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static isotopeType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nuclide-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("nuclide-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substitution-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ISO.GD Business Rules: ISO.BR
        /// </para>
        /// <para>
        /// Regular expression: (nuclideid?, nuclidename, substitutiontypecv)
        /// </para>
        /// </summary>
        public isotopeType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ISO.1.GD Business Rules: ISO.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nuclideid?, nuclidename, substitutiontypecv)
        /// </para>
        /// </summary>
        public string nuclideid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("nuclide-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("nuclide-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "nuclideid", nuclideidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ISO.2.GD Business Rules: ISO.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nuclideid?, nuclidename, substitutiontypecv)
        /// </para>
        /// </summary>
        public string nuclidename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("nuclide-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("nuclide-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "nuclidename", nuclidenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ISO.3.CV.GD List Reference: ISO.3.CV.LIST Business Rules: ISO.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nuclideid?, nuclidename, substitutiontypecv)
        /// </para>
        /// </summary>
        public cvType substitutiontypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substitution-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substitution-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("isotopeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<isotopeType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("nuclide-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("nuclide-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substitution-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class nuclideidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private nuclideidLocalType()
            {
            }
        }

        private class nuclidenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private nuclidenameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: VER.GD Business Rules: VER.BR
    /// </para>
    /// <para>
    /// Regular expression: (versionnumber?, effectivedate, changemade?)
    /// </para>
    /// </summary>
    public partial class versionType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator versionType(XElement xe) { return XTypedServices.ToXTypedElement<versionType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static versionType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("version-number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("effective-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("change-made", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: VER.GD Business Rules: VER.BR
        /// </para>
        /// <para>
        /// Regular expression: (versionnumber?, effectivedate, changemade?)
        /// </para>
        /// </summary>
        public versionType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: VER.1.GD Business Rules: VER.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (versionnumber?, effectivedate, changemade?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> versionnumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("version-number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("version-number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "versionnumber", versionnumberLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: VER.2.GD Business Rules: VER.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (versionnumber?, effectivedate, changemade?)
        /// </para>
        /// </summary>
        public System.DateTime effectivedate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("effective-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("effective-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: VER.3.GD Business Rules: VER.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (versionnumber?, effectivedate, changemade?)
        /// </para>
        /// </summary>
        public string changemade
        {
            get
            {
                XElement x = this.GetElement(XName.Get("change-made", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("change-made", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "changemade", changemadeLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("versionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<versionType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("version-number", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("effective-date", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("change-made", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class versionnumberLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private versionnumberLocalType()
            {
            }
        }

        private class changemadeLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private changemadeLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MOD.GD Business Rules: MOD.BR
    /// </para>
    /// <para>
    /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
    /// </para>
    /// </summary>
    public partial class modificationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator modificationType(XElement xe) { return XTypedServices.ToXTypedElement<modificationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static modificationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("residue-modified-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("residue-site", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("physical-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structural-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("agent-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MOD.GD Business Rules: MOD.BR
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public modificationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOD.1.CV.GD List Reference: MOD.1.CV.LIST Business Rules: MOD.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public cvType modificationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOD.2.CV.GD List Reference: MOD.2.CV.LIST Business Rules: MOD.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public cvType residuemodifiedcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("residue-modified-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("residue-modified-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MOD.3.GD Business Rules: MOD.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public string residuesite
        {
            get
            {
                XElement x = this.GetElement(XName.Get("residue-site", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("residue-site", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "residuesite", residuesiteLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOD.PMs.GD Business Rules: MOD.PMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public physicalmodificationsLocalType physicalmodifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("physical-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((physicalmodificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("physical-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOD.SMs.GD Business Rules: MOD.SMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public structuralmodificationsLocalType structuralmodifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((structuralmodificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structural-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOD.AMs.GD Business Rules: MOD.AMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (modificationtypecv, residuemodifiedcv, residuesite?, physicalmodifications?, structuralmodifications?, agentmodifications?)
        /// </para>
        /// </summary>
        public agentmodificationsLocalType agentmodifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("agent-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((agentmodificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("agent-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<modificationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("residue-modified-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("residue-site", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("physical-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(physicalmodificationsLocalType));
            localElementDictionary.Add(XName.Get("structural-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralmodificationsLocalType));
            localElementDictionary.Add(XName.Get("agent-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(agentmodificationsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class residuesiteLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private residuesiteLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (physicalmodification+)
        /// </para>
        /// </summary>
        public partial class physicalmodificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<physicalmodificationType> physicalmodificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator physicalmodificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<physicalmodificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static physicalmodificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("physical-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (physicalmodification+)
            /// </para>
            /// </summary>
            public physicalmodificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MOD.PM.GD Business Rules: MOD.PM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (physicalmodification+)
            /// </para>
            /// </summary>
            public IList<physicalmodificationType> physicalmodification
            {
                get
                {
                    if ((this.physicalmodificationField == null))
                    {
                        this.physicalmodificationField = new XTypedList<physicalmodificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("physical-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.physicalmodificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.physicalmodificationField = null;
                    }
                    else
                    {
                        if ((this.physicalmodificationField == null))
                        {
                            this.physicalmodificationField = XTypedList<physicalmodificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("physical-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<physicalmodificationType>(this.physicalmodificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("physical-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<physicalmodificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("physical-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(physicalmodificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (structuralmodification+)
        /// </para>
        /// </summary>
        public partial class structuralmodificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<structuralmodificationType> structuralmodificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator structuralmodificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<structuralmodificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static structuralmodificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structural-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (structuralmodification+)
            /// </para>
            /// </summary>
            public structuralmodificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MOD.SM.GD Business Rules: MOD.SM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (structuralmodification+)
            /// </para>
            /// </summary>
            public IList<structuralmodificationType> structuralmodification
            {
                get
                {
                    if ((this.structuralmodificationField == null))
                    {
                        this.structuralmodificationField = new XTypedList<structuralmodificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("structural-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.structuralmodificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.structuralmodificationField = null;
                    }
                    else
                    {
                        if ((this.structuralmodificationField == null))
                        {
                            this.structuralmodificationField = XTypedList<structuralmodificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("structural-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<structuralmodificationType>(this.structuralmodificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("structural-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<structuralmodificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("structural-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralmodificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (agentmodification+)
        /// </para>
        /// </summary>
        public partial class agentmodificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<agentmodificationType> agentmodificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator agentmodificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<agentmodificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static agentmodificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("agent-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (agentmodification+)
            /// </para>
            /// </summary>
            public agentmodificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MOD.AM.GD Business Rules: MOD.AM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (agentmodification+)
            /// </para>
            /// </summary>
            public IList<agentmodificationType> agentmodification
            {
                get
                {
                    if ((this.agentmodificationField == null))
                    {
                        this.agentmodificationField = new XTypedList<agentmodificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("agent-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.agentmodificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.agentmodificationField = null;
                    }
                    else
                    {
                        if ((this.agentmodificationField == null))
                        {
                            this.agentmodificationField = XTypedList<agentmodificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("agent-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<agentmodificationType>(this.agentmodificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("agent-modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<agentmodificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("agent-modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(agentmodificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SM.GD Business Rules: SM.BR
    /// </para>
    /// <para>
    /// Regular expression: (structuralmodificationtypecv, moieties?, molecularfragments?)
    /// </para>
    /// </summary>
    public partial class structuralmodificationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator structuralmodificationType(XElement xe) { return XTypedServices.ToXTypedElement<structuralmodificationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static structuralmodificationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structural-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-fragments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SM.GD Business Rules: SM.BR
        /// </para>
        /// <para>
        /// Regular expression: (structuralmodificationtypecv, moieties?, molecularfragments?)
        /// </para>
        /// </summary>
        public structuralmodificationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SM.1.CV.GD List Reference: SM.1.CV.LIST Business Rules: SM.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuralmodificationtypecv, moieties?, molecularfragments?)
        /// </para>
        /// </summary>
        public cvType structuralmodificationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structural-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SM.MOTs.GD Business Rules: SM.MOTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structuralmodificationtypecv, moieties?, molecularfragments?)
        /// </para>
        /// </summary>
        public moietiesLocalType moieties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((moietiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SM.MFRAGs.GD Business Rules: SM.FRAGs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structuralmodificationtypecv, moieties?, molecularfragments?)
        /// </para>
        /// </summary>
        public molecularfragmentsLocalType molecularfragments
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-fragments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((molecularfragmentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-fragments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("structural-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<structuralmodificationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("structural-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(moietiesLocalType));
            localElementDictionary.Add(XName.Get("molecular-fragments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularfragmentsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (moiety+)
        /// </para>
        /// </summary>
        public partial class moietiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<moietyType> moietyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator moietiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<moietiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static moietiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (moiety+)
            /// </para>
            /// </summary>
            public moietiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SM.MOT.GD Business Rules: SM.MOT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (moiety+)
            /// </para>
            /// </summary>
            public IList<moietyType> moiety
            {
                get
                {
                    if ((this.moietyField == null))
                    {
                        this.moietyField = new XTypedList<moietyType>(this, LinqToXsdTypeManager.Instance, XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.moietyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.moietyField = null;
                    }
                    else
                    {
                        if ((this.moietyField == null))
                        {
                            this.moietyField = XTypedList<moietyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<moietyType>(this.moietyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<moietiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(moietyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (molecularfragment+)
        /// </para>
        /// </summary>
        public partial class molecularfragmentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<molecularfragmentType> molecularfragmentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator molecularfragmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<molecularfragmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static molecularfragmentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-fragment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (molecularfragment+)
            /// </para>
            /// </summary>
            public molecularfragmentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SM.MFRAG.GD Business Rules: SM.FRAG.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (molecularfragment+)
            /// </para>
            /// </summary>
            public IList<molecularfragmentType> molecularfragment
            {
                get
                {
                    if ((this.molecularfragmentField == null))
                    {
                        this.molecularfragmentField = new XTypedList<molecularfragmentType>(this, LinqToXsdTypeManager.Instance, XName.Get("molecular-fragment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.molecularfragmentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.molecularfragmentField = null;
                    }
                    else
                    {
                        if ((this.molecularfragmentField == null))
                        {
                            this.molecularfragmentField = XTypedList<molecularfragmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("molecular-fragment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<molecularfragmentType>(this.molecularfragmentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("molecular-fragments", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<molecularfragmentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("molecular-fragment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularfragmentType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MOT.GD Business Rules: MOT.BR
    /// </para>
    /// <para>
    /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class moietyType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator moietyType(XElement xe) { return XTypedServices.ToXTypedElement<moietyType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static moietyType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("moiety-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("moiety-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("moiety-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MOT.GD Business Rules: MOT.BR
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public moietyType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOT.1.CV.GD List Reference: MOT.1.CV.LIST Business Rules: MOT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType moietyrolecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("moiety-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("moiety-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MOT.2.GD Business Rules: MOT.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string moietyname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("moiety-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("moiety-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "moietyname", moietynameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MOT.3.GD Business Rules: MOT.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string moietyid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("moiety-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("moiety-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "moietyid", moietyidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOT.4.CV.GD List Reference: MOT.4.CV.LIST Business Rules: MOT.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MOT.AMT.GD Business Rules: MOT.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (moietyrolecv, moietyname, moietyid?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("moietyType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<moietyType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("moiety-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("moiety-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("moiety-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class moietynameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private moietynameLocalType()
            {
            }
        }

        private class moietyidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private moietyidLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MFRAG.GD Business Rules: MFRAG.BR
    /// </para>
    /// <para>
    /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class molecularfragmentType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator molecularfragmentType(XElement xe) { return XTypedServices.ToXTypedElement<molecularfragmentType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static molecularfragmentType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-fragment-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-fragment-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MFRAG.GD Business Rules: MFRAG.BR
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public molecularfragmentType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MFRAG.1.CV.GD List Reference: MFRAG.1.CV.LIST Business Rules: MFRAG.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType rolecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MFRAG.2.GD Business Rules: MFRAG.2.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string molecularfragmentid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-fragment-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("molecular-fragment-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "molecularfragmentid", molecularfragmentidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MFRAG.3.GD Business Rules: MFRAG.3.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string molecularfragmentname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-fragment-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("molecular-fragment-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "molecularfragmentname", molecularfragmentnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MFRAG.4.CV.GD List Reference: MFRAG.4.CV.LIST Business Rules: MFRAG.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MFRAG.AMT.GD Business Rules: MFRAG.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, molecularfragmentid?, molecularfragmentname, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("molecular-fragmentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<molecularfragmentType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("molecular-fragment-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("molecular-fragment-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class molecularfragmentidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private molecularfragmentidLocalType()
            {
            }
        }

        private class molecularfragmentnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private molecularfragmentnameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PM.GD Business Rules: PM.BR
    /// </para>
    /// <para>
    /// Regular expression: (rolecv, numberofparameters?, parameters?)
    /// </para>
    /// </summary>
    public partial class physicalmodificationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator physicalmodificationType(XElement xe) { return XTypedServices.ToXTypedElement<physicalmodificationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static physicalmodificationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("number-of-parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PM.GD Business Rules: PM.BR
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, numberofparameters?, parameters?)
        /// </para>
        /// </summary>
        public physicalmodificationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PM.1.CV.GD List Reference: PM.1.CV.LIST Business Rules: PM.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, numberofparameters?, parameters?)
        /// </para>
        /// </summary>
        public cvType rolecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PM.2.GD Business Rules: PM.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, numberofparameters?, parameters?)
        /// </para>
        /// </summary>
        public object numberofparameters
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionIntType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofparameters", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionIntType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PM.PARAs.GD Business Rules: PM.PARAs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (rolecv, numberofparameters?, parameters?)
        /// </para>
        /// </summary>
        public parametersLocalType parameters
        {
            get
            {
                XElement x = this.GetElement(XName.Get("parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((parametersLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("physical-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<physicalmodificationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("number-of-parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(parametersLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (parameter+)
        /// </para>
        /// </summary>
        public partial class parametersLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<parameterType> parameterField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator parametersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<parametersLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static parametersLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("parameter", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (parameter+)
            /// </para>
            /// </summary>
            public parametersLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PM.PARA.GD Business Rules: PM.PARA.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (parameter+)
            /// </para>
            /// </summary>
            public IList<parameterType> parameter
            {
                get
                {
                    if ((this.parameterField == null))
                    {
                        this.parameterField = new XTypedList<parameterType>(this, LinqToXsdTypeManager.Instance, XName.Get("parameter", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.parameterField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.parameterField = null;
                    }
                    else
                    {
                        if ((this.parameterField == null))
                        {
                            this.parameterField = XTypedList<parameterType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("parameter", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<parameterType>(this.parameterField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("parameters", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<parametersLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("parameter", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(parameterType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PARA.GD Business Rules: PARA.BR
    /// </para>
    /// <para>
    /// Regular expression: (parametercv, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class parameterType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator parameterType(XElement xe) { return XTypedServices.ToXTypedElement<parameterType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static parameterType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("parameter-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PARA.GD Business Rules: PARA.BR
        /// </para>
        /// <para>
        /// Regular expression: (parametercv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public parameterType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PARA.1.CV.GD List Reference: PARA.1.CV.LIST Business Rules: PARA.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (parametercv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType parametercv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("parameter-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("parameter-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PARA.2.CV.GD List Reference: PARA.2.CV.LIST Business Rules: PARA.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (parametercv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PARA.AMT.GD Business Rules: PARA.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (parametercv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("parameterType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<parameterType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("parameter-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: AM.GD Business Rules: AM.BR
    /// </para>
    /// <para>
    /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class agentmodificationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator agentmodificationType(XElement xe) { return XTypedServices.ToXTypedElement<agentmodificationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static agentmodificationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("agent-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modification-agent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modification-agent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modification-process-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AM.GD Business Rules: AM.BR
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public agentmodificationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AM.1.CV.GD List Reference: AM.1.CV.LIST Business Rules: AM.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType agentmodificationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("agent-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("agent-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AM.2.CV.GD List Reference: AM.2.CV.LIST Business Rules: AM.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType rolecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AM.3.GD Business Rules: AM.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string modificationagent
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modification-agent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("modification-agent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "modificationagent", modificationagentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AM.4.GD Business Rules: AM.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string modificationagentid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modification-agent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("modification-agent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "modificationagentid", modificationagentidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AM.5.CV.GD List Reference: AM.5.CV.LIST Business Rules: AM.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType modificationprocesscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modification-process-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modification-process-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AM.6.CV.GD List Reference: AM.6.CV.LIST Business Rules: AM.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AM.AMT.GD Business Rules: AM.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (agentmodificationtypecv, rolecv, modificationagent, modificationagentid?, modificationprocesscv?, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("agent-modificationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<agentmodificationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("agent-modification-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("modification-agent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("modification-agent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("modification-process-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class modificationagentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private modificationagentLocalType()
            {
            }
        }

        private class modificationagentidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private modificationagentidLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SRCM.GD Business Rules: SRCM.BR
    /// </para>
    /// <para>
    /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
    /// </para>
    /// </summary>
    public partial class sourcematerialType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator sourcematerialType(XElement xe) { return XTypedServices.ToXTypedElement<sourcematerialType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static sourcematerialType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source-material-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("source-material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("source-material-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("organism-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("organism-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("development-stage-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("parts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("fractions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("organisms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SRCM.GD Business Rules: SRCM.BR
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public sourcematerialType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.1.CV.GD List Reference: SRCM.1.CV.LIST Business Rules: SRCM.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public cvType sourcematerialclasscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-material-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-material-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.2.CV.GD List Reference: SRCM.2.CV.LIST Business Rules: SRCM.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public cvType sourcematerialtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.3.CV.GD List Reference: SRCM.3.CV.LIST Business Rules: SRCM.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public cvType sourcematerialstatecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-material-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-material-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.4.GD Business Rules: SRCM.4.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public string organismid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("organism-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("organism-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "organismid", organismidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.5.CV.GD List Reference: SRCM.5.CV.BR Business Rules: SRCM.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public cvType organismnamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("organism-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("organism-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.6.CV.GD List Reference: SRCM.6.CV.LIST Business Rules: SRCM.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public cvType developmentstagecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("development-stage-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("development-stage-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.PTs.GD Business Rules: SRCM.PTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public partsLocalType parts
        {
            get
            {
                XElement x = this.GetElement(XName.Get("parts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((partsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("parts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.FRCTs.GD Business Rules: SRCM.FRCTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public fractionsLocalType fractions
        {
            get
            {
                XElement x = this.GetElement(XName.Get("fractions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((fractionsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("fractions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRCM.ORGs.GD Business Rules: SRCM.ORGs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sourcematerialclasscv, sourcematerialtypecv?, sourcematerialstatecv?, organismid?, organismnamecv?, developmentstagecv?, parts?, fractions?, organisms?)
        /// </para>
        /// </summary>
        public organismsLocalType organisms
        {
            get
            {
                XElement x = this.GetElement(XName.Get("organisms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((organismsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("organisms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("source-materialType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<sourcematerialType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("source-material-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("source-material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("source-material-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("organism-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("organism-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("development-stage-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("parts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(partsLocalType));
            localElementDictionary.Add(XName.Get("fractions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(fractionsLocalType));
            localElementDictionary.Add(XName.Get("organisms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(organismsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class organismidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private organismidLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (part+)
        /// </para>
        /// </summary>
        public partial class partsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<partType> partField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator partsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<partsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static partsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("part", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (part+)
            /// </para>
            /// </summary>
            public partsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SRCM.PT.GD Business Rules: SRCM.PT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (part+)
            /// </para>
            /// </summary>
            public IList<partType> part
            {
                get
                {
                    if ((this.partField == null))
                    {
                        this.partField = new XTypedList<partType>(this, LinqToXsdTypeManager.Instance, XName.Get("part", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.partField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.partField = null;
                    }
                    else
                    {
                        if ((this.partField == null))
                        {
                            this.partField = XTypedList<partType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("part", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<partType>(this.partField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("parts", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<partsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("part", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(partType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (fraction+)
        /// </para>
        /// </summary>
        public partial class fractionsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<fractionType> fractionField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator fractionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fractionsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static fractionsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("fraction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (fraction+)
            /// </para>
            /// </summary>
            public fractionsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SRCM.FRCT.GD Business Rules: SRCM.FRCT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (fraction+)
            /// </para>
            /// </summary>
            public IList<fractionType> fraction
            {
                get
                {
                    if ((this.fractionField == null))
                    {
                        this.fractionField = new XTypedList<fractionType>(this, LinqToXsdTypeManager.Instance, XName.Get("fraction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.fractionField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.fractionField = null;
                    }
                    else
                    {
                        if ((this.fractionField == null))
                        {
                            this.fractionField = XTypedList<fractionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("fraction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<fractionType>(this.fractionField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("fractions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<fractionsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("fraction", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(fractionType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (organism+)
        /// </para>
        /// </summary>
        public partial class organismsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<organismType> organismField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator organismsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<organismsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static organismsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("organism", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (organism+)
            /// </para>
            /// </summary>
            public organismsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SRCM.ORG.GD Business Rules: SRCM.ORG.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (organism+)
            /// </para>
            /// </summary>
            public IList<organismType> organism
            {
                get
                {
                    if ((this.organismField == null))
                    {
                        this.organismField = new XTypedList<organismType>(this, LinqToXsdTypeManager.Instance, XName.Get("organism", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.organismField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.organismField = null;
                    }
                    else
                    {
                        if ((this.organismField == null))
                        {
                            this.organismField = XTypedList<organismType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("organism", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<organismType>(this.organismField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("organisms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<organismsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("organism", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(organismType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PT.GD Business Rules: PT.BR
    /// </para>
    /// <para>
    /// Regular expression: (partcv, partlocationcv)
    /// </para>
    /// </summary>
    public partial class partType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator partType(XElement xe) { return XTypedServices.ToXTypedElement<partType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static partType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("part-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("part-location-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PT.GD Business Rules: PT.BR
        /// </para>
        /// <para>
        /// Regular expression: (partcv, partlocationcv)
        /// </para>
        /// </summary>
        public partType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PT.1.CV.GD List Reference: PT.1.CV.LIST Business Rules: PT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (partcv, partlocationcv)
        /// </para>
        /// </summary>
        public cvType partcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("part-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("part-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PT.2.CV.GD List Reference: PT.2.CV.LIST Business Rules: PT.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (partcv, partlocationcv)
        /// </para>
        /// </summary>
        public cvType partlocationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("part-location-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("part-location-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("partType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<partType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("part-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("part-location-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: FRCT.GD Business Rules: FRCT.BR
    /// </para>
    /// <para>
    /// Regular expression: (materialtypecv, fractioncv?)
    /// </para>
    /// </summary>
    public partial class fractionType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator fractionType(XElement xe) { return XTypedServices.ToXTypedElement<fractionType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static fractionType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("fraction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: FRCT.GD Business Rules: FRCT.BR
        /// </para>
        /// <para>
        /// Regular expression: (materialtypecv, fractioncv?)
        /// </para>
        /// </summary>
        public fractionType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: FRCT.1.CV.GD List Reference: FRCT.1.CV.LIST Business Rules: FRCT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (materialtypecv, fractioncv?)
        /// </para>
        /// </summary>
        public cvType materialtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: FRCT.2.CV.GD List Reference: FRCT.2.CV.LIST Business Rules: FRCT.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (materialtypecv, fractioncv?)
        /// </para>
        /// </summary>
        public cvType fractioncv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("fraction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("fraction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("fractionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<fractionType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("material-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("fraction-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: ORG.GD Business Rules: ORG.BR
    /// </para>
    /// <para>
    /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
    /// </para>
    /// </summary>
    public partial class organismType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator organismType(XElement xe) { return XTypedServices.ToXTypedElement<organismType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static organismType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("kingdom-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("phylum-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("order-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("family-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("genus-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("species-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("species-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("species-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("species-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("species-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("hybrid-species-maternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("hybrid-species-paternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("hybrid-type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("infraspecific-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ORG.GD Business Rules: ORG.BR
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public organismType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.1.CV.GD List Reference: ORG.1.CV.LIST Business Rules: ORG.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType kingdomcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("kingdom-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("kingdom-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.2.CV.GD List Reference: ORG.2.CV.LIST Business Rules: ORG.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType phylumcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("phylum-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("phylum-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.3.CV.GD List Reference: ORG.3.CV.LIST Business Rules: ORG.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType classcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.4.CV.GD List Reference: ORG.4.CV.LIST Business Rules: ORG.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType ordercv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("order-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("order-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.5.CV.GD List Reference: ORG.5.CV.LIST Business Rules: ORG.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType familycv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("family-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("family-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.6.CV.GD List Reference: ORG.6.CV.LIST Business Rules: ORG.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType genuscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("genus-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("genus-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.7.CV.GD List Reference: ORG.7.CV.LIST Business Rules: ORG.7.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType speciescv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("species-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("species-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ORG.8.GD Business Rules: ORG.8.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string speciesparentheticalauthor
        {
            get
            {
                XElement x = this.GetElement(XName.Get("species-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("species-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "speciesparentheticalauthor", speciesparentheticalauthorLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: ORG.9.GD Business Rules: ORG.9.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string speciesparentheticalauthoryear
        {
            get
            {
                XElement x = this.GetElement(XName.Get("species-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("species-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "speciesparentheticalauthoryear", speciesparentheticalauthoryearLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.10.GD Business Rules: ORG.10.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string speciesprimaryauthor
        {
            get
            {
                XElement x = this.GetElement(XName.Get("species-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("species-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "speciesprimaryauthor", speciesprimaryauthorLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.11.GD Business Rules: ORG.11.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string speciesprimaryauthoryear
        {
            get
            {
                XElement x = this.GetElement(XName.Get("species-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("species-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "speciesprimaryauthoryear", speciesprimaryauthoryearLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.12.CV.GD List Reference: ORG.12.CV.LIST Business Rules: ORG.12.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType hybridspeciesmaternalorganismcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("hybrid-species-maternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("hybrid-species-maternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.13.CV.GD List Reference: ORG.13.CV.LIST Business Rules: ORG.13.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType hybridspeciespaternalorganismcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("hybrid-species-paternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("hybrid-species-paternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.14.GD Business Rules: ORG.14.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> hybridtype
        {
            get
            {
                XElement x = this.GetElement(XName.Get("hybrid-type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("hybrid-type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes:ORG.15.CV.GD List Reference: ORG.15.CV.LIST Business Rules: ORG.15.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public cvType infraspecifictypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("infraspecific-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.16.GD Business Rules: ORG.16.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string infraspecificdescription
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infraspecific-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "infraspecificdescription", infraspecificdescriptionLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.17.GD Business Rules: ORG.17.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string infraspecificparentheticalauthor
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infraspecific-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "infraspecificparentheticalauthor", infraspecificparentheticalauthorLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.18.GD Business Rules: ORG.18.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string infraspecificparentheticalauthoryear
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infraspecific-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "infraspecificparentheticalauthoryear", infraspecificparentheticalauthoryearLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.19.GD Business Rules: ORG.19.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string infraspecificprimaryauthor
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infraspecific-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "infraspecificprimaryauthor", infraspecificprimaryauthorLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: ORG.20.GD Business Rules: ORG.20.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (kingdomcv?, phylumcv?, classcv?, ordercv?, familycv, genuscv, speciescv?, speciesparentheticalauthor?, speciesparentheticalauthoryear?, speciesprimaryauthor?, speciesprimaryauthoryear?, hybridspeciesmaternalorganismcv?, hybridspeciespaternalorganismcv?, hybridtype?, infraspecifictypecv?, infraspecificdescription?, infraspecificparentheticalauthor?, infraspecificparentheticalauthoryear?, infraspecificprimaryauthor?, infraspecificprimaryauthoryear?)
        /// </para>
        /// </summary>
        public string infraspecificprimaryauthoryear
        {
            get
            {
                XElement x = this.GetElement(XName.Get("infraspecific-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("infraspecific-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "infraspecificprimaryauthoryear", infraspecificprimaryauthoryearLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("organismType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<organismType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("kingdom-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("phylum-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("order-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("family-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("genus-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("species-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("species-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("species-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("species-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("species-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("hybrid-species-maternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("hybrid-species-paternal-organism-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("hybrid-type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(bool));
            localElementDictionary.Add(XName.Get("infraspecific-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("infraspecific-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("infraspecific-parenthetical-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("infraspecific-parenthetical-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("infraspecific-primary-author", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("infraspecific-primary-author-year", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class speciesparentheticalauthorLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private speciesparentheticalauthorLocalType()
            {
            }
        }

        private class speciesparentheticalauthoryearLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private speciesparentheticalauthoryearLocalType()
            {
            }
        }

        private class speciesprimaryauthorLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private speciesprimaryauthorLocalType()
            {
            }
        }

        private class speciesprimaryauthoryearLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private speciesprimaryauthoryearLocalType()
            {
            }
        }

        private class infraspecificdescriptionLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infraspecificdescriptionLocalType()
            {
            }
        }

        private class infraspecificparentheticalauthorLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infraspecificparentheticalauthorLocalType()
            {
            }
        }

        private class infraspecificparentheticalauthoryearLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infraspecificparentheticalauthoryearLocalType()
            {
            }
        }

        private class infraspecificprimaryauthorLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infraspecificprimaryauthorLocalType()
            {
            }
        }

        private class infraspecificprimaryauthoryearLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private infraspecificprimaryauthoryearLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: CHM.GD Business Rules: CHM.BR
    /// </para>
    /// <para>
    /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
    /// </para>
    /// </summary>
    public partial class chemicalType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator chemicalType(XElement xe) { return XTypedServices.ToXTypedElement<chemicalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static chemicalType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("non-stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CHM.GD Business Rules: CHM.BR
        /// </para>
        /// <para>
        /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
        /// </para>
        /// </summary>
        public chemicalType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CHM.1.GD Business Rules: CHM.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
        /// </para>
        /// </summary>
        public bool stoichiometric
        {
            get
            {
                XElement x = this.GetElement(XName.Get("stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CHM.2.GD Business Rules: CHM.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: CHM.RSs.GD Business Rules: CHM.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: CHM.NS.GD Business Rules: CHM.NS.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (stoichiometric, comment?, referencesources?, nonstoichiometric?)
        /// </para>
        /// </summary>
        public nonstoichiometricType nonstoichiometric
        {
            get
            {
                XElement x = this.GetElement(XName.Get("non-stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((nonstoichiometricType)(x));
            }
            set
            {
                this.SetElement(XName.Get("non-stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("chemicalType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<chemicalType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(bool));
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
            localElementDictionary.Add(XName.Get("non-stoichiometric", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(nonstoichiometricType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: CHM.RS.GD Business Rules: CHM.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: NS.GD Business Rules: NS.BR
    /// </para>
    /// <para>
    /// Regular expression: (numberofmoieties, moieties, properties?)
    /// </para>
    /// </summary>
    public partial class nonstoichiometricType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator nonstoichiometricType(XElement xe) { return XTypedServices.ToXTypedElement<nonstoichiometricType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static nonstoichiometricType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("number-of-moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NS.GD Business Rules: NS.BR
        /// </para>
        /// <para>
        /// Regular expression: (numberofmoieties, moieties, properties?)
        /// </para>
        /// </summary>
        public nonstoichiometricType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Issue: Guidance Notes: NS.1.GD Business Rules: NS.1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofmoieties, moieties, properties?)
        /// </para>
        /// </summary>
        public decimal numberofmoieties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofmoieties", numberofmoietiesLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NS.MOTs.GD Business Rules: NS.MOTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofmoieties, moieties, properties?)
        /// </para>
        /// </summary>
        public moietiesLocalType moieties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((moietiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NS.PROPs.GD Business Rules: NS.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (numberofmoieties, moieties, properties?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("non-stoichiometricType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<nonstoichiometricType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("number-of-moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(moietiesLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class numberofmoietiesLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 2m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private numberofmoietiesLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (moiety+)
        /// </para>
        /// </summary>
        public partial class moietiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<moietyType> moietyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator moietiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<moietiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static moietiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (moiety+)
            /// </para>
            /// </summary>
            public moietiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NS.MOT.GD Business Rules: NS.MOT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (moiety+)
            /// </para>
            /// </summary>
            public IList<moietyType> moiety
            {
                get
                {
                    if ((this.moietyField == null))
                    {
                        this.moietyField = new XTypedList<moietyType>(this, LinqToXsdTypeManager.Instance, XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.moietyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.moietyField = null;
                    }
                    else
                    {
                        if ((this.moietyField == null))
                        {
                            this.moietyField = XTypedList<moietyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<moietyType>(this.moietyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("moieties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<moietiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("moiety", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(moietyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NS.PROP.GD Business Rules: NS.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PROP.GD Business Rules: PROP.BR
    /// </para>
    /// <para>
    /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
    /// </para>
    /// </summary>
    public partial class propertyType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator propertyType(XElement xe) { return XTypedServices.ToXTypedElement<propertyType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static propertyType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("property-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PROP.GD Business Rules: PROP.BR
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public propertyType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.1.CV.GD List Reference: PROP.1.CV.LIST Business Rules: PROP.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType propertytypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("property-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("property-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.2.CV.GD List Reference: PROP.2.CV.LIST Business Rules: PROP.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType propertynamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("property-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("property-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.3.GD Business Rules: PROP.3.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public string substanceid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substanceid", substanceidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.4.GD Business Rules: PROP.4.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public string substancename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substancename", substancenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.5.CV.GD List Reference: PROP.5.CV.LIST Business Rules: PROP.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PROP.AMT.GD Business Rules: PROP.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (propertytypecv, propertynamecv, substanceid?, substancename?, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("propertyType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<propertyType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("property-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("property-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class substanceidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substanceidLocalType()
            {
            }
        }

        private class substancenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substancenameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PRO.GD Business Rules: PRO.BR
    /// </para>
    /// <para>
    /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
    /// </para>
    /// </summary>
    public partial class proteinType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator proteinType(XElement xe) { return XTypedServices.ToXTypedElement<proteinType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static proteinType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("disulfide-linkage", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("protein-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PRO.GD Business Rules: PRO.BR
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public proteinType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.1.CV.GD List Reference: PRO.1.CV.LIST Business Rules: PRO.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public cvType sequencetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PRO.2.GD Business Rules: PRO.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public decimal numberofsubunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofsubunits", numberofsubunitsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PRO.3.GD Business Rules: PRO.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public string disulfidelinkage
        {
            get
            {
                XElement x = this.GetElement(XName.Get("disulfide-linkage", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("disulfide-linkage", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "disulfidelinkage", disulfidelinkageLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PRO.4.GD Business Rules: PRO.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.PSUs.GD Business Rules: PRO.PSUs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public proteinsubunitsLocalType proteinsubunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("protein-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((proteinsubunitsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("protein-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.GLYs.GD Business Rules: PRO.GLYs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public glycosylationsLocalType glycosylations
        {
            get
            {
                XElement x = this.GetElement(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((glycosylationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.MODs.GD Business Rules: PRO.MODs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public modificationsLocalType modifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((modificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.MWTs.GD Business Rules: PRO.MWTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public molecularweightsLocalType molecularweights
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((molecularweightsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.PROPs.GD Business Rules: PRO.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PRO.RSs.GD Business Rules: PRO.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, disulfidelinkage, comment?, proteinsubunits, glycosylations, modifications?, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("proteinType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<proteinType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("disulfide-linkage", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("protein-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(proteinsubunitsLocalType));
            localElementDictionary.Add(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(glycosylationsLocalType));
            localElementDictionary.Add(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationsLocalType));
            localElementDictionary.Add(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightsLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class numberofsubunitsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private numberofsubunitsLocalType()
            {
            }
        }

        private class disulfidelinkageLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2500, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private disulfidelinkageLocalType()
            {
            }
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (proteinsubunit+)
        /// </para>
        /// </summary>
        public partial class proteinsubunitsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<proteinsubunitType> proteinsubunitField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator proteinsubunitsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<proteinsubunitsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static proteinsubunitsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("protein-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (proteinsubunit+)
            /// </para>
            /// </summary>
            public proteinsubunitsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.PSU.GD Business Rules: PRO.PSU.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (proteinsubunit+)
            /// </para>
            /// </summary>
            public IList<proteinsubunitType> proteinsubunit
            {
                get
                {
                    if ((this.proteinsubunitField == null))
                    {
                        this.proteinsubunitField = new XTypedList<proteinsubunitType>(this, LinqToXsdTypeManager.Instance, XName.Get("protein-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.proteinsubunitField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.proteinsubunitField = null;
                    }
                    else
                    {
                        if ((this.proteinsubunitField == null))
                        {
                            this.proteinsubunitField = XTypedList<proteinsubunitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("protein-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<proteinsubunitType>(this.proteinsubunitField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("protein-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<proteinsubunitsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("protein-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(proteinsubunitType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (glycosylation+)
        /// </para>
        /// </summary>
        public partial class glycosylationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<glycosylationType> glycosylationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator glycosylationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<glycosylationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static glycosylationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (glycosylation+)
            /// </para>
            /// </summary>
            public glycosylationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.GLY.GD Business Rules: PRO.GLY.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (glycosylation+)
            /// </para>
            /// </summary>
            public IList<glycosylationType> glycosylation
            {
                get
                {
                    if ((this.glycosylationField == null))
                    {
                        this.glycosylationField = new XTypedList<glycosylationType>(this, LinqToXsdTypeManager.Instance, XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.glycosylationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.glycosylationField = null;
                    }
                    else
                    {
                        if ((this.glycosylationField == null))
                        {
                            this.glycosylationField = XTypedList<glycosylationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<glycosylationType>(this.glycosylationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<glycosylationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(glycosylationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (modification+)
        /// </para>
        /// </summary>
        public partial class modificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<modificationType> modificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator modificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static modificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public modificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.MOD.GD Business Rules: PRO.MOD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public IList<modificationType> modification
            {
                get
                {
                    if ((this.modificationField == null))
                    {
                        this.modificationField = new XTypedList<modificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.modificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.modificationField = null;
                    }
                    else
                    {
                        if ((this.modificationField == null))
                        {
                            this.modificationField = XTypedList<modificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<modificationType>(this.modificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<modificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (molecularweight+)
        /// </para>
        /// </summary>
        public partial class molecularweightsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<molecularweightType> molecularweightField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator molecularweightsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<molecularweightsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static molecularweightsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public molecularweightsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.MWT.GD Business Rules: PRO.MWT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public IList<molecularweightType> molecularweight
            {
                get
                {
                    if ((this.molecularweightField == null))
                    {
                        this.molecularweightField = new XTypedList<molecularweightType>(this, LinqToXsdTypeManager.Instance, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.molecularweightField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.molecularweightField = null;
                    }
                    else
                    {
                        if ((this.molecularweightField == null))
                        {
                            this.molecularweightField = XTypedList<molecularweightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<molecularweightType>(this.molecularweightField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<molecularweightsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.PROP.GD Business Rules: PRO.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: PRO.RS.GD Business Rules: PRO.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MWT.GD Business Rules: MWT.BR
    /// </para>
    /// <para>
    /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
    /// </para>
    /// </summary>
    public partial class molecularweightType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator molecularweightType(XElement xe) { return XTypedServices.ToXTypedElement<molecularweightType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static molecularweightType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-weight-method-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-weight-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MWT.GD Business Rules: MWT.BR
        /// </para>
        /// <para>
        /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public molecularweightType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MWT.1.CV.GD List Reference: MWT.1.CV.LIST Business Rules: MWT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType molecularweightmethodcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weight-method-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weight-method-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MWT.2.CV.GD List Reference: MWT.2.CV.LIST Business Rules: MWT.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType molecularweighttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weight-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weight-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MWT.3.CV.GD List Reference: MWT.3.CV.LIST Business Rules: MWT.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MWT.AMT.GD Business Rules: MWT.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (molecularweightmethodcv, molecularweighttypecv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("molecular-weightType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<molecularweightType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("molecular-weight-method-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("molecular-weight-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GLY.GD Business Rules: GLY.BR
    /// </para>
    /// <para>
    /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
    /// </para>
    /// </summary>
    public partial class glycosylationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator glycosylationType(XElement xe) { return XTypedServices.ToXTypedElement<glycosylationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static glycosylationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("glycosylation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("n-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("o-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("c-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GLY.GD Business Rules: GLY.BR
        /// </para>
        /// <para>
        /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
        /// </para>
        /// </summary>
        public glycosylationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GLY.1.CV.GD List Reference: GLY.1.CV.LIST Business Rules: GLY.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
        /// </para>
        /// </summary>
        public cvType glycosylationtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("glycosylation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("glycosylation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GLY.2.GD Business Rules: GLY.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
        /// </para>
        /// </summary>
        public string nglycosylation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("n-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("n-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "nglycosylation", nglycosylationLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GLY.3.GD Business Rules: GLY.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
        /// </para>
        /// </summary>
        public string oglycosylation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("o-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("o-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "oglycosylation", oglycosylationLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GLY.4.GD Business Rules: GLY.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (glycosylationtypecv, nglycosylation?, oglycosylation?, cglycosylation?)
        /// </para>
        /// </summary>
        public string cglycosylation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("c-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("c-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "cglycosylation", cglycosylationLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("glycosylationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<glycosylationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("glycosylation-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("n-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("o-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("c-glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class nglycosylationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private nglycosylationLocalType()
            {
            }
        }

        private class oglycosylationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private oglycosylationLocalType()
            {
            }
        }

        private class cglycosylationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private cglycosylationLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PSU.GD Business Rules: PSU.BR
    /// </para>
    /// <para>
    /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
    /// </para>
    /// </summary>
    public partial class proteinsubunitType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator proteinsubunitType(XElement xe) { return XTypedServices.ToXTypedElement<proteinsubunitType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static proteinsubunitType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("n-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("n-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("c-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("c-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.GD Business Rules: PSU.BR
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public proteinsubunitType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.1.GD Business Rules: PSU.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public decimal subunit
        {
            get
            {
                XElement x = this.GetElement(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "subunit", subunitLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.2.GD Business Rules: PSU.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public string sequence
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "sequence", sequenceLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.3.GD Business Rules: PSU.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public long length
        {
            get
            {
                XElement x = this.GetElement(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "length", lengthLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PSU.4.CV.GD List Reference: PSU.4.CV.LIST Business Rules: PSU.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public cvType nterminalmodificationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("n-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("n-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.5.GD Business Rules: PSU.5.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public string nterminalmodificationid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("n-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("n-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "nterminalmodificationid", nterminalmodificationidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PSU.6.CV.GD List Reference: PSU.6.CV.LIST Business Rules: PSU.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public cvType cterminalmodificationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("c-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("c-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PSU.7.GD Business Rules: PSU.7.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length, nterminalmodificationcv, nterminalmodificationid?, cterminalmodificationcv, cterminalmodificationid?)
        /// </para>
        /// </summary>
        public string cterminalmodificationid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("c-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("c-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "cterminalmodificationid", cterminalmodificationidLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("protein-subunitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<proteinsubunitType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(long));
            localElementDictionary.Add(XName.Get("n-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("n-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("c-terminal-modification-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("c-terminal-modification-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class subunitLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(576)), null, 0, 0, null, 9999m, 0, 0m, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private subunitLocalType()
            {
            }
        }

        private class sequenceLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private sequenceLocalType()
            {
            }
        }

        private class lengthLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 999999999999, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private lengthLocalType()
            {
            }
        }

        private class nterminalmodificationidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private nterminalmodificationidLocalType()
            {
            }
        }

        private class cterminalmodificationidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private cterminalmodificationidLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: NA.GD Business Rules: NA.BR
    /// </para>
    /// <para>
    /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
    /// </para>
    /// </summary>
    public partial class nucleicacidType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator nucleicacidType(XElement xe) { return XTypedServices.ToXTypedElement<nucleicacidType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static nucleicacidType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("area-of-hybridisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("nucleic-acid-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NA.GD Business Rules: NA.BR
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public nucleicacidType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.1.CV.GD List Reference: NA.1.CV.LIST Business Rules: NA.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public cvType sequencetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NA.2.GD Business Rules: NA.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public decimal numberofsubunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofsubunits", numberofsubunitsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NA.3.GD Business Rules: NA.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public string areaofhybridisation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("area-of-hybridisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("area-of-hybridisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "areaofhybridisation", areaofhybridisationLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NA.4.GD Business Rules: NA.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.NASUs.GD Business Rules: NA.NASUs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public nucleicacidsubunitsLocalType nucleicacidsubunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("nucleic-acid-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((nucleicacidsubunitsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("nucleic-acid-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.MODs.GD Business Rules: NA.MODs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public modificationsLocalType modifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((modificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.PROPs.GD Business Rules: NA.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.MWTs.GD Business Rules: NA.MWTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public molecularweightsLocalType molecularweights
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((molecularweightsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NA.RSs.GD Business Rules: NA.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sequencetypecv, numberofsubunits, areaofhybridisation?, comment?, nucleicacidsubunits, modifications?, properties?, molecularweights?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("nucleic-acidType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<nucleicacidType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("number-of-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("area-of-hybridisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("nucleic-acid-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(nucleicacidsubunitsLocalType));
            localElementDictionary.Add(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationsLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
            localElementDictionary.Add(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightsLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class numberofsubunitsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private numberofsubunitsLocalType()
            {
            }
        }

        private class areaofhybridisationLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private areaofhybridisationLocalType()
            {
            }
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (nucleicacidsubunit+)
        /// </para>
        /// </summary>
        public partial class nucleicacidsubunitsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<nucleicacidsubunitType> nucleicacidsubunitField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator nucleicacidsubunitsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nucleicacidsubunitsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static nucleicacidsubunitsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nucleic-acid-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (nucleicacidsubunit+)
            /// </para>
            /// </summary>
            public nucleicacidsubunitsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NA.NASU.GD Business Rules: NA.NASU.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nucleicacidsubunit+)
            /// </para>
            /// </summary>
            public IList<nucleicacidsubunitType> nucleicacidsubunit
            {
                get
                {
                    if ((this.nucleicacidsubunitField == null))
                    {
                        this.nucleicacidsubunitField = new XTypedList<nucleicacidsubunitType>(this, LinqToXsdTypeManager.Instance, XName.Get("nucleic-acid-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.nucleicacidsubunitField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.nucleicacidsubunitField = null;
                    }
                    else
                    {
                        if ((this.nucleicacidsubunitField == null))
                        {
                            this.nucleicacidsubunitField = XTypedList<nucleicacidsubunitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("nucleic-acid-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<nucleicacidsubunitType>(this.nucleicacidsubunitField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("nucleic-acid-subunits", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<nucleicacidsubunitsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("nucleic-acid-subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(nucleicacidsubunitType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (modification+)
        /// </para>
        /// </summary>
        public partial class modificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<modificationType> modificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator modificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static modificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public modificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NA.MOD.GD Business Rules: NA.MOD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public IList<modificationType> modification
            {
                get
                {
                    if ((this.modificationField == null))
                    {
                        this.modificationField = new XTypedList<modificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.modificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.modificationField = null;
                    }
                    else
                    {
                        if ((this.modificationField == null))
                        {
                            this.modificationField = XTypedList<modificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<modificationType>(this.modificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<modificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NA.PROP.GD Business Rules: NA.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (molecularweight+)
        /// </para>
        /// </summary>
        public partial class molecularweightsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<molecularweightType> molecularweightField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator molecularweightsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<molecularweightsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static molecularweightsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public molecularweightsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: NA.MWT.GD Business Rules: NA.MWT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public IList<molecularweightType> molecularweight
            {
                get
                {
                    if ((this.molecularweightField == null))
                    {
                        this.molecularweightField = new XTypedList<molecularweightType>(this, LinqToXsdTypeManager.Instance, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.molecularweightField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.molecularweightField = null;
                    }
                    else
                    {
                        if ((this.molecularweightField == null))
                        {
                            this.molecularweightField = XTypedList<molecularweightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<molecularweightType>(this.molecularweightField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<molecularweightsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: NA.RS.GD Business Rules: NA.RS.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: NASU.GD Business Rules: NASU.BR
    /// </para>
    /// <para>
    /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
    /// </para>
    /// </summary>
    public partial class nucleicacidsubunitType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator nucleicacidsubunitType(XElement xe) { return XTypedServices.ToXTypedElement<nucleicacidsubunitType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static nucleicacidsubunitType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("five-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("three-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: NASU.GD Business Rules: NASU.BR
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public nucleicacidsubunitType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NASU.1.GD Business Rules: NASU.1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public decimal subunit
        {
            get
            {
                XElement x = this.GetElement(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "subunit", subunitLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NASU.2.GD Business Rules: NASU.2.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public string sequence
        {
            get
            {
                XElement x = this.GetElement(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "sequence", sequenceLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NASU.3.GD Business Rules: NASU.3.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public System.Nullable<long> length
        {
            get
            {
                XElement x = this.GetElement(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "length", lengthLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NASU.4.CV.GD List Reference: NASU.4.CV.LIST Business Rules: NASU.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public cvType fiveprimecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("five-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("five-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: NASU.5.CV.GD List Reference: NASU.5.CV.LIST Business Rules: NASU.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (subunit, sequence, length?, fiveprimecv, threeprimecv)
        /// </para>
        /// </summary>
        public cvType threeprimecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("three-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("three-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("nucleic-acid-subunitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<nucleicacidsubunitType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("subunit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("sequence", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("length", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(long));
            localElementDictionary.Add(XName.Get("five-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("three-prime-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class subunitLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(576)), null, 0, 0, null, 9999m, 0, 0m, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private subunitLocalType()
            {
            }
        }

        private class sequenceLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private sequenceLocalType()
            {
            }
        }

        private class lengthLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 999999999999, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private lengthLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: POLY.GD Business Rules: POLY.BR
    /// </para>
    /// <para>
    /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
    /// </para>
    /// </summary>
    public partial class polymerType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator polymerType(XElement xe) { return XTypedServices.ToXTypedElement<polymerType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static polymerType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("polymer-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("polymer-geometry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("copolymer-sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("monomer-descriptions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structural-repeats", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: POLY.GD Business Rules: POLY.BR
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public polymerType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.1.CV.GD List Reference: POLY.1.CV.LIST Business Rules: POLY.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public cvType polymerclasscv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("polymer-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("polymer-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.2.CV.GD List Reference: POLY.2.CV.LIST Business Rules: POLY.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public cvType polymergeometrycv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("polymer-geometry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("polymer-geometry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.3.CV.GD List Reference: POLY.3.CV.LIST Business Rules: POLY.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public cvType copolymersequencetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("copolymer-sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("copolymer-sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.4.GD Business Rules: POLY.4.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.MDESCs.GD Business Rules: POLY.MDESCs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public monomerdescriptionsLocalType monomerdescriptions
        {
            get
            {
                XElement x = this.GetElement(XName.Get("monomer-descriptions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((monomerdescriptionsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("monomer-descriptions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.SRs.GD Business Rules: POLY.SRs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public structuralrepeatsLocalType structuralrepeats
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-repeats", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((structuralrepeatsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structural-repeats", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.MWTs.GD Business Rules: POLY.MWTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public molecularweightsLocalType molecularweights
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((molecularweightsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.PROPs.GD Business Rules: POLY.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.MODs.GD Business Rules: POLY.MODs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public modificationsLocalType modifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((modificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.SRCMs.GD Business Rules: POLY.SRCMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public sourcematerialsLocalType sourcematerials
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((sourcematerialsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: POLY.RSs.GD Business Rules: POLY.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (polymerclasscv, polymergeometrycv, copolymersequencetypecv, comment?, monomerdescriptions?, structuralrepeats, molecularweights?, properties?, modifications?, sourcematerials, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("polymerType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<polymerType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("polymer-class-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("polymer-geometry-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("copolymer-sequence-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("monomer-descriptions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(monomerdescriptionsLocalType));
            localElementDictionary.Add(XName.Get("structural-repeats", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralrepeatsLocalType));
            localElementDictionary.Add(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightsLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
            localElementDictionary.Add(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationsLocalType));
            localElementDictionary.Add(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialsLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (monomerdescription+)
        /// </para>
        /// </summary>
        public partial class monomerdescriptionsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<monomerdescriptionType> monomerdescriptionField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator monomerdescriptionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<monomerdescriptionsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static monomerdescriptionsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("monomer-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (monomerdescription+)
            /// </para>
            /// </summary>
            public monomerdescriptionsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.MDESC.GD Business Rules: POLY.MDESC.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (monomerdescription+)
            /// </para>
            /// </summary>
            public IList<monomerdescriptionType> monomerdescription
            {
                get
                {
                    if ((this.monomerdescriptionField == null))
                    {
                        this.monomerdescriptionField = new XTypedList<monomerdescriptionType>(this, LinqToXsdTypeManager.Instance, XName.Get("monomer-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.monomerdescriptionField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.monomerdescriptionField = null;
                    }
                    else
                    {
                        if ((this.monomerdescriptionField == null))
                        {
                            this.monomerdescriptionField = XTypedList<monomerdescriptionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("monomer-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<monomerdescriptionType>(this.monomerdescriptionField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("monomer-descriptions", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<monomerdescriptionsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("monomer-description", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(monomerdescriptionType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (structuralrepeat+)
        /// </para>
        /// </summary>
        public partial class structuralrepeatsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<structuralrepeatType> structuralrepeatField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator structuralrepeatsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<structuralrepeatsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static structuralrepeatsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structural-repeat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (structuralrepeat+)
            /// </para>
            /// </summary>
            public structuralrepeatsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.SR.GD Business Rules: POLY.SR.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (structuralrepeat+)
            /// </para>
            /// </summary>
            public IList<structuralrepeatType> structuralrepeat
            {
                get
                {
                    if ((this.structuralrepeatField == null))
                    {
                        this.structuralrepeatField = new XTypedList<structuralrepeatType>(this, LinqToXsdTypeManager.Instance, XName.Get("structural-repeat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.structuralrepeatField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.structuralrepeatField = null;
                    }
                    else
                    {
                        if ((this.structuralrepeatField == null))
                        {
                            this.structuralrepeatField = XTypedList<structuralrepeatType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("structural-repeat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<structuralrepeatType>(this.structuralrepeatField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("structural-repeats", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<structuralrepeatsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("structural-repeat", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralrepeatType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (molecularweight+)
        /// </para>
        /// </summary>
        public partial class molecularweightsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<molecularweightType> molecularweightField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator molecularweightsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<molecularweightsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static molecularweightsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public molecularweightsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.MWT.GD Business Rules: POLY.MWT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public IList<molecularweightType> molecularweight
            {
                get
                {
                    if ((this.molecularweightField == null))
                    {
                        this.molecularweightField = new XTypedList<molecularweightType>(this, LinqToXsdTypeManager.Instance, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.molecularweightField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.molecularweightField = null;
                    }
                    else
                    {
                        if ((this.molecularweightField == null))
                        {
                            this.molecularweightField = XTypedList<molecularweightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<molecularweightType>(this.molecularweightField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<molecularweightsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.PROP.GD Business Rules: POLY.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (modification+)
        /// </para>
        /// </summary>
        public partial class modificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<modificationType> modificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator modificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static modificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public modificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.MOD.GD Business Rules: POLY.MOD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public IList<modificationType> modification
            {
                get
                {
                    if ((this.modificationField == null))
                    {
                        this.modificationField = new XTypedList<modificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.modificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.modificationField = null;
                    }
                    else
                    {
                        if ((this.modificationField == null))
                        {
                            this.modificationField = XTypedList<modificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<modificationType>(this.modificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<modificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (sourcematerial+)
        /// </para>
        /// </summary>
        public partial class sourcematerialsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<sourcematerialType> sourcematerialField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator sourcematerialsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcematerialsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static sourcematerialsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public sourcematerialsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.SRCM.GD Business Rules: POLY.SRCM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public IList<sourcematerialType> sourcematerial
            {
                get
                {
                    if ((this.sourcematerialField == null))
                    {
                        this.sourcematerialField = new XTypedList<sourcematerialType>(this, LinqToXsdTypeManager.Instance, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.sourcematerialField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.sourcematerialField = null;
                    }
                    else
                    {
                        if ((this.sourcematerialField == null))
                        {
                            this.sourcematerialField = XTypedList<sourcematerialType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<sourcematerialType>(this.sourcematerialField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sourcematerialsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: POLY.RS.GD Business Rules: POLY.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SR.GD Business Rules: SR.BR
    /// </para>
    /// <para>
    /// Regular expression: (numberofstructuralrepeatunits, structuralrepeatunits)
    /// </para>
    /// </summary>
    public partial class structuralrepeatType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator structuralrepeatType(XElement xe) { return XTypedServices.ToXTypedElement<structuralrepeatType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static structuralrepeatType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("number-of-structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SR.GD Business Rules: SR.BR
        /// </para>
        /// <para>
        /// Regular expression: (numberofstructuralrepeatunits, structuralrepeatunits)
        /// </para>
        /// </summary>
        public structuralrepeatType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SR.1.GD Business Rules: SR.1.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofstructuralrepeatunits, structuralrepeatunits)
        /// </para>
        /// </summary>
        public decimal numberofstructuralrepeatunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofstructuralrepeatunits", numberofstructuralrepeatunitsLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SR.SRUs.GD Business Rules: SR.SRUs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofstructuralrepeatunits, structuralrepeatunits)
        /// </para>
        /// </summary>
        public structuralrepeatunitsLocalType structuralrepeatunits
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((structuralrepeatunitsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("structural-repeatType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<structuralrepeatType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("number-of-structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralrepeatunitsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class numberofstructuralrepeatunitsLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private numberofstructuralrepeatunitsLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (structuralrepeatunit+)
        /// </para>
        /// </summary>
        public partial class structuralrepeatunitsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<structuralrepeatunitType> structuralrepeatunitField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator structuralrepeatunitsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<structuralrepeatunitsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static structuralrepeatunitsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structural-repeat-unit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (structuralrepeatunit+)
            /// </para>
            /// </summary>
            public structuralrepeatunitsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SR.SRU.GD Business Rules: SR.SRU.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (structuralrepeatunit+)
            /// </para>
            /// </summary>
            public IList<structuralrepeatunitType> structuralrepeatunit
            {
                get
                {
                    if ((this.structuralrepeatunitField == null))
                    {
                        this.structuralrepeatunitField = new XTypedList<structuralrepeatunitType>(this, LinqToXsdTypeManager.Instance, XName.Get("structural-repeat-unit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.structuralrepeatunitField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.structuralrepeatunitField = null;
                    }
                    else
                    {
                        if ((this.structuralrepeatunitField == null))
                        {
                            this.structuralrepeatunitField = XTypedList<structuralrepeatunitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("structural-repeat-unit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<structuralrepeatunitType>(this.structuralrepeatunitField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("structural-repeat-units", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<structuralrepeatunitsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("structural-repeat-unit", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuralrepeatunitType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SRU.GD Business Rules: SRU.BR
    /// </para>
    /// <para>
    /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
    /// </para>
    /// </summary>
    public partial class structuralrepeatunitType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator structuralrepeatunitType(XElement xe) { return XTypedServices.ToXTypedElement<structuralrepeatunitType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static structuralrepeatunitType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("orientation-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("repeat-unit-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("degree-of-polymerisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SRU.GD Business Rules: SRU.BR
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public structuralrepeatunitType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRU.1.CV.GD List Reference: SRU.1.CV.LIST Business Rules: SRU.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public cvType orientationofpolymerisationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("orientation-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("orientation-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRU.2.CV.GD List Reference: SRU.2.CV.LIST Business Rules: SRU.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public cvType repeatunitnamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("repeat-unit-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("repeat-unit-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRU.3.CV.GD List Reference: SRU.3.CV.LIST Business Rules: SRU.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRU.AMT.GD Business Rules: SRU.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SRU.DOP.GD Business Rules: SRU.DOP.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orientationofpolymerisationcv, repeatunitnamecv, amounttypecv?, amount?, degreeofpolymerisation)
        /// </para>
        /// </summary>
        public degreeofpolymerisationType degreeofpolymerisation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("degree-of-polymerisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((degreeofpolymerisationType)(x));
            }
            set
            {
                this.SetElement(XName.Get("degree-of-polymerisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("structural-repeat-unitType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<structuralrepeatunitType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("orientation-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("repeat-unit-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
            localElementDictionary.Add(XName.Get("degree-of-polymerisation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(degreeofpolymerisationType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: DOP.GD Business Rules: DOP.BR
    /// </para>
    /// <para>
    /// Regular expression: (degreeofpolymerisationcv, amounttypecv?, amount)
    /// </para>
    /// </summary>
    public partial class degreeofpolymerisationType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator degreeofpolymerisationType(XElement xe) { return XTypedServices.ToXTypedElement<degreeofpolymerisationType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static degreeofpolymerisationType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("degree-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: DOP.GD Business Rules: DOP.BR
        /// </para>
        /// <para>
        /// Regular expression: (degreeofpolymerisationcv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public degreeofpolymerisationType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: DOP.1.CV.GD List Reference: DOP.1.CV.LIST Business Rules: DOP.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (degreeofpolymerisationcv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType degreeofpolymerisationcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("degree-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("degree-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: DOP.2.CV.GD List Reference: DOP.2.CV.LIST Business Rules: DOP.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (degreeofpolymerisationcv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: DOP.AMT.GD Business Rules: DOP.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (degreeofpolymerisationcv, amounttypecv?, amount)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("degree-of-polymerisationType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<degreeofpolymerisationType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("degree-of-polymerisation-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MDESC.GD Business Rules: MDESC.BR
    /// </para>
    /// <para>
    /// Regular expression: (numberofmonomers, monomers)
    /// </para>
    /// </summary>
    public partial class monomerdescriptionType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator monomerdescriptionType(XElement xe) { return XTypedServices.ToXTypedElement<monomerdescriptionType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static monomerdescriptionType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("number-of-monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MDESC.GD Business Rules: MDESC.BR
        /// </para>
        /// <para>
        /// Regular expression: (numberofmonomers, monomers)
        /// </para>
        /// </summary>
        public monomerdescriptionType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MDESC.1.GD Business Rules: MDESC.1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofmonomers, monomers)
        /// </para>
        /// </summary>
        public decimal numberofmonomers
        {
            get
            {
                XElement x = this.GetElement(XName.Get("number-of-monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("number-of-monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "numberofmonomers", numberofmonomersLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MDESC.MONs.GD Business Rules: MDESC.MONs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numberofmonomers, monomers)
        /// </para>
        /// </summary>
        public monomersLocalType monomers
        {
            get
            {
                XElement x = this.GetElement(XName.Get("monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((monomersLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("monomer-descriptionType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<monomerdescriptionType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("number-of-monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(decimal));
            localElementDictionary.Add(XName.Get("monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(monomersLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class numberofmonomersLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

            private numberofmonomersLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (monomer+)
        /// </para>
        /// </summary>
        public partial class monomersLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<monomerType> monomerField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator monomersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<monomersLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static monomersLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("monomer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (monomer+)
            /// </para>
            /// </summary>
            public monomersLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MDESC.MON.GD Business Rules: MDESC.MON.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (monomer+)
            /// </para>
            /// </summary>
            public IList<monomerType> monomer
            {
                get
                {
                    if ((this.monomerField == null))
                    {
                        this.monomerField = new XTypedList<monomerType>(this, LinqToXsdTypeManager.Instance, XName.Get("monomer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.monomerField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.monomerField = null;
                    }
                    else
                    {
                        if ((this.monomerField == null))
                        {
                            this.monomerField = XTypedList<monomerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("monomer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<monomerType>(this.monomerField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("monomers", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<monomersLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("monomer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(monomerType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MON.GD Business Rules: MON.BR
    /// </para>
    /// <para>
    /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class monomerType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator monomerType(XElement xe) { return XTypedServices.ToXTypedElement<monomerType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static monomerType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("monomer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("monomer-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MON.GD Business Rules: MON.BR
        /// </para>
        /// <para>
        /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public monomerType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MON.1.GD Business Rules: MON.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string monomerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("monomer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("monomer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "monomerid", monomeridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MON.2.GD Business Rules: MON.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string monomername
        {
            get
            {
                XElement x = this.GetElement(XName.Get("monomer-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("monomer-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "monomername", monomernameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MON.3.CV.GD List Reference: MON.3.CV.LIST Business Rules: MON.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MON.AMT.GD Business Rules: MON.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (monomerid?, monomername, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("monomerType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<monomerType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("monomer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("monomer-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class monomeridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private monomeridLocalType()
            {
            }
        }

        private class monomernameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private monomernameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SD.GD Business Rules: SD.BR
    /// </para>
    /// <para>
    /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
    /// </para>
    /// </summary>
    public partial class structurallydiverseType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator structurallydiverseType(XElement xe) { return XTypedServices.ToXTypedElement<structurallydiverseType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static structurallydiverseType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SD.GD Business Rules: SD.BR
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public structurallydiverseType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SD.1.GD Business Rules: SD.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public string comment
        {
            get
            {
                XElement x = this.GetElement(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "comment", commentLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.MODs.GD Business Rules: SD.MODs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public modificationsLocalType modifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((modificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.SRCMs.GD Business Rules: SD.SRCMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public sourcematerialsLocalType sourcematerials
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((sourcematerialsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.GLYs.GD Business Rules: SD.GLYs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public glycosylationsLocalType glycosylations
        {
            get
            {
                XElement x = this.GetElement(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((glycosylationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.MWTs.GD Business Rules: SD.MWTs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public molecularweightsLocalType molecularweights
        {
            get
            {
                XElement x = this.GetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((molecularweightsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.PROPs.GD Business Rules: SD.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SD.RSs.GD Business Rules: SD.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (comment?, modifications?, sourcematerials, glycosylations, molecularweights?, properties?, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("structurally-diverseType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<structurallydiverseType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("comment", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationsLocalType));
            localElementDictionary.Add(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialsLocalType));
            localElementDictionary.Add(XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(glycosylationsLocalType));
            localElementDictionary.Add(XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightsLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class commentLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private commentLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (modification+)
        /// </para>
        /// </summary>
        public partial class modificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<modificationType> modificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator modificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static modificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public modificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SD.MOD.GD Business Rules: SD.MOD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public IList<modificationType> modification
            {
                get
                {
                    if ((this.modificationField == null))
                    {
                        this.modificationField = new XTypedList<modificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.modificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.modificationField = null;
                    }
                    else
                    {
                        if ((this.modificationField == null))
                        {
                            this.modificationField = XTypedList<modificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<modificationType>(this.modificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<modificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (sourcematerial+)
        /// </para>
        /// </summary>
        public partial class sourcematerialsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<sourcematerialType> sourcematerialField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator sourcematerialsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcematerialsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static sourcematerialsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public sourcematerialsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SD.SRCM.GD Business Rules: SD.SRCM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public IList<sourcematerialType> sourcematerial
            {
                get
                {
                    if ((this.sourcematerialField == null))
                    {
                        this.sourcematerialField = new XTypedList<sourcematerialType>(this, LinqToXsdTypeManager.Instance, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.sourcematerialField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.sourcematerialField = null;
                    }
                    else
                    {
                        if ((this.sourcematerialField == null))
                        {
                            this.sourcematerialField = XTypedList<sourcematerialType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<sourcematerialType>(this.sourcematerialField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sourcematerialsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (glycosylation+)
        /// </para>
        /// </summary>
        public partial class glycosylationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<glycosylationType> glycosylationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator glycosylationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<glycosylationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static glycosylationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (glycosylation+)
            /// </para>
            /// </summary>
            public glycosylationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SD.GLY.GD Business Rules: SD.GLY.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (glycosylation+)
            /// </para>
            /// </summary>
            public IList<glycosylationType> glycosylation
            {
                get
                {
                    if ((this.glycosylationField == null))
                    {
                        this.glycosylationField = new XTypedList<glycosylationType>(this, LinqToXsdTypeManager.Instance, XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.glycosylationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.glycosylationField = null;
                    }
                    else
                    {
                        if ((this.glycosylationField == null))
                        {
                            this.glycosylationField = XTypedList<glycosylationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<glycosylationType>(this.glycosylationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("glycosylations", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<glycosylationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("glycosylation", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(glycosylationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (molecularweight+)
        /// </para>
        /// </summary>
        public partial class molecularweightsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<molecularweightType> molecularweightField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator molecularweightsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<molecularweightsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static molecularweightsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public molecularweightsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SD.MWT.GD Business Rules: SD.MWT.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (molecularweight+)
            /// </para>
            /// </summary>
            public IList<molecularweightType> molecularweight
            {
                get
                {
                    if ((this.molecularweightField == null))
                    {
                        this.molecularweightField = new XTypedList<molecularweightType>(this, LinqToXsdTypeManager.Instance, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.molecularweightField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.molecularweightField = null;
                    }
                    else
                    {
                        if ((this.molecularweightField == null))
                        {
                            this.molecularweightField = XTypedList<molecularweightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<molecularweightType>(this.molecularweightField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("molecular-weights", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<molecularweightsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("molecular-weight", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(molecularweightType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SD.PROP.GD Business Rules: SD.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Guidance Notes: SD.RS.GD Business Rules: SD.RS.BR
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MIXT.GD Business Rules: MIXT.BR
    /// </para>
    /// <para>
    /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
    /// </para>
    /// </summary>
    public partial class mixtureType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator mixtureType(XElement xe) { return XTypedServices.ToXTypedElement<mixtureType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static mixtureType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("mixture-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("mixture-constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MIXT.GD Business Rules: MIXT.BR
        /// </para>
        /// <para>
        /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
        /// </para>
        /// </summary>
        public mixtureType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MIXT.1.CV.GD List Reference: MIXT.1.CV.LIST Business Rules: MIXT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
        /// </para>
        /// </summary>
        public cvType mixturetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mixture-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mixture-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MIXT.SRCMs.GD Business Rules: MIXT.SRCMs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
        /// </para>
        /// </summary>
        public sourcematerialsLocalType sourcematerials
        {
            get
            {
                XElement x = this.GetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((sourcematerialsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MIXT.MODs.GD Business Rules: MIXT.MODs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
        /// </para>
        /// </summary>
        public modificationsLocalType modifications
        {
            get
            {
                XElement x = this.GetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((modificationsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MIXT.MXCONs.GD Business Rules: MIXT.MXCONs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mixturetypecv, sourcematerials?, modifications?, mixtureconstituents)
        /// </para>
        /// </summary>
        public mixtureconstituentsLocalType mixtureconstituents
        {
            get
            {
                XElement x = this.GetElement(XName.Get("mixture-constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((mixtureconstituentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("mixture-constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("mixtureType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<mixtureType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("mixture-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialsLocalType));
            localElementDictionary.Add(XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationsLocalType));
            localElementDictionary.Add(XName.Get("mixture-constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(mixtureconstituentsLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (sourcematerial+)
        /// </para>
        /// </summary>
        public partial class sourcematerialsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<sourcematerialType> sourcematerialField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator sourcematerialsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourcematerialsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static sourcematerialsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public sourcematerialsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MIXT.SRCM.GD Business Rules: MIXT.SRCM.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sourcematerial+)
            /// </para>
            /// </summary>
            public IList<sourcematerialType> sourcematerial
            {
                get
                {
                    if ((this.sourcematerialField == null))
                    {
                        this.sourcematerialField = new XTypedList<sourcematerialType>(this, LinqToXsdTypeManager.Instance, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.sourcematerialField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.sourcematerialField = null;
                    }
                    else
                    {
                        if ((this.sourcematerialField == null))
                        {
                            this.sourcematerialField = XTypedList<sourcematerialType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<sourcematerialType>(this.sourcematerialField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("source-materials", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<sourcematerialsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("source-material", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(sourcematerialType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (modification+)
        /// </para>
        /// </summary>
        public partial class modificationsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<modificationType> modificationField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator modificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modificationsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static modificationsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public modificationsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MIXT.MOD.GD Business Rules: MIXT.MOD.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (modification+)
            /// </para>
            /// </summary>
            public IList<modificationType> modification
            {
                get
                {
                    if ((this.modificationField == null))
                    {
                        this.modificationField = new XTypedList<modificationType>(this, LinqToXsdTypeManager.Instance, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.modificationField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.modificationField = null;
                    }
                    else
                    {
                        if ((this.modificationField == null))
                        {
                            this.modificationField = XTypedList<modificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<modificationType>(this.modificationField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("modifications", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<modificationsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("modification", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(modificationType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (mixtureconstituent+)
        /// </para>
        /// </summary>
        public partial class mixtureconstituentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<mixtureconstituentType> mixtureconstituentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator mixtureconstituentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mixtureconstituentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static mixtureconstituentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("mixture-constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (mixtureconstituent+)
            /// </para>
            /// </summary>
            public mixtureconstituentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MIXT.MXCONs.GD Business Rules: MIXT.MXCONs.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (mixtureconstituent+)
            /// </para>
            /// </summary>
            public IList<mixtureconstituentType> mixtureconstituent
            {
                get
                {
                    if ((this.mixtureconstituentField == null))
                    {
                        this.mixtureconstituentField = new XTypedList<mixtureconstituentType>(this, LinqToXsdTypeManager.Instance, XName.Get("mixture-constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.mixtureconstituentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.mixtureconstituentField = null;
                    }
                    else
                    {
                        if ((this.mixtureconstituentField == null))
                        {
                            this.mixtureconstituentField = XTypedList<mixtureconstituentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("mixture-constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<mixtureconstituentType>(this.mixtureconstituentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("mixture-constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<mixtureconstituentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("mixture-constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(mixtureconstituentType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MXCON.GD Business Rules: MXCON.BR
    /// </para>
    /// <para>
    /// Regular expression: (constituentid?, constituentname, constituentrequirementcv?)
    /// </para>
    /// </summary>
    public partial class mixtureconstituentType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator mixtureconstituentType(XElement xe) { return XTypedServices.ToXTypedElement<mixtureconstituentType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static mixtureconstituentType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("constituent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("constituent-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("constituent-requirement-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MXCON.GD Business Rules: MXCON.BR
        /// </para>
        /// <para>
        /// Regular expression: (constituentid?, constituentname, constituentrequirementcv?)
        /// </para>
        /// </summary>
        public mixtureconstituentType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MXCON.1.GD Business Rules: MXCON.1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (constituentid?, constituentname, constituentrequirementcv?)
        /// </para>
        /// </summary>
        public string constituentid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("constituent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("constituent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "constituentid", constituentidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MXCON.2.GD Business Rules: MXCON.2.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (constituentid?, constituentname, constituentrequirementcv?)
        /// </para>
        /// </summary>
        public string constituentname
        {
            get
            {
                XElement x = this.GetElement(XName.Get("constituent-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("constituent-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "constituentname", constituentnameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MXCON.3.CV.GD List Reference: MXCON.3.CV.LIST Business Rules: MXCON.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (constituentid?, constituentname, constituentrequirementcv?)
        /// </para>
        /// </summary>
        public cvType constituentrequirementcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("constituent-requirement-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("constituent-requirement-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("mixture-constituentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<mixtureconstituentType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("constituent-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("constituent-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("constituent-requirement-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class constituentidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private constituentidLocalType()
            {
            }
        }

        private class constituentnameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private constituentnameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GP1.GD Business Rules: GP1.BR
    /// </para>
    /// <para>
    /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
    /// </para>
    /// </summary>
    public partial class specifiedsubstancegroup1Type : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator specifiedsubstancegroup1Type(XElement xe) { return XTypedServices.ToXTypedElement<specifiedsubstancegroup1Type>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static specifiedsubstancegroup1Type()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("specified-substance-group1-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified-substance-group1-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("physical-forms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP1.GD Business Rules: GP1.BR
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup1Type()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP1.1.GD Business Rules: GP1.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup1id
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group1-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group1-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup1id", specifiedsubstancegroup1idLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP1.2.GD Business Rules: GP1.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup1name
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group1-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group1-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup1name", specifiedsubstancegroup1nameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP1.CONs.GD Business Rules: GP1.CONs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public constituentsLocalType constituents
        {
            get
            {
                XElement x = this.GetElement(XName.Get("constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((constituentsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP1.PROPs.GD Business Rules: GP1.PROPs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public propertiesLocalType properties
        {
            get
            {
                XElement x = this.GetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((propertiesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP1.PFs.GD Business Rules: GP1.PFs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public physicalformsLocalType physicalforms
        {
            get
            {
                XElement x = this.GetElement(XName.Get("physical-forms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((physicalformsLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("physical-forms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP1.RSs.GD Business Rules: GP1.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1id?, specifiedsubstancegroup1name?, constituents, properties?, physicalforms, referencesources?)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("specified-substance-group1Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<specifiedsubstancegroup1Type>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("specified-substance-group1-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("specified-substance-group1-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(constituentsLocalType));
            localElementDictionary.Add(XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertiesLocalType));
            localElementDictionary.Add(XName.Get("physical-forms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(physicalformsLocalType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class specifiedsubstancegroup1idLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup1idLocalType()
            {
            }
        }

        private class specifiedsubstancegroup1nameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup1nameLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (constituent+)
        /// </para>
        /// </summary>
        public partial class constituentsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<constituentType> constituentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator constituentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<constituentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static constituentsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (constituent+)
            /// </para>
            /// </summary>
            public constituentsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: GP1.CON.GD Business Rules: GP1.CON.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (constituent+)
            /// </para>
            /// </summary>
            public IList<constituentType> constituent
            {
                get
                {
                    if ((this.constituentField == null))
                    {
                        this.constituentField = new XTypedList<constituentType>(this, LinqToXsdTypeManager.Instance, XName.Get("constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.constituentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.constituentField = null;
                    }
                    else
                    {
                        if ((this.constituentField == null))
                        {
                            this.constituentField = XTypedList<constituentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<constituentType>(this.constituentField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("constituents", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<constituentsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("constituent", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(constituentType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (property+)
        /// </para>
        /// </summary>
        public partial class propertiesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<propertyType> propertyField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator propertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<propertiesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static propertiesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public propertiesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: GP1.PROP.GD Business Rules: GP1.PROP.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (property+)
            /// </para>
            /// </summary>
            public IList<propertyType> property
            {
                get
                {
                    if ((this.propertyField == null))
                    {
                        this.propertyField = new XTypedList<propertyType>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.propertyField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.propertyField = null;
                    }
                    else
                    {
                        if ((this.propertyField == null))
                        {
                            this.propertyField = XTypedList<propertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<propertyType>(this.propertyField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("properties", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<propertiesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("property", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(propertyType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (physicalform+)
        /// </para>
        /// </summary>
        public partial class physicalformsLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<physicalformType> physicalformField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator physicalformsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<physicalformsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static physicalformsLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("physical-form", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (physicalform+)
            /// </para>
            /// </summary>
            public physicalformsLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: GP1.PF.GD Business Rules: GP1.PF.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (physicalform+)
            /// </para>
            /// </summary>
            public IList<physicalformType> physicalform
            {
                get
                {
                    if ((this.physicalformField == null))
                    {
                        this.physicalformField = new XTypedList<physicalformType>(this, LinqToXsdTypeManager.Instance, XName.Get("physical-form", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.physicalformField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.physicalformField = null;
                    }
                    else
                    {
                        if ((this.physicalformField == null))
                        {
                            this.physicalformField = XTypedList<physicalformType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("physical-form", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<physicalformType>(this.physicalformField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("physical-forms", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<physicalformsLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("physical-form", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(physicalformType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: GP1.RS.GD Business Rules: GP1.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: PF.GD Business Rules: PF.BR
    /// </para>
    /// <para>
    /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class physicalformType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator physicalformType(XElement xe) { return XTypedServices.ToXTypedElement<physicalformType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static physicalformType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("physical-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("physical-form-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: PF.GD Business Rules: PF.BR
        /// </para>
        /// <para>
        /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public physicalformType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PF.1.CV.GD List Reference: PF.1.CV.LIST Business Rules: PF.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType physicalstatecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("physical-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("physical-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PF.2.CV.GD List Reference: PF.2.CV.LIST Business Rules: PF.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType physicalformtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("physical-form-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("physical-form-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PF.3.CV.GD List Reference: PF.3.CV.LIST Business Rules: PF.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: PF.AMT.GD Business Rules: PF.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (physicalstatecv?, physicalformtypecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("physical-formType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<physicalformType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("physical-state-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("physical-form-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: CON.GD Business Rules: CON.BR
    /// </para>
    /// <para>
    /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
    /// </para>
    /// </summary>
    public partial class constituentType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator constituentType(XElement xe) { return XTypedServices.ToXTypedElement<constituentType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static constituentType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("substance-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CON.GD Business Rules: CON.BR
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public constituentType()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CON.1.GD Business Rules: CON.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string substanceid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substanceid", substanceidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: CON.2.GD Business Rules: CON.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public string substancename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "substancename", substancenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: CON.3.CV.GD List Reference: CON.3.CV.LIST Business Rules: CON.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType substancerolecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("substance-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("substance-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: CON.4.CV.GD List Reference: CON.4.CV.LIST Business Rules: CON.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public cvType amounttypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: CON.AMT.GD Business Rules: CON.AMT.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (substanceid?, substancename, substancerolecv, amounttypecv?, amount?)
        /// </para>
        /// </summary>
        public amountType amount
        {
            get
            {
                XElement x = this.GetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((amountType)(x));
            }
            set
            {
                this.SetElement(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("constituentType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<constituentType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("substance-role-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("amount", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(amountType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class substanceidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substanceidLocalType()
            {
            }
        }

        private class substancenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private substancenameLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GP2.GD Business Rules: GP2.BR
    /// </para>
    /// <para>
    /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
    /// </para>
    /// </summary>
    public partial class specifiedsubstancegroup2Type : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator specifiedsubstancegroup2Type(XElement xe) { return XTypedServices.ToXTypedElement<specifiedsubstancegroup2Type>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static specifiedsubstancegroup2Type()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("specified-substance-group2-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified-substance-group2-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("manufacturing", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP2.GD Business Rules: GP2.BR
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup2Type()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP2.1.GD Business Rules: GP2.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup2id
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group2-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group2-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup2id", specifiedsubstancegroup2idLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP2.2.GD Business Rules: GP2.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup2name
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group2-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group2-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup2name", specifiedsubstancegroup2nameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP2.3.GD Business Rules: GP2.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
        /// </para>
        /// </summary>
        public string parentsubstanceid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "parentsubstanceid", parentsubstanceidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP2.MANU.GD Business Rules: GP2.MANU.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup2id?, specifiedsubstancegroup2name?, parentsubstanceid, manufacturing)
        /// </para>
        /// </summary>
        public manufacturingType manufacturing
        {
            get
            {
                XElement x = this.GetElement(XName.Get("manufacturing", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((manufacturingType)(x));
            }
            set
            {
                this.SetElement(XName.Get("manufacturing", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("specified-substance-group2Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<specifiedsubstancegroup2Type>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("specified-substance-group2-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("specified-substance-group2-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("manufacturing", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(manufacturingType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class specifiedsubstancegroup2idLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup2idLocalType()
            {
            }
        }

        private class specifiedsubstancegroup2nameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup2nameLocalType()
            {
            }
        }

        private class parentsubstanceidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private parentsubstanceidLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GP3.GD Business Rules: GP3.BR
    /// </para>
    /// <para>
    /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
    /// </para>
    /// </summary>
    public partial class specifiedsubstancegroup3Type : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator specifiedsubstancegroup3Type(XElement xe) { return XTypedServices.ToXTypedElement<specifiedsubstancegroup3Type>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static specifiedsubstancegroup3Type()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("specified-substance-group3-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified-substance-group3-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("grade", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP3.GD Business Rules: GP3.BR
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup3Type()
        {
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP3.1.GD Business Rules: GP3.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup3id
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group3-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group3-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup3id", specifiedsubstancegroup3idLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP3.2.GD Business Rules: GP3.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
        /// </para>
        /// </summary>
        public string specifiedsubstancegroup3name
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group3-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("specified-substance-group3-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "specifiedsubstancegroup3name", specifiedsubstancegroup3nameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GP3.3.GD Business Rules: GP3.3.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
        /// </para>
        /// </summary>
        public string parentsubstanceid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "parentsubstanceid", parentsubstanceidLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GP3.GRD.GD Business Rules: GP3.GRD.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup3id?, specifiedsubstancegroup3name?, parentsubstanceid, grade)
        /// </para>
        /// </summary>
        public gradeType grade
        {
            get
            {
                XElement x = this.GetElement(XName.Get("grade", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((gradeType)(x));
            }
            set
            {
                this.SetElement(XName.Get("grade", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("specified-substance-group3Type", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<specifiedsubstancegroup3Type>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("specified-substance-group3-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("specified-substance-group3-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("parent-substance-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("grade", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(gradeType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class specifiedsubstancegroup3idLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup3idLocalType()
            {
            }
        }

        private class specifiedsubstancegroup3nameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private specifiedsubstancegroup3nameLocalType()
            {
            }
        }

        private class parentsubstanceidLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private parentsubstanceidLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: GRD.GD Business Rules: GRD.BR
    /// </para>
    /// <para>
    /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
    /// </para>
    /// </summary>
    public partial class gradeType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator gradeType(XElement xe) { return XTypedServices.ToXTypedElement<gradeType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static gradeType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("grade-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("grade-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("grade-reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GRD.GD Business Rules: GRD.BR
        /// </para>
        /// <para>
        /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
        /// </para>
        /// </summary>
        public gradeType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GRD.1.CV.GD List Reference: GRD.1.CV.LIST Business Rules: GRD.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
        /// </para>
        /// </summary>
        public cvType gradetypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("grade-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("grade-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GRD.2.GD Business Rules: GRD.2.BR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
        /// </para>
        /// </summary>
        public string gradename
        {
            get
            {
                XElement x = this.GetElement(XName.Get("grade-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("grade-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "gradename", gradenameLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: GRD.3.GD Business Rules: GRD.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
        /// </para>
        /// </summary>
        public string gradereferencesource
        {
            get
            {
                XElement x = this.GetElement(XName.Get("grade-reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("grade-reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "gradereferencesource", gradereferencesourceLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: GRD.RSs.GD Business Rules: GRD.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (gradetypecv, gradename, gradereferencesource?, referencesources)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("gradeType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<gradeType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("grade-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("grade-name", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("grade-reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class gradenameLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private gradenameLocalType()
            {
            }
        }

        private class gradereferencesourceLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private gradereferencesourceLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: GRD.RS.GD Business Rules: GRD.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: MANU.GD Business Rules: MANU.BR
    /// </para>
    /// <para>
    /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
    /// </para>
    /// </summary>
    public partial class manufacturingType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator manufacturingType(XElement xe) { return XTypedServices.ToXTypedElement<manufacturingType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static manufacturingType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("manufacturer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("manufacturer-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("manufacturing-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("production-method-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("production-system-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("production-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: MANU.GD Business Rules: MANU.BR
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public manufacturingType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.1.GD Business Rules: MANU.1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public string manufacturerid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("manufacturer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("manufacturer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "manufacturerid", manufactureridLocalType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.2.CV.GD List Reference: MANU.2.CV.LIST Business Rules: MANU.2.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public cvType manufacturernamecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("manufacturer-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("manufacturer-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.3.CV.GD List Reference: MANU.3.CV.LIST Business Rules: MANU.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public cvType manufacturingtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("manufacturing-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("manufacturing-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.4.CV.GD List Reference: MANU.4.CV.LIST Business Rules: MANU.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public cvType productionmethodtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("production-method-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("production-method-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.5.CV.GD List Reference: MANU.5.CV.LIST Business Rules: MANU.5.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public cvType productionsystemtypecv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("production-system-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("production-system-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.6.CV.GD List Reference: MANU.6.CV.LIST Business Rules: MANU.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public cvType productionsystemcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("production-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("production-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: MANU.RSs.GD Business Rules: MANU.RSs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (manufacturerid, manufacturernamecv, manufacturingtypecv?, productionmethodtypecv, productionsystemtypecv, productionsystemcv?, referencesources)
        /// </para>
        /// </summary>
        public referencesourcesLocalType referencesources
        {
            get
            {
                XElement x = this.GetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((referencesourcesLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("manufacturingType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<manufacturingType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("manufacturer-id", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
            localElementDictionary.Add(XName.Get("manufacturer-name-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("manufacturing-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("production-method-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("production-system-type-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("production-system-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourcesLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class manufactureridLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private manufactureridLocalType()
            {
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (referencesource+)
        /// </para>
        /// </summary>
        public partial class referencesourcesLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<referencesourceType> referencesourceField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator referencesourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referencesourcesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static referencesourcesLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public referencesourcesLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: MANU.RS.GD Business Rules: MANU.RS.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (referencesource+)
            /// </para>
            /// </summary>
            public IList<referencesourceType> referencesource
            {
                get
                {
                    if ((this.referencesourceField == null))
                    {
                        this.referencesourceField = new XTypedList<referencesourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.referencesourceField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.referencesourceField = null;
                    }
                    else
                    {
                        if ((this.referencesourceField == null))
                        {
                            this.referencesourceField = XTypedList<referencesourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<referencesourceType>(this.referencesourceField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("reference-sources", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<referencesourcesLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reference-source", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(referencesourceType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: AMT.GD Business Rules: AMT.BR
    /// </para>
    /// <para>
    /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
    /// </para>
    /// </summary>
    public partial class amountType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator amountType(XElement xe) { return XTypedServices.ToXTypedElement<amountType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static amountType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("quantity-operator-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("low-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("high-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("average", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("average-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("average-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("non-numeric-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AMT.GD Business Rules: AMT.BR
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public amountType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.1.CV.GD List Reference: AMT.1.CV.LIST Business Rules: AMT.1.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType quantityoperatorcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("quantity-operator-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("quantity-operator-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AMT.2.GD Business Rules: AMT.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public object lowlimitnumeratorvalue
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("low-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "lowlimitnumeratorvalue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.3.CV.GD List Reference: AMT.3.CV.LIST Business Rules: AMT.3.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType lowlimitnumeratorunitcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("low-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.4.CV.GD List Reference: AMT.4.CV.LIST Business Rules: AMT.4.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType lowlimitnumeratorunitprefixcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("low-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AMT.5.GD Business Rules: AMT.5.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public object lowlimitdenominatorvalue
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("low-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "lowlimitdenominatorvalue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.6.CV.GD List Reference: AMT.6.CV.LIST Business Rules: AMT.6.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType lowlimitdenominatorunitcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("low-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.7.CV.GD List Reference: AMT.7.CV.LIST Business Rules: AMT.7.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType lowlimitdenominatorunitprefixcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("low-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("low-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: AMT.8.GD Business Rules: AMT.8.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public object highlimitnumeratorvalue
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("high-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "highlimitnumeratorvalue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.9.CV.GD List Reference: AMT.9.CV.LIST Business Rules: AMT.9.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType highlimitnumeratorunitcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("high-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.10.CV.GD List Reference: AMT.10.CV.LIST Business Rules: AMT.10.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType highlimitnumeratorunitprefixcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("high-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.11.GD Business Rules: AMT.11.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public object highlimitdenominatorvalue
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("high-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "highlimitdenominatorvalue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.12.CV.GD List Reference: AMT.12.CV.LIST Business Rules: AMT.12.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType highlimitdenominatorunitcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("high-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.13.CV.GD List Reference: AMT.13.CV.LIST Business Rules: AMT.13.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType highlimitdenominatorunitprefixcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("high-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("high-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.14.GD Business Rules: AMT.14.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public object average
        {
            get
            {
                XElement x = this.GetElement(XName.Get("average", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseUnionValue(x, global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("average", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "average", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.unionAmtType.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.15.CV.GD List Reference: AMT.15.CV.LIST Business Rules: AMT.15.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType averageunitprefixcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("average-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("average-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.16.CV.GD List Reference: AMT.16.CV.LIST Business Rules: AMT.16.CV.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public cvType averageunitcv
        {
            get
            {
                XElement x = this.GetElement(XName.Get("average-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((cvType)(x));
            }
            set
            {
                this.SetElement(XName.Get("average-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: AMT.17.GD Business Rules: AMT.17.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (quantityoperatorcv?, lowlimitnumeratorvalue?, lowlimitnumeratorunitcv?, lowlimitnumeratorunitprefixcv?, lowlimitdenominatorvalue?, lowlimitdenominatorunitcv?, lowlimitdenominatorunitprefixcv?, highlimitnumeratorvalue?, highlimitnumeratorunitcv?, highlimitnumeratorunitprefixcv?, highlimitdenominatorvalue?, highlimitdenominatorunitcv?, highlimitdenominatorunitprefixcv?, average?, averageunitprefixcv?, averageunitcv?, nonnumericvalue?)
        /// </para>
        /// </summary>
        public string nonnumericvalue
        {
            get
            {
                XElement x = this.GetElement(XName.Get("non-numeric-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElementWithValidation(XName.Get("non-numeric-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value, "nonnumericvalue", nonnumericvalueLocalType.TypeDefinition);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("amountType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<amountType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("quantity-operator-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("low-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("low-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("low-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("low-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("low-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("low-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("high-limit-numerator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("high-limit-numerator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("high-limit-numerator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("high-limit-denominator-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("high-limit-denominator-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("high-limit-denominator-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("average", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(object));
            localElementDictionary.Add(XName.Get("average-unit-prefix-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("average-unit-cv", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(cvType));
            localElementDictionary.Add(XName.Get("non-numeric-value", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(string));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        private class nonnumericvalueLocalType
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

            private nonnumericvalueLocalType()
            {
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SING.GD Business Rules: SING.BR
    /// </para>
    /// <para>
    /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
    /// </para>
    /// </summary>
    public partial class singleType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator singleType(XElement xe) { return XTypedServices.ToXTypedElement<singleType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static singleType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structures", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("chemical", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("protein", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("nucleic-acid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("polymer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("structurally-diverse", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SING.GD Business Rules: SING.BR
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public singleType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.STRs.GD Business Rules: SING.STRs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public structuresLocalType structures
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structures", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((structuresLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structures", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.CHM.GD Business Rules: SING.CHM.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public chemicalType chemical
        {
            get
            {
                XElement x = this.GetElement(XName.Get("chemical", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((chemicalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("chemical", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.PRO.GD Business Rules: SING.PRO.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public proteinType protein
        {
            get
            {
                XElement x = this.GetElement(XName.Get("protein", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((proteinType)(x));
            }
            set
            {
                this.SetElement(XName.Get("protein", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.NAs.GD Business Rules: SING.NAs.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public nucleicacidType nucleicacid
        {
            get
            {
                XElement x = this.GetElement(XName.Get("nucleic-acid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((nucleicacidType)(x));
            }
            set
            {
                this.SetElement(XName.Get("nucleic-acid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.POLY.GD Business Rules: SING.POLY.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public polymerType polymer
        {
            get
            {
                XElement x = this.GetElement(XName.Get("polymer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((polymerType)(x));
            }
            set
            {
                this.SetElement(XName.Get("polymer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SING.SD.GD Business Rules: SING.SD.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (structures?, chemical?, protein?, nucleicacid?, polymer?, structurallydiverse?)
        /// </para>
        /// </summary>
        public structurallydiverseType structurallydiverse
        {
            get
            {
                XElement x = this.GetElement(XName.Get("structurally-diverse", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((structurallydiverseType)(x));
            }
            set
            {
                this.SetElement(XName.Get("structurally-diverse", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("singleType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<singleType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("structures", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structuresLocalType));
            localElementDictionary.Add(XName.Get("chemical", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(chemicalType));
            localElementDictionary.Add(XName.Get("protein", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(proteinType));
            localElementDictionary.Add(XName.Get("nucleic-acid", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(nucleicacidType));
            localElementDictionary.Add(XName.Get("polymer", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(polymerType));
            localElementDictionary.Add(XName.Get("structurally-diverse", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structurallydiverseType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (structure+)
        /// </para>
        /// </summary>
        public partial class structuresLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<structureType> structureField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator structuresLocalType(XElement xe) { return XTypedServices.ToXTypedElement<structuresLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static structuresLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("structure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (structure+)
            /// </para>
            /// </summary>
            public structuresLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// 
            ///Guidance Notes: SING.STR.GD Business Rules: SING.STR.BR
            ///
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (structure+)
            /// </para>
            /// </summary>
            public IList<structureType> structure
            {
                get
                {
                    if ((this.structureField == null))
                    {
                        this.structureField = new XTypedList<structureType>(this, LinqToXsdTypeManager.Instance, XName.Get("structure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                    }
                    return this.structureField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.structureField = null;
                    }
                    else
                    {
                        if ((this.structureField == null))
                        {
                            this.structureField = XTypedList<structureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("structure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                        }
                        else
                        {
                            XTypedServices.SetList<structureType>(this.structureField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("structures", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<structuresLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("structure", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(structureType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: SPCFD.GD Business Rules: SPCFD.BR
    /// </para>
    /// <para>
    /// Regular expression: (specifiedsubstancegroup1?, specifiedsubstancegroup2?, specifiedsubstancegroup3?)
    /// </para>
    /// </summary>
    public partial class specifiedType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator specifiedType(XElement xe) { return XTypedServices.ToXTypedElement<specifiedType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static specifiedType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("specified-substance-group1", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified-substance-group2", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")), new NamedContentModelEntity(XName.Get("specified-substance-group3", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi")));
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: SPCFD.GD Business Rules: SPCFD.BR
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1?, specifiedsubstancegroup2?, specifiedsubstancegroup3?)
        /// </para>
        /// </summary>
        public specifiedType()
        {
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SPCFD.GP1.GD Business Rules: SPCFD.GP1.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1?, specifiedsubstancegroup2?, specifiedsubstancegroup3?)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup1Type specifiedsubstancegroup1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group1", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((specifiedsubstancegroup1Type)(x));
            }
            set
            {
                this.SetElement(XName.Get("specified-substance-group1", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SPCFD.GP2.GD Business Rules: SPCFD.GP2.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1?, specifiedsubstancegroup2?, specifiedsubstancegroup3?)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup2Type specifiedsubstancegroup2
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group2", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((specifiedsubstancegroup2Type)(x));
            }
            set
            {
                this.SetElement(XName.Get("specified-substance-group2", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        /// <summary>
        /// <para>
        /// 
        ///Guidance Notes: SPCFD.GP3.GD Business Rules: SPCFD.GP3.BR
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (specifiedsubstancegroup1?, specifiedsubstancegroup2?, specifiedsubstancegroup3?)
        /// </para>
        /// </summary>
        public specifiedsubstancegroup3Type specifiedsubstancegroup3
        {
            get
            {
                XElement x = this.GetElement(XName.Get("specified-substance-group3", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"));
                return ((specifiedsubstancegroup3Type)(x));
            }
            set
            {
                this.SetElement(XName.Get("specified-substance-group3", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("specifiedType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<specifiedType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("specified-substance-group1", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(specifiedsubstancegroup1Type));
            localElementDictionary.Add(XName.Get("specified-substance-group2", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(specifiedsubstancegroup2Type));
            localElementDictionary.Add(XName.Get("specified-substance-group3", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi"), typeof(specifiedsubstancegroup3Type));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Guidance Notes: UL.GD Business Rules: UL.BR
    /// </para>
    /// </summary>
    public partial class cvType : XTypedElement, IXMetaData
    {

        public static explicit operator cvType(XElement xe) { return XTypedServices.ToXTypedElement<cvType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        /// <summary>
        /// <para>
        /// Guidance Notes: UL.GD Business Rules: UL.BR
        /// </para>
        /// </summary>
        public cvType()
        {
        }

        public string TypedValue
        {
            get
            {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetValueWithValidation(value, "TypedValue", global::eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.cvTypelength.TypeDefinition);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: UL.1.GD Business Rules: UL.1.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string termid
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("term-id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("term-id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: UL.2.GD Business Rules: UL.2.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> termrevisionnum
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("term-revision-num", ""));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("term-revision-num", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: UL.3.GD Business Rules: UL.3.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string termlang
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("term-lang", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("term-lang", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Guidance Notes: UL.4.GD Business Rules: UL.4.BR
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string termenglishequiv
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("term-english-equiv", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("term-english-equiv", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("cvType", "http://eudravigilance.ema.europa.eu/schema/emaxevmpd_ssi");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<cvType>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    public sealed class cvTypelength
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 250, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

        private cvTypelength()
        {
        }
    }

    public sealed class emptyType
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));

        private emptyType()
        {
        }
    }

    public sealed class unionAmtType
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), null),
                    eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.emptyType.TypeDefinition});

        private unionAmtType()
        {
        }
    }

    public sealed class IntType
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 9999m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));

        private IntType()
        {
        }
    }

    public sealed class unionIntType
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.IntType.TypeDefinition,
                    eudravigilance.ema.europa.eu.schema.emaxevmpd_ssi.emptyType.TypeDefinition});

        private unionIntType()
        {
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public substance substance { get { return rootObject as substance; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(substance root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}
